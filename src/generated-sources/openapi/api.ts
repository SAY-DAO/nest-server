/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * SAY API
 * powered by Flasgger
 *
 * OpenAPI spec version: 2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://api.sayapp.company/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 *
 * @export
 * @interface Body
 */
export interface Body {
    /**
     *
     * @type {Array<number>}
     * @memberof Body
     */
    needIds?: Array<number>;
}

/**
 *
 * @export
 * @interface Cart
 */
export interface Cart {
    /**
     *
     * @type {number}
     * @memberof Cart
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof Cart
     */
    userId?: number;
    /**
     *
     * @type {Date}
     * @memberof Cart
     */
    created?: Date;
    /**
     *
     * @type {Date}
     * @memberof Cart
     */
    updated?: Date;
    /**
     *
     * @type {number}
     * @memberof Cart
     */
    totalAmount?: number;
    /**
     *
     * @type {Array<CartNeeds>}
     * @memberof Cart
     */
    needs?: Array<CartNeeds>;
}

/**
 *
 * @export
 * @interface CartNeeds
 */
export interface CartNeeds {
    /**
     *
     * @type {number}
     * @memberof CartNeeds
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof CartNeeds
     */
    needId?: number;
    /**
     *
     * @type {string}
     * @memberof CartNeeds
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof CartNeeds
     */
    amount?: number;
    /**
     *
     * @type {string}
     * @memberof CartNeeds
     */
    title?: string;
    /**
     *
     * @type {number}
     * @memberof CartNeeds
     */
    cost?: number;
    /**
     *
     * @type {number}
     * @memberof CartNeeds
     */
    paid?: number;
    /**
     *
     * @type {Date}
     * @memberof CartNeeds
     */
    created?: Date;
    /**
     *
     * @type {Date}
     * @memberof CartNeeds
     */
    deleted?: Date;
}

/**
 *
 * @export
 * @interface CartPayment
 */
export interface CartPayment {
    /**
     *
     * @type {number}
     * @memberof CartPayment
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof CartPayment
     */
    cartId?: number;
    /**
     *
     * @type {string}
     * @memberof CartPayment
     */
    orderId?: string;
    /**
     *
     * @type {Date}
     * @memberof CartPayment
     */
    created?: Date;
    /**
     *
     * @type {Date}
     * @memberof CartPayment
     */
    updated?: Date;
    /**
     *
     * @type {Date}
     * @memberof CartPayment
     */
    verified?: Date;
    /**
     *
     * @type {Date}
     * @memberof CartPayment
     */
    transactionDate?: Date;
    /**
     *
     * @type {number}
     * @memberof CartPayment
     */
    bankAmount?: number;
    /**
     *
     * @type {number}
     * @memberof CartPayment
     */
    creditAmount?: number;
    /**
     *
     * @type {number}
     * @memberof CartPayment
     */
    donationAmount?: number;
    /**
     *
     * @type {number}
     * @memberof CartPayment
     */
    needsAmount?: number;
    /**
     *
     * @type {number}
     * @memberof CartPayment
     */
    totalAmount?: number;
    /**
     *
     * @type {string}
     * @memberof CartPayment
     */
    gatewayPaymentId?: string;
    /**
     *
     * @type {string}
     * @memberof CartPayment
     */
    gatewayTrackId?: string;
    /**
     *
     * @type {string}
     * @memberof CartPayment
     */
    link?: string;
    /**
     *
     * @type {string}
     * @memberof CartPayment
     */
    cardNo?: string;
    /**
     *
     * @type {string}
     * @memberof CartPayment
     */
    hashedCardNo?: string;
}

/**
 *
 * @export
 * @interface CartPaymentSuccessful
 */
export interface CartPaymentSuccessful {
    /**
     *
     * @type {string}
     * @memberof CartPaymentSuccessful
     */
    response?: string;
}

/**
 *
 * @export
 * @interface ChangeCost
 */
export interface ChangeCost {
}

/**
 *
 * @export
 * @interface ChildModel
 */
export interface ChildModel {
    /**
     * the child's id
     * @type {number}
     * @memberof ChildModel
     */
    id?: number;
    /**
     * the child's real first name
     * @type {string}
     * @memberof ChildModel
     */
    firstName?: string;
    /**
     * the child's real last name
     * @type {string}
     * @memberof ChildModel
     */
    lastName?: string;
    /**
     * the child's virtual name
     * @type {string}
     * @memberof ChildModel
     */
    sayName?: string;
    /**
     * the child's phone number or a contact way
     * @type {string}
     * @memberof ChildModel
     */
    phoneNumber?: string;
    /**
     * the child's nationality, the international country codes
     * @type {number}
     * @memberof ChildModel
     */
    nationality?: number;
    /**
     * the child's country, the international country codes
     * @type {number}
     * @memberof ChildModel
     */
    country?: number;
    /**
     * the child's city, the international city codes
     * @type {number}
     * @memberof ChildModel
     */
    city?: number;
    /**
     * the child's avatar image path url
     * @type {string}
     * @memberof ChildModel
     */
    avatarUrl?: string;
    /**
     * determines the child's gender, true for male and false for female
     * @type {boolean}
     * @memberof ChildModel
     */
    gender?: boolean;
    /**
     * a text that describes the child
     * @type {string}
     * @memberof ChildModel
     */
    bio?: string;
    /**
     * summary of bio
     * @type {string}
     * @memberof ChildModel
     */
    bioSummary?: string;
    /**
     * the child's voice file path url
     * @type {string}
     * @memberof ChildModel
     */
    voiceUrl?: string;
    /**
     * the child's birth place, the international city codes
     * @type {number}
     * @memberof ChildModel
     */
    birthPlace?: number;
    /**
     * the child's birth date
     * @type {string}
     * @memberof ChildModel
     */
    birthDate?: string;
    /**
     * the child's address
     * @type {string}
     * @memberof ChildModel
     */
    address?: string;
    /**
     * describes how does the child lives
     * @type {number}
     * @memberof ChildModel
     */
    housingStatus?: number;
    /**
     * number of child's real family members
     * @type {number}
     * @memberof ChildModel
     */
    familyCount?: number;
    /**
     * number of child's SAY family members
     * @type {number}
     * @memberof ChildModel
     */
    sayFamilyCount?: number;
    /**
     * describes the child's education level
     * @type {number}
     * @memberof ChildModel
     */
    education?: number;
    /**
     * child's state of happiness
     * @type {number}
     * @memberof ChildModel
     */
    status?: number;
    /**
     * number of done needs of child
     * @type {number}
     * @memberof ChildModel
     */
    doneNeedCount?: number;
    /**
     * the ngo that the child is in
     * @type {number}
     * @memberof ChildModel
     */
    ngoId?: number;
    /**
     * the social worker who covers the child's needs
     * @type {number}
     * @memberof ChildModel
     */
    socialWorkerId?: number;
    /**
     * total credit spent on child
     * @type {number}
     * @memberof ChildModel
     */
    spentCredit?: number;
    /**
     * the date that the child has been created
     * @type {string}
     * @memberof ChildModel
     */
    created?: string;
    /**
     * the last date that the child has been updated
     * @type {string}
     * @memberof ChildModel
     */
    updated?: string;
    /**
     * determines if the child is confirmed or not
     * @type {boolean}
     * @memberof ChildModel
     */
    isDeleted?: boolean;
    /**
     * determines if the child is confirmed or not
     * @type {boolean}
     * @memberof ChildModel
     */
    isConfirmed?: boolean;
    /**
     * the panel user who confirms the child
     * @type {number}
     * @memberof ChildModel
     */
    confirmUser?: number;
    /**
     * the date that the child has been confirmed
     * @type {string}
     * @memberof ChildModel
     */
    confirmDate?: string;
    /**
     * a unique code generated automatically from ngo id, ngo's social workers count and social worker's children count
     * @type {string}
     * @memberof ChildModel
     */
    generatedCode?: string;
    /**
     * determines if the child is migrated or not
     * @type {boolean}
     * @memberof ChildModel
     */
    isMigrated?: boolean;
    /**
     * the social worker whom the child is migrated to
     * @type {boolean}
     * @memberof ChildModel
     */
    migratedId?: boolean;
    /**
     * the date that the child has been migrated
     * @type {boolean}
     * @memberof ChildModel
     */
    migrateDate?: boolean;
}

/**
 *
 * @export
 * @interface ChildrenWithFamilyMembers
 */
export interface ChildrenWithFamilyMembers extends Array<ChildrenWithFamilyMembersInner> {
}

/**
 *
 * @export
 * @interface ChildrenWithFamilyMembersInner
 */
export interface ChildrenWithFamilyMembersInner {
    /**
     *
     * @type {number}
     * @memberof ChildrenWithFamilyMembersInner
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ChildrenWithFamilyMembersInner
     */
    sayName?: string;
    /**
     *
     * @type {string}
     * @memberof ChildrenWithFamilyMembersInner
     */
    avatarUrl?: string;
    /**
     *
     * @type {ChildrenWithFamilyMembersInnerFamily}
     * @memberof ChildrenWithFamilyMembersInner
     */
    family?: ChildrenWithFamilyMembersInnerFamily;
}

/**
 *
 * @export
 * @interface ChildrenWithFamilyMembersInnerFamily
 */
export interface ChildrenWithFamilyMembersInnerFamily {
    /**
     *
     * @type {Array<ChildrenWithFamilyMembersInnerFamilyCurrentMembers>}
     * @memberof ChildrenWithFamilyMembersInnerFamily
     */
    currentMembers?: Array<ChildrenWithFamilyMembersInnerFamilyCurrentMembers>;
}

/**
 *
 * @export
 * @interface ChildrenWithFamilyMembersInnerFamilyCurrentMembers
 */
export interface ChildrenWithFamilyMembersInnerFamilyCurrentMembers {
    /**
     *
     * @type {number}
     * @memberof ChildrenWithFamilyMembersInnerFamilyCurrentMembers
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof ChildrenWithFamilyMembersInnerFamilyCurrentMembers
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof ChildrenWithFamilyMembersInnerFamilyCurrentMembers
     */
    avatarUrl?: string;
    /**
     *
     * @type {boolean}
     * @memberof ChildrenWithFamilyMembersInnerFamilyCurrentMembers
     */
    isParticipated?: boolean;
}

/**
 *
 * @export
 * @interface CityModel
 */
export interface CityModel {
    /**
     *
     * @type {number}
     * @memberof CityModel
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof CityModel
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof CityModel
     */
    stateId?: number;
    /**
     *
     * @type {string}
     * @memberof CityModel
     */
    stateName?: string;
    /**
     *
     * @type {string}
     * @memberof CityModel
     */
    stateCode?: string;
    /**
     *
     * @type {string}
     * @memberof CityModel
     */
    countryCode?: string;
    /**
     *
     * @type {number}
     * @memberof CityModel
     */
    countryId?: number;
    /**
     *
     * @type {string}
     * @memberof CityModel
     */
    countryName?: string;
    /**
     *
     * @type {string}
     * @memberof CityModel
     */
    latitude?: string;
    /**
     *
     * @type {string}
     * @memberof CityModel
     */
    longitude?: string;
}

/**
 *
 * @export
 * @interface CountryModel
 */
export interface CountryModel {
    /**
     *
     * @type {number}
     * @memberof CountryModel
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof CountryModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof CountryModel
     */
    iso3?: string;
    /**
     *
     * @type {string}
     * @memberof CountryModel
     */
    numericCode?: string;
    /**
     *
     * @type {string}
     * @memberof CountryModel
     */
    phoneCode?: string;
    /**
     *
     * @type {string}
     * @memberof CountryModel
     */
    capital?: string;
    /**
     *
     * @type {string}
     * @memberof CountryModel
     */
    currency?: string;
    /**
     *
     * @type {string}
     * @memberof CountryModel
     */
    currencyName?: string;
    /**
     *
     * @type {string}
     * @memberof CountryModel
     */
    currencySymbol?: string;
    /**
     *
     * @type {string}
     * @memberof CountryModel
     */
    tld?: string;
    /**
     *
     * @type {string}
     * @memberof CountryModel
     */
    _native?: string;
    /**
     *
     * @type {string}
     * @memberof CountryModel
     */
    region?: string;
    /**
     *
     * @type {string}
     * @memberof CountryModel
     */
    subregion?: string;
    /**
     *
     * @type {string}
     * @memberof CountryModel
     */
    timezones?: string;
    /**
     *
     * @type {string}
     * @memberof CountryModel
     */
    translations?: string;
    /**
     *
     * @type {string}
     * @memberof CountryModel
     */
    latitude?: string;
    /**
     *
     * @type {string}
     * @memberof CountryModel
     */
    longitude?: string;
    /**
     *
     * @type {string}
     * @memberof CountryModel
     */
    emoji?: string;
    /**
     *
     * @type {string}
     * @memberof CountryModel
     */
    emojiU?: string;
}

/**
 *
 * @export
 * @interface FamilyMembers
 */
export interface FamilyMembers extends Array<FamilyMembersInner> {
}

/**
 *
 * @export
 * @interface FamilyMembersInner
 */
export interface FamilyMembersInner {
    /**
     *
     * @type {number}
     * @memberof FamilyMembersInner
     */
    role?: number;
    /**
     *
     * @type {string}
     * @memberof FamilyMembersInner
     */
    username?: string;
    /**
     *
     * @type {boolean}
     * @memberof FamilyMembersInner
     */
    isDeleted?: boolean;
    /**
     *
     * @type {number}
     * @memberof FamilyMembersInner
     */
    memberId?: number;
    /**
     *
     * @type {string}
     * @memberof FamilyMembersInner
     */
    avatarurl?: string;
}

/**
 *
 * @export
 * @interface FamilyModel
 */
export interface FamilyModel {
    /**
     * the user's id
     * @type {number}
     * @memberof FamilyModel
     */
    userId?: number;
    /**
     * describes user role in family
     * @type {number}
     * @memberof FamilyModel
     */
    userRole?: number;
    /**
     * the child's id
     * @type {number}
     * @memberof FamilyModel
     */
    childId?: number;
    /**
     * the family's id
     * @type {number}
     * @memberof FamilyModel
     */
    familyId?: number;
}

/**
 *
 * @export
 * @interface InlineResponse600
 */
export interface InlineResponse600 {
    /**
     *
     * @type {Array<number>}
     * @memberof InlineResponse600
     */
    invalidNeedIds?: Array<number>;
}

/**
 *
 * @export
 * @interface InvitationV3
 */
export interface InvitationV3 {
    /**
     *
     * @type {number}
     * @memberof InvitationV3
     */
    role?: number;
    /**
     *
     * @type {number}
     * @memberof InvitationV3
     */
    inviterId?: number;
    /**
     *
     * @type {number}
     * @memberof InvitationV3
     */
    familyId?: number;
    /**
     *
     * @type {string}
     * @memberof InvitationV3
     */
    text?: string;
    /**
     *
     * @type {string}
     * @memberof InvitationV3
     */
    token?: string;
    /**
     *
     * @type {string}
     * @memberof InvitationV3
     */
    link?: string;
    /**
     *
     * @type {string}
     * @memberof InvitationV3
     */
    linkV3?: string;
    /**
     *
     * @type {UserChildModelV3}
     * @memberof InvitationV3
     */
    child?: UserChildModelV3;
}

/**
 *
 * @export
 * @interface NeedModel
 */
export interface NeedModel {
    /**
     * the need's id
     * @type {number}
     * @memberof NeedModel
     */
    id?: number;
    /**
     * the need's name
     * @type {string}
     * @memberof NeedModel
     */
    name?: string;
    /**
     * the need's image path
     * @type {string}
     * @memberof NeedModel
     */
    imageUrl?: string;
    /**
     * the need's category (joy, love, growth, etc)
     * @type {number}
     * @memberof NeedModel
     */
    category?: number;
    /**
     * determines if the need is urgent or not
     * @type {boolean}
     * @memberof NeedModel
     */
    isUrgent?: boolean;
    /**
     * the need's description
     * @type {string}
     * @memberof NeedModel
     */
    description?: string;
    /**
     * the summary of description
     * @type {string}
     * @memberof NeedModel
     */
    descriptionSummary?: string;
    /**
     * the need's cost
     * @type {number}
     * @memberof NeedModel
     */
    cost?: number;
    /**
     * the need's progress percent
     * @type {number}
     * @memberof NeedModel
     */
    progress?: number;
    /**
     * paid amount for the need
     * @type {number}
     * @memberof NeedModel
     */
    paid?: number;
    /**
     * the need's affiliate link
     * @type {string}
     * @memberof NeedModel
     */
    affiliateLinkUrl?: string;
    /**
     * determines if the need is done or not
     * @type {boolean}
     * @memberof NeedModel
     */
    isDone?: boolean;
    /**
     * determines if the need is deleted or not
     * @type {boolean}
     * @memberof NeedModel
     */
    isDeleted?: boolean;
    /**
     * the date that the need has been created
     * @type {string}
     * @memberof NeedModel
     */
    created?: string;
    /**
     * the need's receipts, comma separated
     * @type {string}
     * @memberof NeedModel
     */
    receipts?: string;
    /**
     * determines if the need is confirmed or not
     * @type {boolean}
     * @memberof NeedModel
     */
    isConfirmed?: boolean;
    /**
     * the date that the need has been confirmed
     * @type {string}
     * @memberof NeedModel
     */
    confirmDate?: string;
    /**
     * id of the user who has cnfirmed the need
     * @type {number}
     * @memberof NeedModel
     */
    confirmUser?: number;
    /**
     * the need's type (donate or affiliate)
     * @type {number}
     * @memberof NeedModel
     */
    type?: number;
    /**
     * the last date that the need has been updated
     * @type {string}
     * @memberof NeedModel
     */
    updated?: string;
    /**
     * Details
     * @type {string}
     * @memberof NeedModel
     */
    details?: string;
    /**
     *
     * @type {string}
     * @memberof NeedModel
     */
    informations?: string;
}

/**
 *
 * @export
 * @interface NeedStatusUpdateModel
 */
export interface NeedStatusUpdateModel {
    /**
     *
     * @type {number}
     * @memberof NeedStatusUpdateModel
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof NeedStatusUpdateModel
     */
    needId?: number;
    /**
     *
     * @type {number}
     * @memberof NeedStatusUpdateModel
     */
    swId?: number;
    /**
     *
     * @type {number}
     * @memberof NeedStatusUpdateModel
     */
    newStatus?: number;
    /**
     *
     * @type {number}
     * @memberof NeedStatusUpdateModel
     */
    oldStatus?: number;
    /**
     *
     * @type {string}
     * @memberof NeedStatusUpdateModel
     */
    created?: string;
    /**
     *
     * @type {string}
     * @memberof NeedStatusUpdateModel
     */
    updated?: string;
}

/**
 *
 * @export
 * @interface NgoModel
 */
export interface NgoModel {
    /**
     * the ngo id
     * @type {number}
     * @memberof NgoModel
     */
    id?: number;
    /**
     * the international code of city
     * @type {number}
     * @memberof NgoModel
     */
    cityId?: number;
    /**
     * name of the ngo
     * @type {string}
     * @memberof NgoModel
     */
    name?: string;
    /**
     * website of the ngo
     * @type {string}
     * @memberof NgoModel
     */
    website?: string;
    /**
     * address of the ngo
     * @type {string}
     * @memberof NgoModel
     */
    postalAddress?: string;
    /**
     * email of the ngo
     * @type {string}
     * @memberof NgoModel
     */
    emailAddress?: string;
    /**
     * phone numbers of the ngo, comma separated
     * @type {string}
     * @memberof NgoModel
     */
    phoneNumber?: string;
    /**
     * logo of the ngo as file
     * @type {string}
     * @memberof NgoModel
     */
    logoUrl?: string;
    /**
     * amount of money the ngo has
     * @type {number}
     * @memberof NgoModel
     */
    balance?: number;
    /**
     * count of all the social workers in history of the ngo
     * @type {number}
     * @memberof NgoModel
     */
    socialWorkerCount?: number;
    /**
     * count of all the social workers in the ngo right now
     * @type {number}
     * @memberof NgoModel
     */
    currentSocialWorkerCount?: number;
    /**
     * count of all the social workers in history of the ngo
     * @type {number}
     * @memberof NgoModel
     */
    childrenCount?: number;
    /**
     * count of all the social workers in the ngo right now
     * @type {number}
     * @memberof NgoModel
     */
    currentChildrenCount?: number;
    /**
     * registeration date
     * @type {string}
     * @memberof NgoModel
     */
    registerDate?: string;
    /**
     * last update date
     * @type {string}
     * @memberof NgoModel
     */
    updated?: string;
    /**
     * ngo is active or not
     * @type {boolean}
     * @memberof NgoModel
     */
    isActive?: boolean;
    /**
     * ngo is deleted or not
     * @type {boolean}
     * @memberof NgoModel
     */
    isDeleted?: boolean;
}

/**
 *
 * @export
 * @interface PaymentModel
 */
export interface PaymentModel {
}

/**
 *
 * @export
 * @interface PreneedSummary
 */
export interface PreneedSummary {
}

/**
 *
 * @export
 * @interface PrivilegeModel
 */
export interface PrivilegeModel {
    /**
     * the privilege id
     * @type {number}
     * @memberof PrivilegeModel
     */
    id?: number;
    /**
     * the privilege name
     * @type {string}
     * @memberof PrivilegeModel
     */
    name?: string;
    /**
     * the privilege code
     * @type {number}
     * @memberof PrivilegeModel
     */
    privilege?: number;
}

/**
 *
 * @export
 * @interface PublicNeed
 */
export interface PublicNeed {
    /**
     *
     * @type {number}
     * @memberof PublicNeed
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof PublicNeed
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof PublicNeed
     */
    category?: string;
    /**
     *
     * @type {number}
     * @memberof PublicNeed
     */
    cost?: number;
    /**
     *
     * @type {string}
     * @memberof PublicNeed
     */
    childAvatarUrl?: string;
    /**
     *
     * @type {string}
     * @memberof PublicNeed
     */
    childSayName?: string;
    /**
     *
     * @type {string}
     * @memberof PublicNeed
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof PublicNeed
     */
    image?: string;
    /**
     * 0=service, 1=product
     * @type {number}
     * @memberof PublicNeed
     */
    type?: number;
    /**
     *
     * @type {string}
     * @memberof PublicNeed
     */
    retailerLink?: string;
    /**
     *
     * @type {string}
     * @memberof PublicNeed
     */
    retailerImage?: string;
}

/**
 *
 * @export
 * @interface Register
 */
export interface Register {
    /**
     *
     * @type {number}
     * @memberof Register
     */
    needId?: number;
    /**
     *
     * @type {number}
     * @memberof Register
     */
    amount?: number;
    /**
     *
     * @type {number}
     * @memberof Register
     */
    donate?: number;
    /**
     *
     * @type {boolean}
     * @memberof Register
     */
    useCredit?: boolean;
}

/**
 *
 * @export
 * @interface RevokedToken
 */
export interface RevokedToken {
}

/**
 *
 * @export
 * @interface SearchModel
 */
export interface SearchModel {
    /**
     * Invitation token, use this to get the child
     * @type {string}
     * @memberof SearchModel
     */
    token?: string;
    /**
     * Type of search
     * @type {string}
     * @memberof SearchModel
     */
    type_?: string;
}

/**
 *
 * @export
 * @interface SearchV3
 */
export interface SearchV3 {
    /**
     * Search token
     * @type {string}
     * @memberof SearchV3
     */
    token?: string;
    /**
     * Type of search
     * @type {string}
     * @memberof SearchV3
     */
    type?: string;
    /**
     *
     * @type {UserChildModelV3}
     * @memberof SearchV3
     */
    child?: UserChildModelV3;
}

/**
 *
 * @export
 * @interface SocialWorkerModel
 */
export interface SocialWorkerModel {
    /**
     *
     * @type {number}
     * @memberof SocialWorkerModel
     */
    cityId?: number;
    /**
     *
     * @type {CityModel}
     * @memberof SocialWorkerModel
     */
    city?: CityModel;
    /**
     *
     * @type {string}
     * @memberof SocialWorkerModel
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof SocialWorkerModel
     */
    lastName: string;
    /**
     *
     * @type {string}
     * @memberof SocialWorkerModel
     */
    birthCertificateNumber?: string;
    /**
     *
     * @type {string}
     * @memberof SocialWorkerModel
     */
    passportNumber?: string;
    /**
     *
     * @type {string}
     * @memberof SocialWorkerModel
     */
    postalAddress?: string;
    /**
     *
     * @type {string}
     * @memberof SocialWorkerModel
     */
    bankAccountNumber?: string;
    /**
     *
     * @type {string}
     * @memberof SocialWorkerModel
     */
    bankAccountShebaNumber?: string;
    /**
     *
     * @type {string}
     * @memberof SocialWorkerModel
     */
    bankAccountCardNumber?: string;
    /**
     *
     * @type {string}
     * @memberof SocialWorkerModel
     */
    birthDate?: string;
    /**
     *
     * @type {string}
     * @memberof SocialWorkerModel
     */
    telegramId: string;
    /**
     *
     * @type {string}
     * @memberof SocialWorkerModel
     */
    idNumber: string;
    /**
     *
     * @type {boolean}
     * @memberof SocialWorkerModel
     */
    isCoordinator?: boolean;
    /**
     *
     * @type {number}
     * @memberof SocialWorkerModel
     */
    ngoId: number;
    /**
     *
     * @type {number}
     * @memberof SocialWorkerModel
     */
    typeId: number;
    /**
     *
     * @type {boolean}
     * @memberof SocialWorkerModel
     */
    gender: boolean;
    /**
     *
     * @type {string}
     * @memberof SocialWorkerModel
     */
    phoneNumber: string;
    /**
     *
     * @type {string}
     * @memberof SocialWorkerModel
     */
    emergencyPhoneNumber: string;
    /**
     *
     * @type {string}
     * @memberof SocialWorkerModel
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof SocialWorkerModel
     */
    avatarUrl: string;
    /**
     *
     * @type {string}
     * @memberof SocialWorkerModel
     */
    idCardUrl?: string;
    /**
     *
     * @type {string}
     * @memberof SocialWorkerModel
     */
    passportUrl?: string;
    /**
     *
     * @type {number}
     * @memberof SocialWorkerModel
     */
    id: number;
    /**
     *
     * @type {string}
     * @memberof SocialWorkerModel
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof SocialWorkerModel
     */
    generatedCode: string;
    /**
     *
     * @type {number}
     * @memberof SocialWorkerModel
     */
    childCount: number;
    /**
     *
     * @type {number}
     * @memberof SocialWorkerModel
     */
    currentChildCount: number;
    /**
     *
     * @type {Date}
     * @memberof SocialWorkerModel
     */
    created: Date;
    /**
     *
     * @type {Date}
     * @memberof SocialWorkerModel
     */
    updated: Date;
    /**
     *
     * @type {number}
     * @memberof SocialWorkerModel
     */
    needCount: number;
    /**
     *
     * @type {number}
     * @memberof SocialWorkerModel
     */
    currentNeedCount: number;
    /**
     *
     * @type {Date}
     * @memberof SocialWorkerModel
     */
    lastLoginDate: Date;
    /**
     *
     * @type {boolean}
     * @memberof SocialWorkerModel
     */
    isActive: boolean;
    /**
     *
     * @type {boolean}
     * @memberof SocialWorkerModel
     */
    isDeleted: boolean;
    /**
     *
     * @type {string}
     * @memberof SocialWorkerModel
     */
    locale: string;
    /**
     *
     * @type {string}
     * @memberof SocialWorkerModel
     */
    typeName: string;
    /**
     *
     * @type {string}
     * @memberof SocialWorkerModel
     */
    ngoName: string;
}

/**
 *
 * @export
 * @interface StateModel
 */
export interface StateModel {
    /**
     *
     * @type {number}
     * @memberof StateModel
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof StateModel
     */
    countryId?: number;
    /**
     *
     * @type {string}
     * @memberof StateModel
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof StateModel
     */
    countryCode?: string;
    /**
     *
     * @type {string}
     * @memberof StateModel
     */
    countryName?: string;
    /**
     *
     * @type {string}
     * @memberof StateModel
     */
    stateCode?: string;
    /**
     *
     * @type {string}
     * @memberof StateModel
     */
    latitude?: string;
    /**
     *
     * @type {string}
     * @memberof StateModel
     */
    longitude?: string;
    /**
     *
     * @type {string}
     * @memberof StateModel
     */
    iso2?: string;
    /**
     *
     * @type {string}
     * @memberof StateModel
     */
    fipsCode?: string;
    /**
     *
     * @type {string}
     * @memberof StateModel
     */
    type?: string;
}

/**
 *
 * @export
 * @interface UserChildModelV3
 */
export interface UserChildModelV3 {
    /**
     *
     * @type {string}
     * @memberof UserChildModelV3
     */
    avatarUrl?: string;
    /**
     *
     * @type {string}
     * @memberof UserChildModelV3
     */
    bio?: string;
    /**
     *
     * @type {string}
     * @memberof UserChildModelV3
     */
    biosummary?: string;
    /**
     *
     * @type {string}
     * @memberof UserChildModelV3
     */
    birthdate?: string;
    /**
     *
     * @type {number}
     * @memberof UserChildModelV3
     */
    doneNeedsCount?: number;
    /**
     *
     * @type {number}
     * @memberof UserChildModelV3
     */
    existenceStatus?: number;
    /**
     *
     * @type {number}
     * @memberof UserChildModelV3
     */
    familyId?: number;
    /**
     *
     * @type {string}
     * @memberof UserChildModelV3
     */
    gender?: string;
    /**
     *
     * @type {string}
     * @memberof UserChildModelV3
     */
    generatedcode?: string;
    /**
     *
     * @type {number}
     * @memberof UserChildModelV3
     */
    id?: number;
    /**
     *
     * @type {boolean}
     * @memberof UserChildModelV3
     */
    isGone?: boolean;
    /**
     *
     * @type {string}
     * @memberof UserChildModelV3
     */
    sayname?: string;
    /**
     *
     * @type {number}
     * @memberof UserChildModelV3
     */
    spentCredit?: number;
    /**
     *
     * @type {string}
     * @memberof UserChildModelV3
     */
    voiceurl?: string;
    /**
     *
     * @type {string}
     * @memberof UserChildModelV3
     */
    socialWorkerGeneratedCode?: string;
    /**
     *
     * @type {FamilyMembers}
     * @memberof UserChildModelV3
     */
    childFamilyMembers?: FamilyMembers;
}

/**
 *
 * @export
 * @interface UserModel
 */
export interface UserModel {
    /**
     * the user's id
     * @type {number}
     * @memberof UserModel
     */
    id?: number;
    /**
     * the user's first name
     * @type {string}
     * @memberof UserModel
     */
    firstName?: string;
    /**
     * the user's last name
     * @type {string}
     * @memberof UserModel
     */
    lastName?: string;
    /**
     * the user's username
     * @type {string}
     * @memberof UserModel
     */
    userName?: string;
    /**
     * the user's phone number
     * @type {string}
     * @memberof UserModel
     */
    phoneNumber?: string;
    /**
     * the user's credit amount in integer
     * @type {number}
     * @memberof UserModel
     */
    credit?: number;
    /**
     * the user's international country code
     * @type {number}
     * @memberof UserModel
     */
    country?: number;
    /**
     * the user's international city code
     * @type {number}
     * @memberof UserModel
     */
    city?: number;
    /**
     * the user's avatar image path
     * @type {string}
     * @memberof UserModel
     */
    avatarUrl?: string;
    /**
     * the user's gender, true for male and false for female
     * @type {boolean}
     * @memberof UserModel
     */
    gender?: boolean;
    /**
     * the user's email address in correct format
     * @type {string}
     * @memberof UserModel
     */
    emailAddress?: string;
    /**
     * the user's birth date
     * @type {string}
     * @memberof UserModel
     */
    birthDate?: string;
    /**
     * the user's password, stored as a hashed string
     * @type {string}
     * @memberof UserModel
     */
    password?: string;
    /**
     * the user's total credit spent
     * @type {number}
     * @memberof UserModel
     */
    spentCredit?: number;
    /**
     * the date that the user has been created
     * @type {string}
     * @memberof UserModel
     */
    created?: string;
    /**
     * the last date that the user has been updated
     * @type {string}
     * @memberof UserModel
     */
    updated?: string;
    /**
     * determines if the user is deleted or not
     * @type {boolean}
     * @memberof UserModel
     */
    isDeleted?: boolean;
    /**
     * the last date that the user has logged in
     * @type {string}
     * @memberof UserModel
     */
    lastLogin?: string;
    /**
     * the needs that user has done for their children
     * @type {string}
     * @memberof UserModel
     */
    doneNeedCount?: string;
}


/**
 * AuthAPIApi - fetch parameter creator
 * @export
 */
export const AuthAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Login API
         * @param {string} username
         * @param {string} password
         * @param {number} isInstalled
         * @param {string} lang
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthLoginPost(username: string, password: string, isInstalled: number, lang: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username', 'Required parameter username was null or undefined when calling apiV2AuthLoginPost.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password', 'Required parameter password was null or undefined when calling apiV2AuthLoginPost.');
            }
            // verify required parameter 'isInstalled' is not null or undefined
            if (isInstalled === null || isInstalled === undefined) {
                throw new RequiredError('isInstalled', 'Required parameter isInstalled was null or undefined when calling apiV2AuthLoginPost.');
            }
            // verify required parameter 'lang' is not null or undefined
            if (lang === null || lang === undefined) {
                throw new RequiredError('lang', 'Required parameter lang was null or undefined when calling apiV2AuthLoginPost.');
            }
            const localVarPath = `/api/v2/auth/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (lang !== undefined) {
                localVarQueryParameter['_lang'] = lang;
            }

            if (username !== undefined) {
                localVarFormParams.set('username', username as any);
            }

            if (password !== undefined) {
                localVarFormParams.set('password', password as any);
            }

            if (isInstalled !== undefined) {
                localVarFormParams.set('isInstalled', isInstalled as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Logout (Access Token) API
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthLogoutTokenPost(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2AuthLogoutTokenPost.');
            }
            const localVarPath = `/api/v2/auth/logout/token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Confirm Reset Password API
         * @param {string} token
         * @param {string} password
         * @param {string} confirmPassword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthPasswordResetConfirmTokentokenPost(token: string, password: string, confirmPassword: string, options: any = {}): FetchArgs {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token', 'Required parameter token was null or undefined when calling apiV2AuthPasswordResetConfirmTokentokenPost.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password', 'Required parameter password was null or undefined when calling apiV2AuthPasswordResetConfirmTokentokenPost.');
            }
            // verify required parameter 'confirmPassword' is not null or undefined
            if (confirmPassword === null || confirmPassword === undefined) {
                throw new RequiredError('confirmPassword', 'Required parameter confirmPassword was null or undefined when calling apiV2AuthPasswordResetConfirmTokentokenPost.');
            }
            const localVarPath = `/api/v2/auth/password/reset/confirm/token={token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (password !== undefined) {
                localVarFormParams.set('password', password as any);
            }

            if (confirmPassword !== undefined) {
                localVarFormParams.set('confirm_password', confirmPassword as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Reset Password API by email
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthPasswordResetEmailPost(email: string, options: any = {}): FetchArgs {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email', 'Required parameter email was null or undefined when calling apiV2AuthPasswordResetEmailPost.');
            }
            const localVarPath = `/api/v2/auth/password/reset/email`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (email !== undefined) {
                localVarFormParams.set('email', email as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Reset Password API by sms
         * @param {string} phoneNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthPasswordResetPhonePost(phoneNumber: string, options: any = {}): FetchArgs {
            // verify required parameter 'phoneNumber' is not null or undefined
            if (phoneNumber === null || phoneNumber === undefined) {
                throw new RequiredError('phoneNumber', 'Required parameter phoneNumber was null or undefined when calling apiV2AuthPasswordResetPhonePost.');
            }
            const localVarPath = `/api/v2/auth/password/reset/phone`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (phoneNumber !== undefined) {
                localVarFormParams.set('phoneNumber', phoneNumber as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Register API
         * @param {string} username
         * @param {string} phoneNumber
         * @param {string} username2
         * @param {string} password
         * @param {string} verifyCode
         * @param {number} isInstalled
         * @param {string} lang
         * @param {number} [cityId]
         * @param {string} [email]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthRegisterPost(username: string, phoneNumber: string, username2: string, password: string, verifyCode: string, isInstalled: number, lang: string, cityId?: number, email?: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username', 'Required parameter username was null or undefined when calling apiV2AuthRegisterPost.');
            }
            // verify required parameter 'phoneNumber' is not null or undefined
            if (phoneNumber === null || phoneNumber === undefined) {
                throw new RequiredError('phoneNumber', 'Required parameter phoneNumber was null or undefined when calling apiV2AuthRegisterPost.');
            }
            // verify required parameter 'username2' is not null or undefined
            if (username2 === null || username2 === undefined) {
                throw new RequiredError('username2', 'Required parameter username2 was null or undefined when calling apiV2AuthRegisterPost.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password', 'Required parameter password was null or undefined when calling apiV2AuthRegisterPost.');
            }
            // verify required parameter 'verifyCode' is not null or undefined
            if (verifyCode === null || verifyCode === undefined) {
                throw new RequiredError('verifyCode', 'Required parameter verifyCode was null or undefined when calling apiV2AuthRegisterPost.');
            }
            // verify required parameter 'isInstalled' is not null or undefined
            if (isInstalled === null || isInstalled === undefined) {
                throw new RequiredError('isInstalled', 'Required parameter isInstalled was null or undefined when calling apiV2AuthRegisterPost.');
            }
            // verify required parameter 'lang' is not null or undefined
            if (lang === null || lang === undefined) {
                throw new RequiredError('lang', 'Required parameter lang was null or undefined when calling apiV2AuthRegisterPost.');
            }
            const localVarPath = `/api/v2/auth/register`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (lang !== undefined) {
                localVarQueryParameter['_lang'] = lang;
            }

            if (username !== undefined) {
                localVarFormParams.set('username', username as any);
            }

            if (phoneNumber !== undefined) {
                localVarFormParams.set('phoneNumber', phoneNumber as any);
            }

            if (cityId !== undefined) {
                localVarFormParams.set('cityId', cityId as any);
            }

            if (username2 !== undefined) {
                localVarFormParams.set('username', username2 as any);
            }

            if (email !== undefined) {
                localVarFormParams.set('email', email as any);
            }

            if (password !== undefined) {
                localVarFormParams.set('password', password as any);
            }

            if (verifyCode !== undefined) {
                localVarFormParams.set('verifyCode', verifyCode as any);
            }

            if (isInstalled !== undefined) {
                localVarFormParams.set('isInstalled', isInstalled as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthAPIApi - functional programming interface
 * @export
 */
export const AuthAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Login API
         * @param {string} username
         * @param {string} password
         * @param {number} isInstalled
         * @param {string} lang
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthLoginPost(username: string, password: string, isInstalled: number, lang: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = AuthAPIApiFetchParamCreator(configuration).apiV2AuthLoginPost(username, password, isInstalled, lang, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Logout (Access Token) API
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthLogoutTokenPost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RevokedToken> {
            const localVarFetchArgs = AuthAPIApiFetchParamCreator(configuration).apiV2AuthLogoutTokenPost(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Confirm Reset Password API
         * @param {string} token
         * @param {string} password
         * @param {string} confirmPassword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthPasswordResetConfirmTokentokenPost(token: string, password: string, confirmPassword: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthAPIApiFetchParamCreator(configuration).apiV2AuthPasswordResetConfirmTokentokenPost(token, password, confirmPassword, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Reset Password API by email
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthPasswordResetEmailPost(email: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthAPIApiFetchParamCreator(configuration).apiV2AuthPasswordResetEmailPost(email, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Reset Password API by sms
         * @param {string} phoneNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthPasswordResetPhonePost(phoneNumber: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthAPIApiFetchParamCreator(configuration).apiV2AuthPasswordResetPhonePost(phoneNumber, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Register API
         * @param {string} username
         * @param {string} phoneNumber
         * @param {string} username2
         * @param {string} password
         * @param {string} verifyCode
         * @param {number} isInstalled
         * @param {string} lang
         * @param {number} [cityId]
         * @param {string} [email]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthRegisterPost(username: string, phoneNumber: string, username2: string, password: string, verifyCode: string, isInstalled: number, lang: string, cityId?: number, email?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = AuthAPIApiFetchParamCreator(configuration).apiV2AuthRegisterPost(username, phoneNumber, username2, password, verifyCode, isInstalled, lang, cityId, email, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuthAPIApi - factory interface
 * @export
 */
export const AuthAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @summary Login API
         * @param {string} username
         * @param {string} password
         * @param {number} isInstalled
         * @param {string} lang
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthLoginPost(username: string, password: string, isInstalled: number, lang: string, options?: any) {
            return AuthAPIApiFp(configuration).apiV2AuthLoginPost(username, password, isInstalled, lang, options)(fetch, basePath);
        },
        /**
         *
         * @summary Logout (Access Token) API
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthLogoutTokenPost(authorization: string, options?: any) {
            return AuthAPIApiFp(configuration).apiV2AuthLogoutTokenPost(authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Confirm Reset Password API
         * @param {string} token
         * @param {string} password
         * @param {string} confirmPassword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthPasswordResetConfirmTokentokenPost(token: string, password: string, confirmPassword: string, options?: any) {
            return AuthAPIApiFp(configuration).apiV2AuthPasswordResetConfirmTokentokenPost(token, password, confirmPassword, options)(fetch, basePath);
        },
        /**
         *
         * @summary Reset Password API by email
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthPasswordResetEmailPost(email: string, options?: any) {
            return AuthAPIApiFp(configuration).apiV2AuthPasswordResetEmailPost(email, options)(fetch, basePath);
        },
        /**
         *
         * @summary Reset Password API by sms
         * @param {string} phoneNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthPasswordResetPhonePost(phoneNumber: string, options?: any) {
            return AuthAPIApiFp(configuration).apiV2AuthPasswordResetPhonePost(phoneNumber, options)(fetch, basePath);
        },
        /**
         *
         * @summary Register API
         * @param {string} username
         * @param {string} phoneNumber
         * @param {string} username2
         * @param {string} password
         * @param {string} verifyCode
         * @param {number} isInstalled
         * @param {string} lang
         * @param {number} [cityId]
         * @param {string} [email]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthRegisterPost(username: string, phoneNumber: string, username2: string, password: string, verifyCode: string, isInstalled: number, lang: string, cityId?: number, email?: string, options?: any) {
            return AuthAPIApiFp(configuration).apiV2AuthRegisterPost(username, phoneNumber, username2, password, verifyCode, isInstalled, lang, cityId, email, options)(fetch, basePath);
        },
    };
};

/**
 * AuthAPIApi - object-oriented interface
 * @export
 * @class AuthAPIApi
 * @extends {BaseAPI}
 */
export class AuthAPIApi extends BaseAPI {
    /**
     *
     * @summary Login API
     * @param {string} username
     * @param {string} password
     * @param {number} isInstalled
     * @param {string} lang
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAPIApi
     */
    public apiV2AuthLoginPost(username: string, password: string, isInstalled: number, lang: string, options?: any) {
        return AuthAPIApiFp(this.configuration).apiV2AuthLoginPost(username, password, isInstalled, lang, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Logout (Access Token) API
     * @param {string} authorization Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAPIApi
     */
    public apiV2AuthLogoutTokenPost(authorization: string, options?: any) {
        return AuthAPIApiFp(this.configuration).apiV2AuthLogoutTokenPost(authorization, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Confirm Reset Password API
     * @param {string} token
     * @param {string} password
     * @param {string} confirmPassword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAPIApi
     */
    public apiV2AuthPasswordResetConfirmTokentokenPost(token: string, password: string, confirmPassword: string, options?: any) {
        return AuthAPIApiFp(this.configuration).apiV2AuthPasswordResetConfirmTokentokenPost(token, password, confirmPassword, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Reset Password API by email
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAPIApi
     */
    public apiV2AuthPasswordResetEmailPost(email: string, options?: any) {
        return AuthAPIApiFp(this.configuration).apiV2AuthPasswordResetEmailPost(email, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Reset Password API by sms
     * @param {string} phoneNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAPIApi
     */
    public apiV2AuthPasswordResetPhonePost(phoneNumber: string, options?: any) {
        return AuthAPIApiFp(this.configuration).apiV2AuthPasswordResetPhonePost(phoneNumber, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Register API
     * @param {string} username
     * @param {string} phoneNumber
     * @param {string} username2
     * @param {string} password
     * @param {string} verifyCode
     * @param {number} isInstalled
     * @param {string} lang
     * @param {number} [cityId]
     * @param {string} [email]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthAPIApi
     */
    public apiV2AuthRegisterPost(username: string, phoneNumber: string, username2: string, password: string, verifyCode: string, isInstalled: number, lang: string, cityId?: number, email?: string, options?: any) {
        return AuthAPIApiFp(this.configuration).apiV2AuthRegisterPost(username, phoneNumber, username2, password, verifyCode, isInstalled, lang, cityId, email, options)(this.fetch, this.basePath);
    }

}

/**
 * CartAPIApi - fetch parameter creator
 * @export
 */
export const CartAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get Cart
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2MycartGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2MycartGet.');
            }
            const localVarPath = `/api/v2/mycart`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete a Need from Cart
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2MycartNeedsDelete(authorization: string, needId: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2MycartNeedsDelete.');
            }
            // verify required parameter 'needId' is not null or undefined
            if (needId === null || needId === undefined) {
                throw new RequiredError('needId', 'Required parameter needId was null or undefined when calling apiV2MycartNeedsDelete.');
            }
            const localVarPath = `/api/v2/mycart/needs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (needId !== undefined) {
                localVarFormParams.set('needId', needId as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Add a Need to Cart
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2MycartNeedsPost(authorization: string, needId: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2MycartNeedsPost.');
            }
            // verify required parameter 'needId' is not null or undefined
            if (needId === null || needId === undefined) {
                throw new RequiredError('needId', 'Required parameter needId was null or undefined when calling apiV2MycartNeedsPost.');
            }
            const localVarPath = `/api/v2/mycart/needs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (needId !== undefined) {
                localVarFormParams.set('needId', needId as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Pay for Cart
         * @param {string} authorization Access Token
         * @param {number} [donation]
         * @param {string} [useCredit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2MycartPaymentPost(authorization: string, donation?: number, useCredit?: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2MycartPaymentPost.');
            }
            const localVarPath = `/api/v2/mycart/payment`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (donation !== undefined) {
                localVarFormParams.set('donation', donation as any);
            }

            if (useCredit !== undefined) {
                localVarFormParams.set('useCredit', useCredit as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update Cart
         * @param {string} authorization Access Token
         * @param {Body} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2MycartPut(authorization: string, body: Body, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2MycartPut.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling apiV2MycartPut.');
            }
            const localVarPath = `/api/v2/mycart`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Body" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartAPIApi - functional programming interface
 * @export
 */
export const CartAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get Cart
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2MycartGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Cart> {
            const localVarFetchArgs = CartAPIApiFetchParamCreator(configuration).apiV2MycartGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Delete a Need from Cart
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2MycartNeedsDelete(authorization: string, needId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Cart> {
            const localVarFetchArgs = CartAPIApiFetchParamCreator(configuration).apiV2MycartNeedsDelete(authorization, needId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Add a Need to Cart
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2MycartNeedsPost(authorization: string, needId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Cart> {
            const localVarFetchArgs = CartAPIApiFetchParamCreator(configuration).apiV2MycartNeedsPost(authorization, needId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Pay for Cart
         * @param {string} authorization Access Token
         * @param {number} [donation]
         * @param {string} [useCredit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2MycartPaymentPost(authorization: string, donation?: number, useCredit?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CartPayment> {
            const localVarFetchArgs = CartAPIApiFetchParamCreator(configuration).apiV2MycartPaymentPost(authorization, donation, useCredit, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update Cart
         * @param {string} authorization Access Token
         * @param {Body} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2MycartPut(authorization: string, body: Body, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Cart> {
            const localVarFetchArgs = CartAPIApiFetchParamCreator(configuration).apiV2MycartPut(authorization, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CartAPIApi - factory interface
 * @export
 */
export const CartAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @summary Get Cart
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2MycartGet(authorization: string, options?: any) {
            return CartAPIApiFp(configuration).apiV2MycartGet(authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Delete a Need from Cart
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2MycartNeedsDelete(authorization: string, needId: number, options?: any) {
            return CartAPIApiFp(configuration).apiV2MycartNeedsDelete(authorization, needId, options)(fetch, basePath);
        },
        /**
         *
         * @summary Add a Need to Cart
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2MycartNeedsPost(authorization: string, needId: number, options?: any) {
            return CartAPIApiFp(configuration).apiV2MycartNeedsPost(authorization, needId, options)(fetch, basePath);
        },
        /**
         *
         * @summary Pay for Cart
         * @param {string} authorization Access Token
         * @param {number} [donation]
         * @param {string} [useCredit]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2MycartPaymentPost(authorization: string, donation?: number, useCredit?: string, options?: any) {
            return CartAPIApiFp(configuration).apiV2MycartPaymentPost(authorization, donation, useCredit, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update Cart
         * @param {string} authorization Access Token
         * @param {Body} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2MycartPut(authorization: string, body: Body, options?: any) {
            return CartAPIApiFp(configuration).apiV2MycartPut(authorization, body, options)(fetch, basePath);
        },
    };
};

/**
 * CartAPIApi - object-oriented interface
 * @export
 * @class CartAPIApi
 * @extends {BaseAPI}
 */
export class CartAPIApi extends BaseAPI {
    /**
     *
     * @summary Get Cart
     * @param {string} authorization Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartAPIApi
     */
    public apiV2MycartGet(authorization: string, options?: any) {
        return CartAPIApiFp(this.configuration).apiV2MycartGet(authorization, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Delete a Need from Cart
     * @param {string} authorization Access Token
     * @param {number} needId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartAPIApi
     */
    public apiV2MycartNeedsDelete(authorization: string, needId: number, options?: any) {
        return CartAPIApiFp(this.configuration).apiV2MycartNeedsDelete(authorization, needId, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Add a Need to Cart
     * @param {string} authorization Access Token
     * @param {number} needId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartAPIApi
     */
    public apiV2MycartNeedsPost(authorization: string, needId: number, options?: any) {
        return CartAPIApiFp(this.configuration).apiV2MycartNeedsPost(authorization, needId, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Pay for Cart
     * @param {string} authorization Access Token
     * @param {number} [donation]
     * @param {string} [useCredit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartAPIApi
     */
    public apiV2MycartPaymentPost(authorization: string, donation?: number, useCredit?: string, options?: any) {
        return CartAPIApiFp(this.configuration).apiV2MycartPaymentPost(authorization, donation, useCredit, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Update Cart
     * @param {string} authorization Access Token
     * @param {Body} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CartAPIApi
     */
    public apiV2MycartPut(authorization: string, body: Body, options?: any) {
        return CartAPIApiFp(this.configuration).apiV2MycartPut(authorization, body, options)(this.fetch, this.basePath);
    }

}

/**
 * ChangeCostAPIApi - fetch parameter creator
 * @export
 */
export const ChangeCostAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary List of pending change cost requests
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChangeCostPendingGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2ChangeCostPendingGet.');
            }
            const localVarPath = `/api/v2/change_cost/pending`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List of Change Cost for a specific need
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedNeedIdChangeCostGet(authorization: string, needId: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2NeedNeedIdChangeCostGet.');
            }
            // verify required parameter 'needId' is not null or undefined
            if (needId === null || needId === undefined) {
                throw new RequiredError('needId', 'Required parameter needId was null or undefined when calling apiV2NeedNeedIdChangeCostGet.');
            }
            const localVarPath = `/api/v2/need/{need_id}/change_cost`
                .replace(`{${"need_id"}}`, encodeURIComponent(String(needId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Accept a change cost of a need
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {number} id
         * @param {number} [to] 0 to 2147483647
         * @param {string} [description] max len: 128
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedNeedIdChangeCostIdAcceptPost(authorization: string, needId: number, id: number, to?: number, description?: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2NeedNeedIdChangeCostIdAcceptPost.');
            }
            // verify required parameter 'needId' is not null or undefined
            if (needId === null || needId === undefined) {
                throw new RequiredError('needId', 'Required parameter needId was null or undefined when calling apiV2NeedNeedIdChangeCostIdAcceptPost.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2NeedNeedIdChangeCostIdAcceptPost.');
            }
            const localVarPath = `/api/v2/need/{need_id}/change_cost/{id}/accept`
                .replace(`{${"need_id"}}`, encodeURIComponent(String(needId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (to !== undefined) {
                localVarFormParams.set('to', to as any);
            }

            if (description !== undefined) {
                localVarFormParams.set('description', description as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Reject a change cost of a need
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {number} id
         * @param {string} [rejectCause]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedNeedIdChangeCostIdRejectPost(authorization: string, needId: number, id: number, rejectCause?: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2NeedNeedIdChangeCostIdRejectPost.');
            }
            // verify required parameter 'needId' is not null or undefined
            if (needId === null || needId === undefined) {
                throw new RequiredError('needId', 'Required parameter needId was null or undefined when calling apiV2NeedNeedIdChangeCostIdRejectPost.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2NeedNeedIdChangeCostIdRejectPost.');
            }
            const localVarPath = `/api/v2/need/{need_id}/change_cost/{id}/reject`
                .replace(`{${"need_id"}}`, encodeURIComponent(String(needId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (rejectCause !== undefined) {
                localVarFormParams.set('rejectCause', rejectCause as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Request to change cost of a need
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {number} to 0 to 2147483647
         * @param {string} [description] max len: 128
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedNeedIdChangeCostPut(authorization: string, needId: number, to: number, description?: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2NeedNeedIdChangeCostPut.');
            }
            // verify required parameter 'needId' is not null or undefined
            if (needId === null || needId === undefined) {
                throw new RequiredError('needId', 'Required parameter needId was null or undefined when calling apiV2NeedNeedIdChangeCostPut.');
            }
            // verify required parameter 'to' is not null or undefined
            if (to === null || to === undefined) {
                throw new RequiredError('to', 'Required parameter to was null or undefined when calling apiV2NeedNeedIdChangeCostPut.');
            }
            const localVarPath = `/api/v2/need/{need_id}/change_cost`
                .replace(`{${"need_id"}}`, encodeURIComponent(String(needId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (to !== undefined) {
                localVarFormParams.set('to', to as any);
            }

            if (description !== undefined) {
                localVarFormParams.set('description', description as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChangeCostAPIApi - functional programming interface
 * @export
 */
export const ChangeCostAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary List of pending change cost requests
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChangeCostPendingGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ChangeCost> {
            const localVarFetchArgs = ChangeCostAPIApiFetchParamCreator(configuration).apiV2ChangeCostPendingGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary List of Change Cost for a specific need
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedNeedIdChangeCostGet(authorization: string, needId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ChangeCost> {
            const localVarFetchArgs = ChangeCostAPIApiFetchParamCreator(configuration).apiV2NeedNeedIdChangeCostGet(authorization, needId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Accept a change cost of a need
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {number} id
         * @param {number} [to] 0 to 2147483647
         * @param {string} [description] max len: 128
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedNeedIdChangeCostIdAcceptPost(authorization: string, needId: number, id: number, to?: number, description?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ChangeCost> {
            const localVarFetchArgs = ChangeCostAPIApiFetchParamCreator(configuration).apiV2NeedNeedIdChangeCostIdAcceptPost(authorization, needId, id, to, description, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Reject a change cost of a need
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {number} id
         * @param {string} [rejectCause]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedNeedIdChangeCostIdRejectPost(authorization: string, needId: number, id: number, rejectCause?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ChangeCost> {
            const localVarFetchArgs = ChangeCostAPIApiFetchParamCreator(configuration).apiV2NeedNeedIdChangeCostIdRejectPost(authorization, needId, id, rejectCause, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Request to change cost of a need
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {number} to 0 to 2147483647
         * @param {string} [description] max len: 128
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedNeedIdChangeCostPut(authorization: string, needId: number, to: number, description?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ChangeCost> {
            const localVarFetchArgs = ChangeCostAPIApiFetchParamCreator(configuration).apiV2NeedNeedIdChangeCostPut(authorization, needId, to, description, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ChangeCostAPIApi - factory interface
 * @export
 */
export const ChangeCostAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @summary List of pending change cost requests
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChangeCostPendingGet(authorization: string, options?: any) {
            return ChangeCostAPIApiFp(configuration).apiV2ChangeCostPendingGet(authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary List of Change Cost for a specific need
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedNeedIdChangeCostGet(authorization: string, needId: number, options?: any) {
            return ChangeCostAPIApiFp(configuration).apiV2NeedNeedIdChangeCostGet(authorization, needId, options)(fetch, basePath);
        },
        /**
         *
         * @summary Accept a change cost of a need
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {number} id
         * @param {number} [to] 0 to 2147483647
         * @param {string} [description] max len: 128
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedNeedIdChangeCostIdAcceptPost(authorization: string, needId: number, id: number, to?: number, description?: string, options?: any) {
            return ChangeCostAPIApiFp(configuration).apiV2NeedNeedIdChangeCostIdAcceptPost(authorization, needId, id, to, description, options)(fetch, basePath);
        },
        /**
         *
         * @summary Reject a change cost of a need
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {number} id
         * @param {string} [rejectCause]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedNeedIdChangeCostIdRejectPost(authorization: string, needId: number, id: number, rejectCause?: string, options?: any) {
            return ChangeCostAPIApiFp(configuration).apiV2NeedNeedIdChangeCostIdRejectPost(authorization, needId, id, rejectCause, options)(fetch, basePath);
        },
        /**
         *
         * @summary Request to change cost of a need
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {number} to 0 to 2147483647
         * @param {string} [description] max len: 128
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedNeedIdChangeCostPut(authorization: string, needId: number, to: number, description?: string, options?: any) {
            return ChangeCostAPIApiFp(configuration).apiV2NeedNeedIdChangeCostPut(authorization, needId, to, description, options)(fetch, basePath);
        },
    };
};

/**
 * ChangeCostAPIApi - object-oriented interface
 * @export
 * @class ChangeCostAPIApi
 * @extends {BaseAPI}
 */
export class ChangeCostAPIApi extends BaseAPI {
    /**
     *
     * @summary List of pending change cost requests
     * @param {string} authorization Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeCostAPIApi
     */
    public apiV2ChangeCostPendingGet(authorization: string, options?: any) {
        return ChangeCostAPIApiFp(this.configuration).apiV2ChangeCostPendingGet(authorization, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary List of Change Cost for a specific need
     * @param {string} authorization Access Token
     * @param {number} needId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeCostAPIApi
     */
    public apiV2NeedNeedIdChangeCostGet(authorization: string, needId: number, options?: any) {
        return ChangeCostAPIApiFp(this.configuration).apiV2NeedNeedIdChangeCostGet(authorization, needId, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Accept a change cost of a need
     * @param {string} authorization Access Token
     * @param {number} needId
     * @param {number} id
     * @param {number} [to] 0 to 2147483647
     * @param {string} [description] max len: 128
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeCostAPIApi
     */
    public apiV2NeedNeedIdChangeCostIdAcceptPost(authorization: string, needId: number, id: number, to?: number, description?: string, options?: any) {
        return ChangeCostAPIApiFp(this.configuration).apiV2NeedNeedIdChangeCostIdAcceptPost(authorization, needId, id, to, description, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Reject a change cost of a need
     * @param {string} authorization Access Token
     * @param {number} needId
     * @param {number} id
     * @param {string} [rejectCause]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeCostAPIApi
     */
    public apiV2NeedNeedIdChangeCostIdRejectPost(authorization: string, needId: number, id: number, rejectCause?: string, options?: any) {
        return ChangeCostAPIApiFp(this.configuration).apiV2NeedNeedIdChangeCostIdRejectPost(authorization, needId, id, rejectCause, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Request to change cost of a need
     * @param {string} authorization Access Token
     * @param {number} needId
     * @param {number} to 0 to 2147483647
     * @param {string} [description] max len: 128
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeCostAPIApi
     */
    public apiV2NeedNeedIdChangeCostPut(authorization: string, needId: number, to: number, description?: string, options?: any) {
        return ChangeCostAPIApiFp(this.configuration).apiV2NeedNeedIdChangeCostPut(authorization, needId, to, description, options)(this.fetch, this.basePath);
    }

}

/**
 * CheckAPIApi - fetch parameter creator
 * @export
 */
export const CheckAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Check Email status
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CheckEmailEmailGet(email: string, options: any = {}): FetchArgs {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email', 'Required parameter email was null or undefined when calling apiV2CheckEmailEmailGet.');
            }
            const localVarPath = `/api/v2/check/email/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Check Phone status
         * @param {string} phone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CheckPhonePhoneGet(phone: string, options: any = {}): FetchArgs {
            // verify required parameter 'phone' is not null or undefined
            if (phone === null || phone === undefined) {
                throw new RequiredError('phone', 'Required parameter phone was null or undefined when calling apiV2CheckPhonePhoneGet.');
            }
            const localVarPath = `/api/v2/check/phone/{phone}`
                .replace(`{${"phone"}}`, encodeURIComponent(String(phone)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Check Username status
         * @param {string} username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CheckUsernameUsernameGet(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username', 'Required parameter username was null or undefined when calling apiV2CheckUsernameUsernameGet.');
            }
            const localVarPath = `/api/v2/check/username/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CheckAPIApi - functional programming interface
 * @export
 */
export const CheckAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Check Email status
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CheckEmailEmailGet(email: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CheckAPIApiFetchParamCreator(configuration).apiV2CheckEmailEmailGet(email, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Check Phone status
         * @param {string} phone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CheckPhonePhoneGet(phone: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CheckAPIApiFetchParamCreator(configuration).apiV2CheckPhonePhoneGet(phone, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Check Username status
         * @param {string} username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CheckUsernameUsernameGet(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = CheckAPIApiFetchParamCreator(configuration).apiV2CheckUsernameUsernameGet(username, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * CheckAPIApi - factory interface
 * @export
 */
export const CheckAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @summary Check Email status
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CheckEmailEmailGet(email: string, options?: any) {
            return CheckAPIApiFp(configuration).apiV2CheckEmailEmailGet(email, options)(fetch, basePath);
        },
        /**
         *
         * @summary Check Phone status
         * @param {string} phone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CheckPhonePhoneGet(phone: string, options?: any) {
            return CheckAPIApiFp(configuration).apiV2CheckPhonePhoneGet(phone, options)(fetch, basePath);
        },
        /**
         *
         * @summary Check Username status
         * @param {string} username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CheckUsernameUsernameGet(username: string, options?: any) {
            return CheckAPIApiFp(configuration).apiV2CheckUsernameUsernameGet(username, options)(fetch, basePath);
        },
    };
};

/**
 * CheckAPIApi - object-oriented interface
 * @export
 * @class CheckAPIApi
 * @extends {BaseAPI}
 */
export class CheckAPIApi extends BaseAPI {
    /**
     *
     * @summary Check Email status
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckAPIApi
     */
    public apiV2CheckEmailEmailGet(email: string, options?: any) {
        return CheckAPIApiFp(this.configuration).apiV2CheckEmailEmailGet(email, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Check Phone status
     * @param {string} phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckAPIApi
     */
    public apiV2CheckPhonePhoneGet(phone: string, options?: any) {
        return CheckAPIApiFp(this.configuration).apiV2CheckPhonePhoneGet(phone, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Check Username status
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckAPIApi
     */
    public apiV2CheckUsernameUsernameGet(username: string, options?: any) {
        return CheckAPIApiFp(this.configuration).apiV2CheckUsernameUsernameGet(username, options)(this.fetch, this.basePath);
    }

}

/**
 * ChildAPIApi - fetch parameter creator
 * @export
 */
export const ChildAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get all active children
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildActivesGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2ChildActivesGet.');
            }
            const localVarPath = `/api/v2/child/actives`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new child.<br/>Calling this API affects child and social_worker tables.<br/>Adding firstName, lastName, nationality, birthPlace, address, housingStatus, familyCount, education and status are optional.<br/>For awakeAvatarUrl and voiceUrl you have to upload a file; for avatar in png, jpg or jpeg and for voice in wav, m4a, wma, mp3, aac or ogg format.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities and the same rule is applied for nationality and birthPlace.<br/>Here is a guide for the codes used in this API:<br/>gender: [true]male, [false]female<br/>housingStatus: [0]homeless, [1]rent, [2]has home, [3]with relatives<br/>education: [-1]uneducated, [0]pre-school, [1]1st grade, [2]2nd grade, ...<br/>(no code has been assigned to status yet)<br/>
         * @summary add a child
         * @param {string} authorization Access Token
         * @param {any} awakeAvatarUrl
         * @param {any} sleptAvatarUrl
         * @param {any} voiceUrl
         * @param {string} saynameTranslations {\&quot;en\&quot;: \&quot;Bob\&quot;, \&quot;fa\&quot;: \&quot;بابک\&quot;}
         * @param {string} bioTranslations {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
         * @param {string} bioSummaryTranslations {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
         * @param {string} phoneNumber
         * @param {number} country
         * @param {number} city
         * @param {boolean} gender
         * @param {number} [ngoId]
         * @param {number} [swId]
         * @param {string} [firstNameTranslations]
         * @param {string} [lastNameTranslations]
         * @param {number} [nationality]
         * @param {string} [birthPlace]
         * @param {string} [birthDate]
         * @param {string} [address]
         * @param {number} [housingStatus]
         * @param {number} [familyCount]
         * @param {number} [education]
         * @param {number} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildAddPost(authorization: string, awakeAvatarUrl: any, sleptAvatarUrl: any, voiceUrl: any, saynameTranslations: string, bioTranslations: string, bioSummaryTranslations: string, phoneNumber: string, country: number, city: number, gender: boolean, ngoId?: number, swId?: number, firstNameTranslations?: string, lastNameTranslations?: string, nationality?: number, birthPlace?: string, birthDate?: string, address?: string, housingStatus?: number, familyCount?: number, education?: number, status?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2ChildAddPost.');
            }
            // verify required parameter 'awakeAvatarUrl' is not null or undefined
            if (awakeAvatarUrl === null || awakeAvatarUrl === undefined) {
                throw new RequiredError('awakeAvatarUrl', 'Required parameter awakeAvatarUrl was null or undefined when calling apiV2ChildAddPost.');
            }
            // verify required parameter 'sleptAvatarUrl' is not null or undefined
            if (sleptAvatarUrl === null || sleptAvatarUrl === undefined) {
                throw new RequiredError('sleptAvatarUrl', 'Required parameter sleptAvatarUrl was null or undefined when calling apiV2ChildAddPost.');
            }
            // verify required parameter 'voiceUrl' is not null or undefined
            if (voiceUrl === null || voiceUrl === undefined) {
                throw new RequiredError('voiceUrl', 'Required parameter voiceUrl was null or undefined when calling apiV2ChildAddPost.');
            }
            // verify required parameter 'saynameTranslations' is not null or undefined
            if (saynameTranslations === null || saynameTranslations === undefined) {
                throw new RequiredError('saynameTranslations', 'Required parameter saynameTranslations was null or undefined when calling apiV2ChildAddPost.');
            }
            // verify required parameter 'bioTranslations' is not null or undefined
            if (bioTranslations === null || bioTranslations === undefined) {
                throw new RequiredError('bioTranslations', 'Required parameter bioTranslations was null or undefined when calling apiV2ChildAddPost.');
            }
            // verify required parameter 'bioSummaryTranslations' is not null or undefined
            if (bioSummaryTranslations === null || bioSummaryTranslations === undefined) {
                throw new RequiredError('bioSummaryTranslations', 'Required parameter bioSummaryTranslations was null or undefined when calling apiV2ChildAddPost.');
            }
            // verify required parameter 'phoneNumber' is not null or undefined
            if (phoneNumber === null || phoneNumber === undefined) {
                throw new RequiredError('phoneNumber', 'Required parameter phoneNumber was null or undefined when calling apiV2ChildAddPost.');
            }
            // verify required parameter 'country' is not null or undefined
            if (country === null || country === undefined) {
                throw new RequiredError('country', 'Required parameter country was null or undefined when calling apiV2ChildAddPost.');
            }
            // verify required parameter 'city' is not null or undefined
            if (city === null || city === undefined) {
                throw new RequiredError('city', 'Required parameter city was null or undefined when calling apiV2ChildAddPost.');
            }
            // verify required parameter 'gender' is not null or undefined
            if (gender === null || gender === undefined) {
                throw new RequiredError('gender', 'Required parameter gender was null or undefined when calling apiV2ChildAddPost.');
            }
            const localVarPath = `/api/v2/child/add/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (ngoId !== undefined) {
                localVarFormParams.set('ngo_id', ngoId as any);
            }

            if (swId !== undefined) {
                localVarFormParams.set('sw_id', swId as any);
            }

            if (awakeAvatarUrl !== undefined) {
                localVarFormParams.set('awakeAvatarUrl', awakeAvatarUrl as any);
            }

            if (sleptAvatarUrl !== undefined) {
                localVarFormParams.set('sleptAvatarUrl', sleptAvatarUrl as any);
            }

            if (voiceUrl !== undefined) {
                localVarFormParams.set('voiceUrl', voiceUrl as any);
            }

            if (firstNameTranslations !== undefined) {
                localVarFormParams.set('firstName_translations', firstNameTranslations as any);
            }

            if (lastNameTranslations !== undefined) {
                localVarFormParams.set('lastName_translations', lastNameTranslations as any);
            }

            if (saynameTranslations !== undefined) {
                localVarFormParams.set('sayname_translations', saynameTranslations as any);
            }

            if (bioTranslations !== undefined) {
                localVarFormParams.set('bio_translations', bioTranslations as any);
            }

            if (bioSummaryTranslations !== undefined) {
                localVarFormParams.set('bio_summary_translations', bioSummaryTranslations as any);
            }

            if (phoneNumber !== undefined) {
                localVarFormParams.set('phoneNumber', phoneNumber as any);
            }

            if (nationality !== undefined) {
                localVarFormParams.set('nationality', nationality as any);
            }

            if (country !== undefined) {
                localVarFormParams.set('country', country as any);
            }

            if (city !== undefined) {
                localVarFormParams.set('city', city as any);
            }

            if (gender !== undefined) {
                localVarFormParams.set('gender', gender as any);
            }

            if (birthPlace !== undefined) {
                localVarFormParams.set('birthPlace', birthPlace as any);
            }

            if (birthDate !== undefined) {
                localVarFormParams.set('birthDate', birthDate as any);
            }

            if (address !== undefined) {
                localVarFormParams.set('address', address as any);
            }

            if (housingStatus !== undefined) {
                localVarFormParams.set('housingStatus', housingStatus as any);
            }

            if (familyCount !== undefined) {
                localVarFormParams.set('familyCount', familyCount as any);
            }

            if (education !== undefined) {
                localVarFormParams.set('education', education as any);
            }

            if (status !== undefined) {
                localVarFormParams.set('status', status as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information of all children as a json object.<br/>Json key is child id and json value is children data.<br/>Calling this API affects on child, need, child_need, need_family and user tables.<br/>It contains children info, their needs and participants of those needs. Confirm tag determines the type of output:<br/>[0]for not confirmed children only, [1]for confirmed children only, [2]for both confirmed and not confirmed children<br/>
         * @summary get all children
         * @param {string} authorization Access Token
         * @param {number} confirm
         * @param {any} [ngoId]
         * @param {any} [swId]
         * @param {any} [take]
         * @param {any} [skip]
         * @param {any} [existenceStatus]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildAllConfirmconfirmGet(authorization: string, confirm: number, ngoId?: any, swId?: any, take?: any, skip?: any, existenceStatus?: any, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2ChildAllConfirmconfirmGet.');
            }
            // verify required parameter 'confirm' is not null or undefined
            if (confirm === null || confirm === undefined) {
                throw new RequiredError('confirm', 'Required parameter confirm was null or undefined when calling apiV2ChildAllConfirmconfirmGet.');
            }
            const localVarPath = `/api/v2/child/all/confirm={confirm}`
                .replace(`{${"confirm"}}`, encodeURIComponent(String(confirm)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ngoId !== undefined) {
                localVarQueryParameter['ngo_id'] = ngoId;
            }

            if (swId !== undefined) {
                localVarQueryParameter['sw_id'] = swId;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (existenceStatus !== undefined) {
                localVarQueryParameter['existence_status'] = existenceStatus;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary get child needs summary
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildChildIdNeedsSummaryGet(authorization: string, childId: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2ChildChildIdNeedsSummaryGet.');
            }
            // verify required parameter 'childId' is not null or undefined
            if (childId === null || childId === undefined) {
                throw new RequiredError('childId', 'Required parameter childId was null or undefined when calling apiV2ChildChildIdNeedsSummaryGet.');
            }
            const localVarPath = `/api/v2/child/{child_id}/needs/summary`
                .replace(`{${"child_id"}}`, encodeURIComponent(String(childId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary get child needs
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildChildIdchildIdNeedsGet(authorization: string, childId: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2ChildChildIdchildIdNeedsGet.');
            }
            // verify required parameter 'childId' is not null or undefined
            if (childId === null || childId === undefined) {
                throw new RequiredError('childId', 'Required parameter childId was null or undefined when calling apiV2ChildChildIdchildIdNeedsGet.');
            }
            const localVarPath = `/api/v2/child/childId={child_id}/needs`
                .replace(`{${"child_id"}}`, encodeURIComponent(String(childId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information of a child with given id as a json object.<br/>Calling this API affects on child, need, child_need and need_family and user tables.<br/>It contains child info, its needs and participants of those needs.<br/>Confirm parameter determines how do you want the result:<br/>[0]not onfirmed, [1] confirmed, [2]both<br/>
         * @summary get child by id
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {number} confirm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildChildIdchildIdconfirmconfirmGet(authorization: string, childId: number, confirm: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2ChildChildIdchildIdconfirmconfirmGet.');
            }
            // verify required parameter 'childId' is not null or undefined
            if (childId === null || childId === undefined) {
                throw new RequiredError('childId', 'Required parameter childId was null or undefined when calling apiV2ChildChildIdchildIdconfirmconfirmGet.');
            }
            // verify required parameter 'confirm' is not null or undefined
            if (confirm === null || confirm === undefined) {
                throw new RequiredError('confirm', 'Required parameter confirm was null or undefined when calling apiV2ChildChildIdchildIdconfirmconfirmGet.');
            }
            const localVarPath = `/api/v2/child/childId={child_id}&confirm={confirm}`
                .replace(`{${"child_id"}}`, encodeURIComponent(String(childId)))
                .replace(`{${"confirm"}}`, encodeURIComponent(String(confirm)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirms a child, so you cannot delete it anymore but you can add needs to it.<br/>Calling this API affect child, ngo, social_worker, child_need and family tables.<br/>
         * @summary confirm a child
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildConfirmChildIdchildIdPatch(authorization: string, childId: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2ChildConfirmChildIdchildIdPatch.');
            }
            // verify required parameter 'childId' is not null or undefined
            if (childId === null || childId === undefined) {
                throw new RequiredError('childId', 'Required parameter childId was null or undefined when calling apiV2ChildConfirmChildIdchildIdPatch.');
            }
            const localVarPath = `/api/v2/child/confirm/childId={child_id}`
                .replace(`{${"child_id"}}`, encodeURIComponent(String(childId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API deletes a specific child. Only not confirmed children can be deleted.<br/>Calling this API affects family table by updating a row and set isDeleted tag true, social_worker and ngo table by decreasing their currentChildrenCount field by 1 and child by setting isDeleted tag true for some rows.<br/>We do not fully delete any rows.<br/>
         * @summary delete a child
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildDeleteChildIdchildIdPatch(authorization: string, childId: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2ChildDeleteChildIdchildIdPatch.');
            }
            // verify required parameter 'childId' is not null or undefined
            if (childId === null || childId === undefined) {
                throw new RequiredError('childId', 'Required parameter childId was null or undefined when calling apiV2ChildDeleteChildIdchildIdPatch.');
            }
            const localVarPath = `/api/v2/child/delete/childId={child_id}`
                .replace(`{${"child_id"}}`, encodeURIComponent(String(childId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary get child by invitation token
         * @param {string} token
         * @param {string} [authorization] Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildInvitationsTokenGet(token: string, authorization?: string, options: any = {}): FetchArgs {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token', 'Required parameter token was null or undefined when calling apiV2ChildInvitationsTokenGet.');
            }
            const localVarPath = `/api/v2/child/invitations/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API migrates a child.<br/>It means that from the moment after migration, another social worker will cover the child's need.<br/>The records of child will migrate too, so nothing is going to be missed or deleted.<br/>Calling this API affects on child, social_worker, ngo, child_need, need and family tables.<br/>It inserts a new record int child table for the migrated child and deactives the previous child's record.<br/>
         * @summary migrate a child
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {number} newSwId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildMigrateChildIdchildIdPatch(authorization: string, childId: number, newSwId: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2ChildMigrateChildIdchildIdPatch.');
            }
            // verify required parameter 'childId' is not null or undefined
            if (childId === null || childId === undefined) {
                throw new RequiredError('childId', 'Required parameter childId was null or undefined when calling apiV2ChildMigrateChildIdchildIdPatch.');
            }
            // verify required parameter 'newSwId' is not null or undefined
            if (newSwId === null || newSwId === undefined) {
                throw new RequiredError('newSwId', 'Required parameter newSwId was null or undefined when calling apiV2ChildMigrateChildIdchildIdPatch.');
            }
            const localVarPath = `/api/v2/child/migrate/childId={child_id}`
                .replace(`{${"child_id"}}`, encodeURIComponent(String(childId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (newSwId !== undefined) {
                localVarFormParams.set('new_sw_id', newSwId as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * All the fields are optional. You can fill every field you want to change, and it will update the desired child.<br/>Calling this API only affects child table by updating a row.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>The same rule applied for nationality and birthPlace.<br/>For voiceUrl and awakeAvatarUrl you have to upload a file; for avatar in png, jpg or jpeg and for voice in wav, m4a, wma, mp3, aac or ogg format.<br/>Social workers can change their NGO by editing ngoId field.<br/>
         * @summary update a child
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {any} [awakeAvatarUrl]
         * @param {any} [sleptAvatarUrl]
         * @param {any} [voiceUrl]
         * @param {string} [firstNameTranslations]
         * @param {string} [saynameTranslations] {\&quot;en\&quot;: \&quot;Bob\&quot;, \&quot;fa\&quot;: \&quot;بابک\&quot;}
         * @param {string} [bioTranslations] {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
         * @param {string} [bioSummaryTranslations] {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
         * @param {string} [lastNameTranslations]
         * @param {string} [sayName]
         * @param {string} [phoneNumber]
         * @param {number} [nationality]
         * @param {number} [country]
         * @param {number} [city]
         * @param {boolean} [gender]
         * @param {string} [birthPlace]
         * @param {string} [birthDate]
         * @param {string} [address]
         * @param {number} [housingStatus]
         * @param {number} [familyCount]
         * @param {number} [education]
         * @param {number} [status]
         * @param {number} [existenceStatus] 0 dead :( | 1 alive and present | 2 alive but gone | 3 Temporarry gone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildUpdateChildIdchildIdPatch(authorization: string, childId: number, awakeAvatarUrl?: any, sleptAvatarUrl?: any, voiceUrl?: any, firstNameTranslations?: string, saynameTranslations?: string, bioTranslations?: string, bioSummaryTranslations?: string, lastNameTranslations?: string, sayName?: string, phoneNumber?: string, nationality?: number, country?: number, city?: number, gender?: boolean, birthPlace?: string, birthDate?: string, address?: string, housingStatus?: number, familyCount?: number, education?: number, status?: number, existenceStatus?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2ChildUpdateChildIdchildIdPatch.');
            }
            // verify required parameter 'childId' is not null or undefined
            if (childId === null || childId === undefined) {
                throw new RequiredError('childId', 'Required parameter childId was null or undefined when calling apiV2ChildUpdateChildIdchildIdPatch.');
            }
            const localVarPath = `/api/v2/child/update/childId={child_id}`
                .replace(`{${"child_id"}}`, encodeURIComponent(String(childId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (awakeAvatarUrl !== undefined) {
                localVarFormParams.set('awakeAvatarUrl', awakeAvatarUrl as any);
            }

            if (sleptAvatarUrl !== undefined) {
                localVarFormParams.set('sleptAvatarUrl', sleptAvatarUrl as any);
            }

            if (voiceUrl !== undefined) {
                localVarFormParams.set('voiceUrl', voiceUrl as any);
            }

            if (firstNameTranslations !== undefined) {
                localVarFormParams.set('firstName_translations', firstNameTranslations as any);
            }

            if (saynameTranslations !== undefined) {
                localVarFormParams.set('sayname_translations', saynameTranslations as any);
            }

            if (bioTranslations !== undefined) {
                localVarFormParams.set('bio_translations', bioTranslations as any);
            }

            if (bioSummaryTranslations !== undefined) {
                localVarFormParams.set('bio_summary_translations', bioSummaryTranslations as any);
            }

            if (lastNameTranslations !== undefined) {
                localVarFormParams.set('lastName_translations', lastNameTranslations as any);
            }

            if (sayName !== undefined) {
                localVarFormParams.set('sayName', sayName as any);
            }

            if (phoneNumber !== undefined) {
                localVarFormParams.set('phoneNumber', phoneNumber as any);
            }

            if (nationality !== undefined) {
                localVarFormParams.set('nationality', nationality as any);
            }

            if (country !== undefined) {
                localVarFormParams.set('country', country as any);
            }

            if (city !== undefined) {
                localVarFormParams.set('city', city as any);
            }

            if (gender !== undefined) {
                localVarFormParams.set('gender', gender as any);
            }

            if (birthPlace !== undefined) {
                localVarFormParams.set('birthPlace', birthPlace as any);
            }

            if (birthDate !== undefined) {
                localVarFormParams.set('birthDate', birthDate as any);
            }

            if (address !== undefined) {
                localVarFormParams.set('address', address as any);
            }

            if (housingStatus !== undefined) {
                localVarFormParams.set('housingStatus', housingStatus as any);
            }

            if (familyCount !== undefined) {
                localVarFormParams.set('familyCount', familyCount as any);
            }

            if (education !== undefined) {
                localVarFormParams.set('education', education as any);
            }

            if (status !== undefined) {
                localVarFormParams.set('status', status as any);
            }

            if (existenceStatus !== undefined) {
                localVarFormParams.set('existence_status', existenceStatus as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChildAPIApi - functional programming interface
 * @export
 */
export const ChildAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get all active children
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildActivesGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = ChildAPIApiFetchParamCreator(configuration).apiV2ChildActivesGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Adds a new child.<br/>Calling this API affects child and social_worker tables.<br/>Adding firstName, lastName, nationality, birthPlace, address, housingStatus, familyCount, education and status are optional.<br/>For awakeAvatarUrl and voiceUrl you have to upload a file; for avatar in png, jpg or jpeg and for voice in wav, m4a, wma, mp3, aac or ogg format.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities and the same rule is applied for nationality and birthPlace.<br/>Here is a guide for the codes used in this API:<br/>gender: [true]male, [false]female<br/>housingStatus: [0]homeless, [1]rent, [2]has home, [3]with relatives<br/>education: [-1]uneducated, [0]pre-school, [1]1st grade, [2]2nd grade, ...<br/>(no code has been assigned to status yet)<br/>
         * @summary add a child
         * @param {string} authorization Access Token
         * @param {any} awakeAvatarUrl
         * @param {any} sleptAvatarUrl
         * @param {any} voiceUrl
         * @param {string} saynameTranslations {\&quot;en\&quot;: \&quot;Bob\&quot;, \&quot;fa\&quot;: \&quot;بابک\&quot;}
         * @param {string} bioTranslations {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
         * @param {string} bioSummaryTranslations {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
         * @param {string} phoneNumber
         * @param {number} country
         * @param {number} city
         * @param {boolean} gender
         * @param {number} [ngoId]
         * @param {number} [swId]
         * @param {string} [firstNameTranslations]
         * @param {string} [lastNameTranslations]
         * @param {number} [nationality]
         * @param {string} [birthPlace]
         * @param {string} [birthDate]
         * @param {string} [address]
         * @param {number} [housingStatus]
         * @param {number} [familyCount]
         * @param {number} [education]
         * @param {number} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildAddPost(authorization: string, awakeAvatarUrl: any, sleptAvatarUrl: any, voiceUrl: any, saynameTranslations: string, bioTranslations: string, bioSummaryTranslations: string, phoneNumber: string, country: number, city: number, gender: boolean, ngoId?: number, swId?: number, firstNameTranslations?: string, lastNameTranslations?: string, nationality?: number, birthPlace?: string, birthDate?: string, address?: string, housingStatus?: number, familyCount?: number, education?: number, status?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ChildAPIApiFetchParamCreator(configuration).apiV2ChildAddPost(authorization, awakeAvatarUrl, sleptAvatarUrl, voiceUrl, saynameTranslations, bioTranslations, bioSummaryTranslations, phoneNumber, country, city, gender, ngoId, swId, firstNameTranslations, lastNameTranslations, nationality, birthPlace, birthDate, address, housingStatus, familyCount, education, status, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns information of all children as a json object.<br/>Json key is child id and json value is children data.<br/>Calling this API affects on child, need, child_need, need_family and user tables.<br/>It contains children info, their needs and participants of those needs. Confirm tag determines the type of output:<br/>[0]for not confirmed children only, [1]for confirmed children only, [2]for both confirmed and not confirmed children<br/>
         * @summary get all children
         * @param {string} authorization Access Token
         * @param {number} confirm
         * @param {any} [ngoId]
         * @param {any} [swId]
         * @param {any} [take]
         * @param {any} [skip]
         * @param {any} [existenceStatus]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildAllConfirmconfirmGet(authorization: string, confirm: number, ngoId?: any, swId?: any, take?: any, skip?: any, existenceStatus?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = ChildAPIApiFetchParamCreator(configuration).apiV2ChildAllConfirmconfirmGet(authorization, confirm, ngoId, swId, take, skip, existenceStatus, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary get child needs summary
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildChildIdNeedsSummaryGet(authorization: string, childId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NeedModel> {
            const localVarFetchArgs = ChildAPIApiFetchParamCreator(configuration).apiV2ChildChildIdNeedsSummaryGet(authorization, childId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary get child needs
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildChildIdchildIdNeedsGet(authorization: string, childId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NeedModel> {
            const localVarFetchArgs = ChildAPIApiFetchParamCreator(configuration).apiV2ChildChildIdchildIdNeedsGet(authorization, childId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns information of a child with given id as a json object.<br/>Calling this API affects on child, need, child_need and need_family and user tables.<br/>It contains child info, its needs and participants of those needs.<br/>Confirm parameter determines how do you want the result:<br/>[0]not onfirmed, [1] confirmed, [2]both<br/>
         * @summary get child by id
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {number} confirm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildChildIdchildIdconfirmconfirmGet(authorization: string, childId: number, confirm: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ChildModel> {
            const localVarFetchArgs = ChildAPIApiFetchParamCreator(configuration).apiV2ChildChildIdchildIdconfirmconfirmGet(authorization, childId, confirm, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Confirms a child, so you cannot delete it anymore but you can add needs to it.<br/>Calling this API affect child, ngo, social_worker, child_need and family tables.<br/>
         * @summary confirm a child
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildConfirmChildIdchildIdPatch(authorization: string, childId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ChildModel> {
            const localVarFetchArgs = ChildAPIApiFetchParamCreator(configuration).apiV2ChildConfirmChildIdchildIdPatch(authorization, childId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This API deletes a specific child. Only not confirmed children can be deleted.<br/>Calling this API affects family table by updating a row and set isDeleted tag true, social_worker and ngo table by decreasing their currentChildrenCount field by 1 and child by setting isDeleted tag true for some rows.<br/>We do not fully delete any rows.<br/>
         * @summary delete a child
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildDeleteChildIdchildIdPatch(authorization: string, childId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ChildAPIApiFetchParamCreator(configuration).apiV2ChildDeleteChildIdchildIdPatch(authorization, childId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary get child by invitation token
         * @param {string} token
         * @param {string} [authorization] Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildInvitationsTokenGet(token: string, authorization?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ChildModel> {
            const localVarFetchArgs = ChildAPIApiFetchParamCreator(configuration).apiV2ChildInvitationsTokenGet(token, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This API migrates a child.<br/>It means that from the moment after migration, another social worker will cover the child's need.<br/>The records of child will migrate too, so nothing is going to be missed or deleted.<br/>Calling this API affects on child, social_worker, ngo, child_need, need and family tables.<br/>It inserts a new record int child table for the migrated child and deactives the previous child's record.<br/>
         * @summary migrate a child
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {number} newSwId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildMigrateChildIdchildIdPatch(authorization: string, childId: number, newSwId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ChildModel> {
            const localVarFetchArgs = ChildAPIApiFetchParamCreator(configuration).apiV2ChildMigrateChildIdchildIdPatch(authorization, childId, newSwId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * All the fields are optional. You can fill every field you want to change, and it will update the desired child.<br/>Calling this API only affects child table by updating a row.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>The same rule applied for nationality and birthPlace.<br/>For voiceUrl and awakeAvatarUrl you have to upload a file; for avatar in png, jpg or jpeg and for voice in wav, m4a, wma, mp3, aac or ogg format.<br/>Social workers can change their NGO by editing ngoId field.<br/>
         * @summary update a child
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {any} [awakeAvatarUrl]
         * @param {any} [sleptAvatarUrl]
         * @param {any} [voiceUrl]
         * @param {string} [firstNameTranslations]
         * @param {string} [saynameTranslations] {\&quot;en\&quot;: \&quot;Bob\&quot;, \&quot;fa\&quot;: \&quot;بابک\&quot;}
         * @param {string} [bioTranslations] {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
         * @param {string} [bioSummaryTranslations] {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
         * @param {string} [lastNameTranslations]
         * @param {string} [sayName]
         * @param {string} [phoneNumber]
         * @param {number} [nationality]
         * @param {number} [country]
         * @param {number} [city]
         * @param {boolean} [gender]
         * @param {string} [birthPlace]
         * @param {string} [birthDate]
         * @param {string} [address]
         * @param {number} [housingStatus]
         * @param {number} [familyCount]
         * @param {number} [education]
         * @param {number} [status]
         * @param {number} [existenceStatus] 0 dead :( | 1 alive and present | 2 alive but gone | 3 Temporarry gone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildUpdateChildIdchildIdPatch(authorization: string, childId: number, awakeAvatarUrl?: any, sleptAvatarUrl?: any, voiceUrl?: any, firstNameTranslations?: string, saynameTranslations?: string, bioTranslations?: string, bioSummaryTranslations?: string, lastNameTranslations?: string, sayName?: string, phoneNumber?: string, nationality?: number, country?: number, city?: number, gender?: boolean, birthPlace?: string, birthDate?: string, address?: string, housingStatus?: number, familyCount?: number, education?: number, status?: number, existenceStatus?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ChildModel> {
            const localVarFetchArgs = ChildAPIApiFetchParamCreator(configuration).apiV2ChildUpdateChildIdchildIdPatch(authorization, childId, awakeAvatarUrl, sleptAvatarUrl, voiceUrl, firstNameTranslations, saynameTranslations, bioTranslations, bioSummaryTranslations, lastNameTranslations, sayName, phoneNumber, nationality, country, city, gender, birthPlace, birthDate, address, housingStatus, familyCount, education, status, existenceStatus, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ChildAPIApi - factory interface
 * @export
 */
export const ChildAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @summary Get all active children
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildActivesGet(authorization: string, options?: any) {
            return ChildAPIApiFp(configuration).apiV2ChildActivesGet(authorization, options)(fetch, basePath);
        },
        /**
         * Adds a new child.<br/>Calling this API affects child and social_worker tables.<br/>Adding firstName, lastName, nationality, birthPlace, address, housingStatus, familyCount, education and status are optional.<br/>For awakeAvatarUrl and voiceUrl you have to upload a file; for avatar in png, jpg or jpeg and for voice in wav, m4a, wma, mp3, aac or ogg format.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities and the same rule is applied for nationality and birthPlace.<br/>Here is a guide for the codes used in this API:<br/>gender: [true]male, [false]female<br/>housingStatus: [0]homeless, [1]rent, [2]has home, [3]with relatives<br/>education: [-1]uneducated, [0]pre-school, [1]1st grade, [2]2nd grade, ...<br/>(no code has been assigned to status yet)<br/>
         * @summary add a child
         * @param {string} authorization Access Token
         * @param {any} awakeAvatarUrl
         * @param {any} sleptAvatarUrl
         * @param {any} voiceUrl
         * @param {string} saynameTranslations {\&quot;en\&quot;: \&quot;Bob\&quot;, \&quot;fa\&quot;: \&quot;بابک\&quot;}
         * @param {string} bioTranslations {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
         * @param {string} bioSummaryTranslations {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
         * @param {string} phoneNumber
         * @param {number} country
         * @param {number} city
         * @param {boolean} gender
         * @param {number} [ngoId]
         * @param {number} [swId]
         * @param {string} [firstNameTranslations]
         * @param {string} [lastNameTranslations]
         * @param {number} [nationality]
         * @param {string} [birthPlace]
         * @param {string} [birthDate]
         * @param {string} [address]
         * @param {number} [housingStatus]
         * @param {number} [familyCount]
         * @param {number} [education]
         * @param {number} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildAddPost(authorization: string, awakeAvatarUrl: any, sleptAvatarUrl: any, voiceUrl: any, saynameTranslations: string, bioTranslations: string, bioSummaryTranslations: string, phoneNumber: string, country: number, city: number, gender: boolean, ngoId?: number, swId?: number, firstNameTranslations?: string, lastNameTranslations?: string, nationality?: number, birthPlace?: string, birthDate?: string, address?: string, housingStatus?: number, familyCount?: number, education?: number, status?: number, options?: any) {
            return ChildAPIApiFp(configuration).apiV2ChildAddPost(authorization, awakeAvatarUrl, sleptAvatarUrl, voiceUrl, saynameTranslations, bioTranslations, bioSummaryTranslations, phoneNumber, country, city, gender, ngoId, swId, firstNameTranslations, lastNameTranslations, nationality, birthPlace, birthDate, address, housingStatus, familyCount, education, status, options)(fetch, basePath);
        },
        /**
         * Returns information of all children as a json object.<br/>Json key is child id and json value is children data.<br/>Calling this API affects on child, need, child_need, need_family and user tables.<br/>It contains children info, their needs and participants of those needs. Confirm tag determines the type of output:<br/>[0]for not confirmed children only, [1]for confirmed children only, [2]for both confirmed and not confirmed children<br/>
         * @summary get all children
         * @param {string} authorization Access Token
         * @param {number} confirm
         * @param {any} [ngoId]
         * @param {any} [swId]
         * @param {any} [take]
         * @param {any} [skip]
         * @param {any} [existenceStatus]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildAllConfirmconfirmGet(authorization: string, confirm: number, ngoId?: any, swId?: any, take?: any, skip?: any, existenceStatus?: any, options?: any) {
            return ChildAPIApiFp(configuration).apiV2ChildAllConfirmconfirmGet(authorization, confirm, ngoId, swId, take, skip, existenceStatus, options)(fetch, basePath);
        },
        /**
         *
         * @summary get child needs summary
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildChildIdNeedsSummaryGet(authorization: string, childId: number, options?: any) {
            return ChildAPIApiFp(configuration).apiV2ChildChildIdNeedsSummaryGet(authorization, childId, options)(fetch, basePath);
        },
        /**
         *
         * @summary get child needs
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildChildIdchildIdNeedsGet(authorization: string, childId: number, options?: any) {
            return ChildAPIApiFp(configuration).apiV2ChildChildIdchildIdNeedsGet(authorization, childId, options)(fetch, basePath);
        },
        /**
         * Returns information of a child with given id as a json object.<br/>Calling this API affects on child, need, child_need and need_family and user tables.<br/>It contains child info, its needs and participants of those needs.<br/>Confirm parameter determines how do you want the result:<br/>[0]not onfirmed, [1] confirmed, [2]both<br/>
         * @summary get child by id
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {number} confirm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildChildIdchildIdconfirmconfirmGet(authorization: string, childId: number, confirm: number, options?: any) {
            return ChildAPIApiFp(configuration).apiV2ChildChildIdchildIdconfirmconfirmGet(authorization, childId, confirm, options)(fetch, basePath);
        },
        /**
         * Confirms a child, so you cannot delete it anymore but you can add needs to it.<br/>Calling this API affect child, ngo, social_worker, child_need and family tables.<br/>
         * @summary confirm a child
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildConfirmChildIdchildIdPatch(authorization: string, childId: number, options?: any) {
            return ChildAPIApiFp(configuration).apiV2ChildConfirmChildIdchildIdPatch(authorization, childId, options)(fetch, basePath);
        },
        /**
         * This API deletes a specific child. Only not confirmed children can be deleted.<br/>Calling this API affects family table by updating a row and set isDeleted tag true, social_worker and ngo table by decreasing their currentChildrenCount field by 1 and child by setting isDeleted tag true for some rows.<br/>We do not fully delete any rows.<br/>
         * @summary delete a child
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildDeleteChildIdchildIdPatch(authorization: string, childId: number, options?: any) {
            return ChildAPIApiFp(configuration).apiV2ChildDeleteChildIdchildIdPatch(authorization, childId, options)(fetch, basePath);
        },
        /**
         *
         * @summary get child by invitation token
         * @param {string} token
         * @param {string} [authorization] Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildInvitationsTokenGet(token: string, authorization?: string, options?: any) {
            return ChildAPIApiFp(configuration).apiV2ChildInvitationsTokenGet(token, authorization, options)(fetch, basePath);
        },
        /**
         * This API migrates a child.<br/>It means that from the moment after migration, another social worker will cover the child's need.<br/>The records of child will migrate too, so nothing is going to be missed or deleted.<br/>Calling this API affects on child, social_worker, ngo, child_need, need and family tables.<br/>It inserts a new record int child table for the migrated child and deactives the previous child's record.<br/>
         * @summary migrate a child
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {number} newSwId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildMigrateChildIdchildIdPatch(authorization: string, childId: number, newSwId: number, options?: any) {
            return ChildAPIApiFp(configuration).apiV2ChildMigrateChildIdchildIdPatch(authorization, childId, newSwId, options)(fetch, basePath);
        },
        /**
         * All the fields are optional. You can fill every field you want to change, and it will update the desired child.<br/>Calling this API only affects child table by updating a row.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>The same rule applied for nationality and birthPlace.<br/>For voiceUrl and awakeAvatarUrl you have to upload a file; for avatar in png, jpg or jpeg and for voice in wav, m4a, wma, mp3, aac or ogg format.<br/>Social workers can change their NGO by editing ngoId field.<br/>
         * @summary update a child
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {any} [awakeAvatarUrl]
         * @param {any} [sleptAvatarUrl]
         * @param {any} [voiceUrl]
         * @param {string} [firstNameTranslations]
         * @param {string} [saynameTranslations] {\&quot;en\&quot;: \&quot;Bob\&quot;, \&quot;fa\&quot;: \&quot;بابک\&quot;}
         * @param {string} [bioTranslations] {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
         * @param {string} [bioSummaryTranslations] {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
         * @param {string} [lastNameTranslations]
         * @param {string} [sayName]
         * @param {string} [phoneNumber]
         * @param {number} [nationality]
         * @param {number} [country]
         * @param {number} [city]
         * @param {boolean} [gender]
         * @param {string} [birthPlace]
         * @param {string} [birthDate]
         * @param {string} [address]
         * @param {number} [housingStatus]
         * @param {number} [familyCount]
         * @param {number} [education]
         * @param {number} [status]
         * @param {number} [existenceStatus] 0 dead :( | 1 alive and present | 2 alive but gone | 3 Temporarry gone
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ChildUpdateChildIdchildIdPatch(authorization: string, childId: number, awakeAvatarUrl?: any, sleptAvatarUrl?: any, voiceUrl?: any, firstNameTranslations?: string, saynameTranslations?: string, bioTranslations?: string, bioSummaryTranslations?: string, lastNameTranslations?: string, sayName?: string, phoneNumber?: string, nationality?: number, country?: number, city?: number, gender?: boolean, birthPlace?: string, birthDate?: string, address?: string, housingStatus?: number, familyCount?: number, education?: number, status?: number, existenceStatus?: number, options?: any) {
            return ChildAPIApiFp(configuration).apiV2ChildUpdateChildIdchildIdPatch(authorization, childId, awakeAvatarUrl, sleptAvatarUrl, voiceUrl, firstNameTranslations, saynameTranslations, bioTranslations, bioSummaryTranslations, lastNameTranslations, sayName, phoneNumber, nationality, country, city, gender, birthPlace, birthDate, address, housingStatus, familyCount, education, status, existenceStatus, options)(fetch, basePath);
        },
    };
};

/**
 * ChildAPIApi - object-oriented interface
 * @export
 * @class ChildAPIApi
 * @extends {BaseAPI}
 */
export class ChildAPIApi extends BaseAPI {
    /**
     *
     * @summary Get all active children
     * @param {string} authorization Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildAPIApi
     */
    public apiV2ChildActivesGet(authorization: string, options?: any) {
        return ChildAPIApiFp(this.configuration).apiV2ChildActivesGet(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Adds a new child.<br/>Calling this API affects child and social_worker tables.<br/>Adding firstName, lastName, nationality, birthPlace, address, housingStatus, familyCount, education and status are optional.<br/>For awakeAvatarUrl and voiceUrl you have to upload a file; for avatar in png, jpg or jpeg and for voice in wav, m4a, wma, mp3, aac or ogg format.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities and the same rule is applied for nationality and birthPlace.<br/>Here is a guide for the codes used in this API:<br/>gender: [true]male, [false]female<br/>housingStatus: [0]homeless, [1]rent, [2]has home, [3]with relatives<br/>education: [-1]uneducated, [0]pre-school, [1]1st grade, [2]2nd grade, ...<br/>(no code has been assigned to status yet)<br/>
     * @summary add a child
     * @param {string} authorization Access Token
     * @param {any} awakeAvatarUrl
     * @param {any} sleptAvatarUrl
     * @param {any} voiceUrl
     * @param {string} saynameTranslations {\&quot;en\&quot;: \&quot;Bob\&quot;, \&quot;fa\&quot;: \&quot;بابک\&quot;}
     * @param {string} bioTranslations {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
     * @param {string} bioSummaryTranslations {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
     * @param {string} phoneNumber
     * @param {number} country
     * @param {number} city
     * @param {boolean} gender
     * @param {number} [ngoId]
     * @param {number} [swId]
     * @param {string} [firstNameTranslations]
     * @param {string} [lastNameTranslations]
     * @param {number} [nationality]
     * @param {string} [birthPlace]
     * @param {string} [birthDate]
     * @param {string} [address]
     * @param {number} [housingStatus]
     * @param {number} [familyCount]
     * @param {number} [education]
     * @param {number} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildAPIApi
     */
    public apiV2ChildAddPost(authorization: string, awakeAvatarUrl: any, sleptAvatarUrl: any, voiceUrl: any, saynameTranslations: string, bioTranslations: string, bioSummaryTranslations: string, phoneNumber: string, country: number, city: number, gender: boolean, ngoId?: number, swId?: number, firstNameTranslations?: string, lastNameTranslations?: string, nationality?: number, birthPlace?: string, birthDate?: string, address?: string, housingStatus?: number, familyCount?: number, education?: number, status?: number, options?: any) {
        return ChildAPIApiFp(this.configuration).apiV2ChildAddPost(authorization, awakeAvatarUrl, sleptAvatarUrl, voiceUrl, saynameTranslations, bioTranslations, bioSummaryTranslations, phoneNumber, country, city, gender, ngoId, swId, firstNameTranslations, lastNameTranslations, nationality, birthPlace, birthDate, address, housingStatus, familyCount, education, status, options)(this.fetch, this.basePath);
    }

    /**
     * Returns information of all children as a json object.<br/>Json key is child id and json value is children data.<br/>Calling this API affects on child, need, child_need, need_family and user tables.<br/>It contains children info, their needs and participants of those needs. Confirm tag determines the type of output:<br/>[0]for not confirmed children only, [1]for confirmed children only, [2]for both confirmed and not confirmed children<br/>
     * @summary get all children
     * @param {string} authorization Access Token
     * @param {number} confirm
     * @param {any} [ngoId]
     * @param {any} [swId]
     * @param {any} [take]
     * @param {any} [skip]
     * @param {any} [existenceStatus]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildAPIApi
     */
    public apiV2ChildAllConfirmconfirmGet(authorization: string, confirm: number, ngoId?: any, swId?: any, take?: any, skip?: any, existenceStatus?: any, options?: any) {
        return ChildAPIApiFp(this.configuration).apiV2ChildAllConfirmconfirmGet(authorization, confirm, ngoId, swId, take, skip, existenceStatus, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary get child needs summary
     * @param {string} authorization Access Token
     * @param {number} childId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildAPIApi
     */
    public apiV2ChildChildIdNeedsSummaryGet(authorization: string, childId: number, options?: any) {
        return ChildAPIApiFp(this.configuration).apiV2ChildChildIdNeedsSummaryGet(authorization, childId, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary get child needs
     * @param {string} authorization Access Token
     * @param {number} childId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildAPIApi
     */
    public apiV2ChildChildIdchildIdNeedsGet(authorization: string, childId: number, options?: any) {
        return ChildAPIApiFp(this.configuration).apiV2ChildChildIdchildIdNeedsGet(authorization, childId, options)(this.fetch, this.basePath);
    }

    /**
     * Returns information of a child with given id as a json object.<br/>Calling this API affects on child, need, child_need and need_family and user tables.<br/>It contains child info, its needs and participants of those needs.<br/>Confirm parameter determines how do you want the result:<br/>[0]not onfirmed, [1] confirmed, [2]both<br/>
     * @summary get child by id
     * @param {string} authorization Access Token
     * @param {number} childId
     * @param {number} confirm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildAPIApi
     */
    public apiV2ChildChildIdchildIdconfirmconfirmGet(authorization: string, childId: number, confirm: number, options?: any) {
        return ChildAPIApiFp(this.configuration).apiV2ChildChildIdchildIdconfirmconfirmGet(authorization, childId, confirm, options)(this.fetch, this.basePath);
    }

    /**
     * Confirms a child, so you cannot delete it anymore but you can add needs to it.<br/>Calling this API affect child, ngo, social_worker, child_need and family tables.<br/>
     * @summary confirm a child
     * @param {string} authorization Access Token
     * @param {number} childId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildAPIApi
     */
    public apiV2ChildConfirmChildIdchildIdPatch(authorization: string, childId: number, options?: any) {
        return ChildAPIApiFp(this.configuration).apiV2ChildConfirmChildIdchildIdPatch(authorization, childId, options)(this.fetch, this.basePath);
    }

    /**
     * This API deletes a specific child. Only not confirmed children can be deleted.<br/>Calling this API affects family table by updating a row and set isDeleted tag true, social_worker and ngo table by decreasing their currentChildrenCount field by 1 and child by setting isDeleted tag true for some rows.<br/>We do not fully delete any rows.<br/>
     * @summary delete a child
     * @param {string} authorization Access Token
     * @param {number} childId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildAPIApi
     */
    public apiV2ChildDeleteChildIdchildIdPatch(authorization: string, childId: number, options?: any) {
        return ChildAPIApiFp(this.configuration).apiV2ChildDeleteChildIdchildIdPatch(authorization, childId, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary get child by invitation token
     * @param {string} token
     * @param {string} [authorization] Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildAPIApi
     */
    public apiV2ChildInvitationsTokenGet(token: string, authorization?: string, options?: any) {
        return ChildAPIApiFp(this.configuration).apiV2ChildInvitationsTokenGet(token, authorization, options)(this.fetch, this.basePath);
    }

    /**
     * This API migrates a child.<br/>It means that from the moment after migration, another social worker will cover the child's need.<br/>The records of child will migrate too, so nothing is going to be missed or deleted.<br/>Calling this API affects on child, social_worker, ngo, child_need, need and family tables.<br/>It inserts a new record int child table for the migrated child and deactives the previous child's record.<br/>
     * @summary migrate a child
     * @param {string} authorization Access Token
     * @param {number} childId
     * @param {number} newSwId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildAPIApi
     */
    public apiV2ChildMigrateChildIdchildIdPatch(authorization: string, childId: number, newSwId: number, options?: any) {
        return ChildAPIApiFp(this.configuration).apiV2ChildMigrateChildIdchildIdPatch(authorization, childId, newSwId, options)(this.fetch, this.basePath);
    }

    /**
     * All the fields are optional. You can fill every field you want to change, and it will update the desired child.<br/>Calling this API only affects child table by updating a row.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>The same rule applied for nationality and birthPlace.<br/>For voiceUrl and awakeAvatarUrl you have to upload a file; for avatar in png, jpg or jpeg and for voice in wav, m4a, wma, mp3, aac or ogg format.<br/>Social workers can change their NGO by editing ngoId field.<br/>
     * @summary update a child
     * @param {string} authorization Access Token
     * @param {number} childId
     * @param {any} [awakeAvatarUrl]
     * @param {any} [sleptAvatarUrl]
     * @param {any} [voiceUrl]
     * @param {string} [firstNameTranslations]
     * @param {string} [saynameTranslations] {\&quot;en\&quot;: \&quot;Bob\&quot;, \&quot;fa\&quot;: \&quot;بابک\&quot;}
     * @param {string} [bioTranslations] {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
     * @param {string} [bioSummaryTranslations] {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
     * @param {string} [lastNameTranslations]
     * @param {string} [sayName]
     * @param {string} [phoneNumber]
     * @param {number} [nationality]
     * @param {number} [country]
     * @param {number} [city]
     * @param {boolean} [gender]
     * @param {string} [birthPlace]
     * @param {string} [birthDate]
     * @param {string} [address]
     * @param {number} [housingStatus]
     * @param {number} [familyCount]
     * @param {number} [education]
     * @param {number} [status]
     * @param {number} [existenceStatus] 0 dead :( | 1 alive and present | 2 alive but gone | 3 Temporarry gone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChildAPIApi
     */
    public apiV2ChildUpdateChildIdchildIdPatch(authorization: string, childId: number, awakeAvatarUrl?: any, sleptAvatarUrl?: any, voiceUrl?: any, firstNameTranslations?: string, saynameTranslations?: string, bioTranslations?: string, bioSummaryTranslations?: string, lastNameTranslations?: string, sayName?: string, phoneNumber?: string, nationality?: number, country?: number, city?: number, gender?: boolean, birthPlace?: string, birthDate?: string, address?: string, housingStatus?: number, familyCount?: number, education?: number, status?: number, existenceStatus?: number, options?: any) {
        return ChildAPIApiFp(this.configuration).apiV2ChildUpdateChildIdchildIdPatch(authorization, childId, awakeAvatarUrl, sleptAvatarUrl, voiceUrl, firstNameTranslations, saynameTranslations, bioTranslations, bioSummaryTranslations, lastNameTranslations, sayName, phoneNumber, nationality, country, city, gender, birthPlace, birthDate, address, housingStatus, familyCount, education, status, existenceStatus, options)(this.fetch, this.basePath);
    }

}

/**
 * DashboardAPIApi - fetch parameter creator
 * @export
 */
export const DashboardAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns required information for dashboard as a json object.<br/>It contains user data and user urgent needs.<br/>Calling this API affects need, child, child_need, need_family and user tables.<br/>
         * @summary get dashboard data feed by id
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DashboardGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2DashboardGet.');
            }
            const localVarPath = `/api/v2/dashboard`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DashboardAPIApi - functional programming interface
 * @export
 */
export const DashboardAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Returns required information for dashboard as a json object.<br/>It contains user data and user urgent needs.<br/>Calling this API affects need, child, child_need, need_family and user tables.<br/>
         * @summary get dashboard data feed by id
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DashboardGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = DashboardAPIApiFetchParamCreator(configuration).apiV2DashboardGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DashboardAPIApi - factory interface
 * @export
 */
export const DashboardAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Returns required information for dashboard as a json object.<br/>It contains user data and user urgent needs.<br/>Calling this API affects need, child, child_need, need_family and user tables.<br/>
         * @summary get dashboard data feed by id
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2DashboardGet(authorization: string, options?: any) {
            return DashboardAPIApiFp(configuration).apiV2DashboardGet(authorization, options)(fetch, basePath);
        },
    };
};

/**
 * DashboardAPIApi - object-oriented interface
 * @export
 * @class DashboardAPIApi
 * @extends {BaseAPI}
 */
export class DashboardAPIApi extends BaseAPI {
    /**
     * Returns required information for dashboard as a json object.<br/>It contains user data and user urgent needs.<br/>Calling this API affects need, child, child_need, need_family and user tables.<br/>
     * @summary get dashboard data feed by id
     * @param {string} authorization Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardAPIApi
     */
    public apiV2DashboardGet(authorization: string, options?: any) {
        return DashboardAPIApiFp(this.configuration).apiV2DashboardGet(authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * FamilyAPIApi - fetch parameter creator
 * @export
 */
export const FamilyAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a user to the family.<br/>Calling this API affects family and user_family tables.<br/>Each user has a role in family.<br/>
         * @summary add user to family
         * @param {string} authorization Access Token
         * @param {string} invitationToken Related to inviation model and contains family_id and role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2FamilyAddPost(authorization: string, invitationToken: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2FamilyAddPost.');
            }
            // verify required parameter 'invitationToken' is not null or undefined
            if (invitationToken === null || invitationToken === undefined) {
                throw new RequiredError('invitationToken', 'Required parameter invitationToken was null or undefined when calling apiV2FamilyAddPost.');
            }
            const localVarPath = `/api/v2/family/add`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (invitationToken !== undefined) {
                localVarFormParams.set('invitationToken', invitationToken as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all families as a json object.<br/>Calling this API affects family and user_family tables.<br/>
         * @summary get all families
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2FamilyAllGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2FamilyAllGet.');
            }
            const localVarPath = `/api/v2/family/all`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API deletes a specific user from child family.<br/>Calling this API affects user_family table by updating a row and set isDeleted tag true, child table by decreasing its sayFamilyCount field by 1 and need_family by setting isDeleted tag true for some rows.<br/>We do not fully delete any rows.<br/>
         * @summary Leave from a family
         * @param {string} authorization Access Token
         * @param {number} familyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2FamilyFamilyIdLeavePatch(authorization: string, familyId: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2FamilyFamilyIdLeavePatch.');
            }
            // verify required parameter 'familyId' is not null or undefined
            if (familyId === null || familyId === undefined) {
                throw new RequiredError('familyId', 'Required parameter familyId was null or undefined when calling apiV2FamilyFamilyIdLeavePatch.');
            }
            const localVarPath = `/api/v2/family/{family_id}/leave`
                .replace(`{${"family_id"}}`, encodeURIComponent(String(familyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the family with given id as a json object.<br/>Calling this API affects family and user_family tables.<br/>
         * @summary get family by id
         * @param {string} authorization Access Token
         * @param {number} familyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2FamilyFamilyIdfamilyIdGet(authorization: string, familyId: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2FamilyFamilyIdfamilyIdGet.');
            }
            // verify required parameter 'familyId' is not null or undefined
            if (familyId === null || familyId === undefined) {
                throw new RequiredError('familyId', 'Required parameter familyId was null or undefined when calling apiV2FamilyFamilyIdfamilyIdGet.');
            }
            const localVarPath = `/api/v2/family/familyId={family_id}`
                .replace(`{${"family_id"}}`, encodeURIComponent(String(familyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The roles are listed below:<br/>[0]father, [1]mother, [2] uncle, [3]aunt [4]daii [5]amme<br/>
         * @summary Join to a family V3
         * @param {string} authorization
         * @param {number} familyId
         * @param {number} role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3FamiliesFamilyIdJoinPost(authorization: string, familyId: number, role: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV3FamiliesFamilyIdJoinPost.');
            }
            // verify required parameter 'familyId' is not null or undefined
            if (familyId === null || familyId === undefined) {
                throw new RequiredError('familyId', 'Required parameter familyId was null or undefined when calling apiV3FamiliesFamilyIdJoinPost.');
            }
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role', 'Required parameter role was null or undefined when calling apiV3FamiliesFamilyIdJoinPost.');
            }
            const localVarPath = `/api/v3/families/{family_id}/join`
                .replace(`{${"family_id"}}`, encodeURIComponent(String(familyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (role !== undefined) {
                localVarFormParams.set('role', role as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FamilyAPIApi - functional programming interface
 * @export
 */
export const FamilyAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Adds a user to the family.<br/>Calling this API affects family and user_family tables.<br/>Each user has a role in family.<br/>
         * @summary add user to family
         * @param {string} authorization Access Token
         * @param {string} invitationToken Related to inviation model and contains family_id and role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2FamilyAddPost(authorization: string, invitationToken: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FamilyAPIApiFetchParamCreator(configuration).apiV2FamilyAddPost(authorization, invitationToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns all families as a json object.<br/>Calling this API affects family and user_family tables.<br/>
         * @summary get all families
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2FamilyAllGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FamilyModel> {
            const localVarFetchArgs = FamilyAPIApiFetchParamCreator(configuration).apiV2FamilyAllGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This API deletes a specific user from child family.<br/>Calling this API affects user_family table by updating a row and set isDeleted tag true, child table by decreasing its sayFamilyCount field by 1 and need_family by setting isDeleted tag true for some rows.<br/>We do not fully delete any rows.<br/>
         * @summary Leave from a family
         * @param {string} authorization Access Token
         * @param {number} familyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2FamilyFamilyIdLeavePatch(authorization: string, familyId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FamilyAPIApiFetchParamCreator(configuration).apiV2FamilyFamilyIdLeavePatch(authorization, familyId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the family with given id as a json object.<br/>Calling this API affects family and user_family tables.<br/>
         * @summary get family by id
         * @param {string} authorization Access Token
         * @param {number} familyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2FamilyFamilyIdfamilyIdGet(authorization: string, familyId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FamilyModel> {
            const localVarFetchArgs = FamilyAPIApiFetchParamCreator(configuration).apiV2FamilyFamilyIdfamilyIdGet(authorization, familyId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * The roles are listed below:<br/>[0]father, [1]mother, [2] uncle, [3]aunt [4]daii [5]amme<br/>
         * @summary Join to a family V3
         * @param {string} authorization
         * @param {number} familyId
         * @param {number} role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3FamiliesFamilyIdJoinPost(authorization: string, familyId: number, role: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = FamilyAPIApiFetchParamCreator(configuration).apiV3FamiliesFamilyIdJoinPost(authorization, familyId, role, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * FamilyAPIApi - factory interface
 * @export
 */
export const FamilyAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Adds a user to the family.<br/>Calling this API affects family and user_family tables.<br/>Each user has a role in family.<br/>
         * @summary add user to family
         * @param {string} authorization Access Token
         * @param {string} invitationToken Related to inviation model and contains family_id and role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2FamilyAddPost(authorization: string, invitationToken: string, options?: any) {
            return FamilyAPIApiFp(configuration).apiV2FamilyAddPost(authorization, invitationToken, options)(fetch, basePath);
        },
        /**
         * Returns all families as a json object.<br/>Calling this API affects family and user_family tables.<br/>
         * @summary get all families
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2FamilyAllGet(authorization: string, options?: any) {
            return FamilyAPIApiFp(configuration).apiV2FamilyAllGet(authorization, options)(fetch, basePath);
        },
        /**
         * This API deletes a specific user from child family.<br/>Calling this API affects user_family table by updating a row and set isDeleted tag true, child table by decreasing its sayFamilyCount field by 1 and need_family by setting isDeleted tag true for some rows.<br/>We do not fully delete any rows.<br/>
         * @summary Leave from a family
         * @param {string} authorization Access Token
         * @param {number} familyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2FamilyFamilyIdLeavePatch(authorization: string, familyId: number, options?: any) {
            return FamilyAPIApiFp(configuration).apiV2FamilyFamilyIdLeavePatch(authorization, familyId, options)(fetch, basePath);
        },
        /**
         * Returns the family with given id as a json object.<br/>Calling this API affects family and user_family tables.<br/>
         * @summary get family by id
         * @param {string} authorization Access Token
         * @param {number} familyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2FamilyFamilyIdfamilyIdGet(authorization: string, familyId: number, options?: any) {
            return FamilyAPIApiFp(configuration).apiV2FamilyFamilyIdfamilyIdGet(authorization, familyId, options)(fetch, basePath);
        },
        /**
         * The roles are listed below:<br/>[0]father, [1]mother, [2] uncle, [3]aunt [4]daii [5]amme<br/>
         * @summary Join to a family V3
         * @param {string} authorization
         * @param {number} familyId
         * @param {number} role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3FamiliesFamilyIdJoinPost(authorization: string, familyId: number, role: number, options?: any) {
            return FamilyAPIApiFp(configuration).apiV3FamiliesFamilyIdJoinPost(authorization, familyId, role, options)(fetch, basePath);
        },
    };
};

/**
 * FamilyAPIApi - object-oriented interface
 * @export
 * @class FamilyAPIApi
 * @extends {BaseAPI}
 */
export class FamilyAPIApi extends BaseAPI {
    /**
     * Adds a user to the family.<br/>Calling this API affects family and user_family tables.<br/>Each user has a role in family.<br/>
     * @summary add user to family
     * @param {string} authorization Access Token
     * @param {string} invitationToken Related to inviation model and contains family_id and role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamilyAPIApi
     */
    public apiV2FamilyAddPost(authorization: string, invitationToken: string, options?: any) {
        return FamilyAPIApiFp(this.configuration).apiV2FamilyAddPost(authorization, invitationToken, options)(this.fetch, this.basePath);
    }

    /**
     * Returns all families as a json object.<br/>Calling this API affects family and user_family tables.<br/>
     * @summary get all families
     * @param {string} authorization Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamilyAPIApi
     */
    public apiV2FamilyAllGet(authorization: string, options?: any) {
        return FamilyAPIApiFp(this.configuration).apiV2FamilyAllGet(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * This API deletes a specific user from child family.<br/>Calling this API affects user_family table by updating a row and set isDeleted tag true, child table by decreasing its sayFamilyCount field by 1 and need_family by setting isDeleted tag true for some rows.<br/>We do not fully delete any rows.<br/>
     * @summary Leave from a family
     * @param {string} authorization Access Token
     * @param {number} familyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamilyAPIApi
     */
    public apiV2FamilyFamilyIdLeavePatch(authorization: string, familyId: number, options?: any) {
        return FamilyAPIApiFp(this.configuration).apiV2FamilyFamilyIdLeavePatch(authorization, familyId, options)(this.fetch, this.basePath);
    }

    /**
     * Returns the family with given id as a json object.<br/>Calling this API affects family and user_family tables.<br/>
     * @summary get family by id
     * @param {string} authorization Access Token
     * @param {number} familyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamilyAPIApi
     */
    public apiV2FamilyFamilyIdfamilyIdGet(authorization: string, familyId: number, options?: any) {
        return FamilyAPIApiFp(this.configuration).apiV2FamilyFamilyIdfamilyIdGet(authorization, familyId, options)(this.fetch, this.basePath);
    }

    /**
     * The roles are listed below:<br/>[0]father, [1]mother, [2] uncle, [3]aunt [4]daii [5]amme<br/>
     * @summary Join to a family V3
     * @param {string} authorization
     * @param {number} familyId
     * @param {number} role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FamilyAPIApi
     */
    public apiV3FamiliesFamilyIdJoinPost(authorization: string, familyId: number, role: number, options?: any) {
        return FamilyAPIApiFp(this.configuration).apiV3FamiliesFamilyIdJoinPost(authorization, familyId, role, options)(this.fetch, this.basePath);
    }

}

/**
 * GeoAPIApi - fetch parameter creator
 * @export
 */
export const GeoAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get a City
         * @param {number} id ID of city
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CitiesIdGet(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2CitiesIdGet.');
            }
            const localVarPath = `/api/v2/cities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CountriesGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/v2/countries`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Country
         * @param {number} id ID of Country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CountriesIdGet(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2CountriesIdGet.');
            }
            const localVarPath = `/api/v2/countries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List states of a country
         * @param {number} id ID of Country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CountriesIdStatesGet(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2CountriesIdStatesGet.');
            }
            const localVarPath = `/api/v2/countries/{id}/states`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List cities of a State
         * @param {number} id ID of State
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2StatesIdCitiesGet(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2StatesIdCitiesGet.');
            }
            const localVarPath = `/api/v2/states/{id}/cities`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get State by id
         * @param {number} id ID of State
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2StatesIdGet(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2StatesIdGet.');
            }
            const localVarPath = `/api/v2/states/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeoAPIApi - functional programming interface
 * @export
 */
export const GeoAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get a City
         * @param {number} id ID of city
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CitiesIdGet(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CityModel> {
            const localVarFetchArgs = GeoAPIApiFetchParamCreator(configuration).apiV2CitiesIdGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary List countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CountriesGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<CountryModel>> {
            const localVarFetchArgs = GeoAPIApiFetchParamCreator(configuration).apiV2CountriesGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get Country
         * @param {number} id ID of Country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CountriesIdGet(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<CountryModel> {
            const localVarFetchArgs = GeoAPIApiFetchParamCreator(configuration).apiV2CountriesIdGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary List states of a country
         * @param {number} id ID of Country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CountriesIdStatesGet(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<StateModel>> {
            const localVarFetchArgs = GeoAPIApiFetchParamCreator(configuration).apiV2CountriesIdStatesGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary List cities of a State
         * @param {number} id ID of State
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2StatesIdCitiesGet(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<CityModel>> {
            const localVarFetchArgs = GeoAPIApiFetchParamCreator(configuration).apiV2StatesIdCitiesGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get State by id
         * @param {number} id ID of State
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2StatesIdGet(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<StateModel> {
            const localVarFetchArgs = GeoAPIApiFetchParamCreator(configuration).apiV2StatesIdGet(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * GeoAPIApi - factory interface
 * @export
 */
export const GeoAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @summary Get a City
         * @param {number} id ID of city
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CitiesIdGet(id: number, options?: any) {
            return GeoAPIApiFp(configuration).apiV2CitiesIdGet(id, options)(fetch, basePath);
        },
        /**
         *
         * @summary List countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CountriesGet(options?: any) {
            return GeoAPIApiFp(configuration).apiV2CountriesGet(options)(fetch, basePath);
        },
        /**
         *
         * @summary Get Country
         * @param {number} id ID of Country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CountriesIdGet(id: number, options?: any) {
            return GeoAPIApiFp(configuration).apiV2CountriesIdGet(id, options)(fetch, basePath);
        },
        /**
         *
         * @summary List states of a country
         * @param {number} id ID of Country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CountriesIdStatesGet(id: number, options?: any) {
            return GeoAPIApiFp(configuration).apiV2CountriesIdStatesGet(id, options)(fetch, basePath);
        },
        /**
         *
         * @summary List cities of a State
         * @param {number} id ID of State
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2StatesIdCitiesGet(id: number, options?: any) {
            return GeoAPIApiFp(configuration).apiV2StatesIdCitiesGet(id, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get State by id
         * @param {number} id ID of State
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2StatesIdGet(id: number, options?: any) {
            return GeoAPIApiFp(configuration).apiV2StatesIdGet(id, options)(fetch, basePath);
        },
    };
};

/**
 * GeoAPIApi - object-oriented interface
 * @export
 * @class GeoAPIApi
 * @extends {BaseAPI}
 */
export class GeoAPIApi extends BaseAPI {
    /**
     *
     * @summary Get a City
     * @param {number} id ID of city
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeoAPIApi
     */
    public apiV2CitiesIdGet(id: number, options?: any) {
        return GeoAPIApiFp(this.configuration).apiV2CitiesIdGet(id, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary List countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeoAPIApi
     */
    public apiV2CountriesGet(options?: any) {
        return GeoAPIApiFp(this.configuration).apiV2CountriesGet(options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Get Country
     * @param {number} id ID of Country
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeoAPIApi
     */
    public apiV2CountriesIdGet(id: number, options?: any) {
        return GeoAPIApiFp(this.configuration).apiV2CountriesIdGet(id, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary List states of a country
     * @param {number} id ID of Country
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeoAPIApi
     */
    public apiV2CountriesIdStatesGet(id: number, options?: any) {
        return GeoAPIApiFp(this.configuration).apiV2CountriesIdStatesGet(id, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary List cities of a State
     * @param {number} id ID of State
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeoAPIApi
     */
    public apiV2StatesIdCitiesGet(id: number, options?: any) {
        return GeoAPIApiFp(this.configuration).apiV2StatesIdCitiesGet(id, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Get State by id
     * @param {number} id ID of State
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeoAPIApi
     */
    public apiV2StatesIdGet(id: number, options?: any) {
        return GeoAPIApiFp(this.configuration).apiV2StatesIdGet(id, options)(this.fetch, this.basePath);
    }

}

/**
 * InvitationAPIApi - fetch parameter creator
 * @export
 */
export const InvitationAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The roles are listed below:<br/>[0]father, [1]mother, [2] uncle, [3]aunt [4]daii [5]amme<br/>
         * @summary Invite to join to a family
         * @param {number} familyId
         * @param {string} [authorization]
         * @param {number} [role]
         * @param {string} [text]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InvitationsPost(familyId: number, authorization?: string, role?: number, text?: string, options: any = {}): FetchArgs {
            // verify required parameter 'familyId' is not null or undefined
            if (familyId === null || familyId === undefined) {
                throw new RequiredError('familyId', 'Required parameter familyId was null or undefined when calling apiV2InvitationsPost.');
            }
            const localVarPath = `/api/v2/invitations/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (familyId !== undefined) {
                localVarFormParams.set('family_id', familyId as any);
            }

            if (role !== undefined) {
                localVarFormParams.set('role', role as any);
            }

            if (text !== undefined) {
                localVarFormParams.set('text', text as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The roles are listed below:<br/>[0]father, [1]mother, [2] uncle, [3]aunt [4]daii [5]amme<br/>
         * @summary Invite to join to a family V3
         * @param {string} authorization
         * @param {number} familyId
         * @param {number} role
         * @param {string} [text]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3InvitationsPost(authorization: string, familyId: number, role: number, text?: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV3InvitationsPost.');
            }
            // verify required parameter 'familyId' is not null or undefined
            if (familyId === null || familyId === undefined) {
                throw new RequiredError('familyId', 'Required parameter familyId was null or undefined when calling apiV3InvitationsPost.');
            }
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role', 'Required parameter role was null or undefined when calling apiV3InvitationsPost.');
            }
            const localVarPath = `/api/v3/invitations/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (familyId !== undefined) {
                localVarFormParams.set('family_id', familyId as any);
            }

            if (role !== undefined) {
                localVarFormParams.set('role', role as any);
            }

            if (text !== undefined) {
                localVarFormParams.set('text', text as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Accept an Invitation V3
         * @param {string} authorization Access Token
         * @param {string} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3InvitationsTokenAcceptPost(authorization: string, token: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV3InvitationsTokenAcceptPost.');
            }
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token', 'Required parameter token was null or undefined when calling apiV3InvitationsTokenAcceptPost.');
            }
            const localVarPath = `/api/v3/invitations/{token}/accept`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Invitation V3
         * @param {string} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3InvitationsTokenGet(token: string, options: any = {}): FetchArgs {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token', 'Required parameter token was null or undefined when calling apiV3InvitationsTokenGet.');
            }
            const localVarPath = `/api/v3/invitations/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvitationAPIApi - functional programming interface
 * @export
 */
export const InvitationAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         * The roles are listed below:<br/>[0]father, [1]mother, [2] uncle, [3]aunt [4]daii [5]amme<br/>
         * @summary Invite to join to a family
         * @param {number} familyId
         * @param {string} [authorization]
         * @param {number} [role]
         * @param {string} [text]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InvitationsPost(familyId: number, authorization?: string, role?: number, text?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = InvitationAPIApiFetchParamCreator(configuration).apiV2InvitationsPost(familyId, authorization, role, text, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * The roles are listed below:<br/>[0]father, [1]mother, [2] uncle, [3]aunt [4]daii [5]amme<br/>
         * @summary Invite to join to a family V3
         * @param {string} authorization
         * @param {number} familyId
         * @param {number} role
         * @param {string} [text]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3InvitationsPost(authorization: string, familyId: number, role: number, text?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InvitationV3> {
            const localVarFetchArgs = InvitationAPIApiFetchParamCreator(configuration).apiV3InvitationsPost(authorization, familyId, role, text, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Accept an Invitation V3
         * @param {string} authorization Access Token
         * @param {string} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3InvitationsTokenAcceptPost(authorization: string, token: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = InvitationAPIApiFetchParamCreator(configuration).apiV3InvitationsTokenAcceptPost(authorization, token, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get Invitation V3
         * @param {string} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3InvitationsTokenGet(token: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InvitationV3> {
            const localVarFetchArgs = InvitationAPIApiFetchParamCreator(configuration).apiV3InvitationsTokenGet(token, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * InvitationAPIApi - factory interface
 * @export
 */
export const InvitationAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * The roles are listed below:<br/>[0]father, [1]mother, [2] uncle, [3]aunt [4]daii [5]amme<br/>
         * @summary Invite to join to a family
         * @param {number} familyId
         * @param {string} [authorization]
         * @param {number} [role]
         * @param {string} [text]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2InvitationsPost(familyId: number, authorization?: string, role?: number, text?: string, options?: any) {
            return InvitationAPIApiFp(configuration).apiV2InvitationsPost(familyId, authorization, role, text, options)(fetch, basePath);
        },
        /**
         * The roles are listed below:<br/>[0]father, [1]mother, [2] uncle, [3]aunt [4]daii [5]amme<br/>
         * @summary Invite to join to a family V3
         * @param {string} authorization
         * @param {number} familyId
         * @param {number} role
         * @param {string} [text]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3InvitationsPost(authorization: string, familyId: number, role: number, text?: string, options?: any) {
            return InvitationAPIApiFp(configuration).apiV3InvitationsPost(authorization, familyId, role, text, options)(fetch, basePath);
        },
        /**
         *
         * @summary Accept an Invitation V3
         * @param {string} authorization Access Token
         * @param {string} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3InvitationsTokenAcceptPost(authorization: string, token: string, options?: any) {
            return InvitationAPIApiFp(configuration).apiV3InvitationsTokenAcceptPost(authorization, token, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get Invitation V3
         * @param {string} token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3InvitationsTokenGet(token: string, options?: any) {
            return InvitationAPIApiFp(configuration).apiV3InvitationsTokenGet(token, options)(fetch, basePath);
        },
    };
};

/**
 * InvitationAPIApi - object-oriented interface
 * @export
 * @class InvitationAPIApi
 * @extends {BaseAPI}
 */
export class InvitationAPIApi extends BaseAPI {
    /**
     * The roles are listed below:<br/>[0]father, [1]mother, [2] uncle, [3]aunt [4]daii [5]amme<br/>
     * @summary Invite to join to a family
     * @param {number} familyId
     * @param {string} [authorization]
     * @param {number} [role]
     * @param {string} [text]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationAPIApi
     */
    public apiV2InvitationsPost(familyId: number, authorization?: string, role?: number, text?: string, options?: any) {
        return InvitationAPIApiFp(this.configuration).apiV2InvitationsPost(familyId, authorization, role, text, options)(this.fetch, this.basePath);
    }

    /**
     * The roles are listed below:<br/>[0]father, [1]mother, [2] uncle, [3]aunt [4]daii [5]amme<br/>
     * @summary Invite to join to a family V3
     * @param {string} authorization
     * @param {number} familyId
     * @param {number} role
     * @param {string} [text]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationAPIApi
     */
    public apiV3InvitationsPost(authorization: string, familyId: number, role: number, text?: string, options?: any) {
        return InvitationAPIApiFp(this.configuration).apiV3InvitationsPost(authorization, familyId, role, text, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Accept an Invitation V3
     * @param {string} authorization Access Token
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationAPIApi
     */
    public apiV3InvitationsTokenAcceptPost(authorization: string, token: string, options?: any) {
        return InvitationAPIApiFp(this.configuration).apiV3InvitationsTokenAcceptPost(authorization, token, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Get Invitation V3
     * @param {string} token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvitationAPIApi
     */
    public apiV3InvitationsTokenGet(token: string, options?: any) {
        return InvitationAPIApiFp(this.configuration).apiV3InvitationsTokenGet(token, options)(this.fetch, this.basePath);
    }

}

/**
 * NGOAPIApi - fetch parameter creator
 * @export
 */
export const NGOAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Activates a deactive NGO.<br/>Calling this API only affects ngo table by updating a row.<br/>
         * @summary activate ngo
         * @param {string} authorization Access Token
         * @param {number} ngoId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NgoActivateNgoIdngoIdPatch(authorization: string, ngoId: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2NgoActivateNgoIdngoIdPatch.');
            }
            // verify required parameter 'ngoId' is not null or undefined
            if (ngoId === null || ngoId === undefined) {
                throw new RequiredError('ngoId', 'Required parameter ngoId was null or undefined when calling apiV2NgoActivateNgoIdngoIdPatch.');
            }
            const localVarPath = `/api/v2/ngo/activate/ngoId={ngo_id}`
                .replace(`{${"ngo_id"}}`, encodeURIComponent(String(ngoId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds an NGO.<br/>This API creates a row in ngo table containing a new NGO information.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>Adding website is optional.<br/>For logoUrl ypu have to upload a file.<br/>Adding multiple phone numbers is allowed.<br/>They must be comma separated and without any spaces like the example bellow:<br/>[number],[number],...<br/>
         * @summary add ngo
         * @param {string} authorization Access Token
         * @param {number} cityId
         * @param {string} name
         * @param {string} postalAddress
         * @param {string} emailAddress
         * @param {string} phoneNumber
         * @param {any} logoUrl
         * @param {string} [website]
         * @param {number} [balance]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NgoAddPost(authorization: string, cityId: number, name: string, postalAddress: string, emailAddress: string, phoneNumber: string, logoUrl: any, website?: string, balance?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2NgoAddPost.');
            }
            // verify required parameter 'cityId' is not null or undefined
            if (cityId === null || cityId === undefined) {
                throw new RequiredError('cityId', 'Required parameter cityId was null or undefined when calling apiV2NgoAddPost.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name', 'Required parameter name was null or undefined when calling apiV2NgoAddPost.');
            }
            // verify required parameter 'postalAddress' is not null or undefined
            if (postalAddress === null || postalAddress === undefined) {
                throw new RequiredError('postalAddress', 'Required parameter postalAddress was null or undefined when calling apiV2NgoAddPost.');
            }
            // verify required parameter 'emailAddress' is not null or undefined
            if (emailAddress === null || emailAddress === undefined) {
                throw new RequiredError('emailAddress', 'Required parameter emailAddress was null or undefined when calling apiV2NgoAddPost.');
            }
            // verify required parameter 'phoneNumber' is not null or undefined
            if (phoneNumber === null || phoneNumber === undefined) {
                throw new RequiredError('phoneNumber', 'Required parameter phoneNumber was null or undefined when calling apiV2NgoAddPost.');
            }
            // verify required parameter 'logoUrl' is not null or undefined
            if (logoUrl === null || logoUrl === undefined) {
                throw new RequiredError('logoUrl', 'Required parameter logoUrl was null or undefined when calling apiV2NgoAddPost.');
            }
            const localVarPath = `/api/v2/ngo/add`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (cityId !== undefined) {
                localVarFormParams.set('cityId', cityId as any);
            }

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            if (website !== undefined) {
                localVarFormParams.set('website', website as any);
            }

            if (postalAddress !== undefined) {
                localVarFormParams.set('postalAddress', postalAddress as any);
            }

            if (emailAddress !== undefined) {
                localVarFormParams.set('emailAddress', emailAddress as any);
            }

            if (phoneNumber !== undefined) {
                localVarFormParams.set('phoneNumber', phoneNumber as any);
            }

            if (logoUrl !== undefined) {
                localVarFormParams.set('logoUrl', logoUrl as any);
            }

            if (balance !== undefined) {
                localVarFormParams.set('balance', balance as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information of all NGOs in a json.<br/>Json key is NGO id and json value is NGO object.<br/>Calling this API only affects ngo table by selecting rows from it.<br/>
         * @summary get all ngos
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NgoAllGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2NgoAllGet.');
            }
            const localVarPath = `/api/v2/ngo/all`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deactivates an active NGO.<br/>Calling this API only affects ngo table by updating a row.<br/>
         * @summary deactivate ngo
         * @param {number} ngoId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NgoDeactivateNgoIdngoIdPatch(ngoId: number, options: any = {}): FetchArgs {
            // verify required parameter 'ngoId' is not null or undefined
            if (ngoId === null || ngoId === undefined) {
                throw new RequiredError('ngoId', 'Required parameter ngoId was null or undefined when calling apiV2NgoDeactivateNgoIdngoIdPatch.');
            }
            const localVarPath = `/api/v2/ngo/deactivate/ngoId={ngo_id}`
                .replace(`{${"ngo_id"}}`, encodeURIComponent(String(ngoId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a specific NGO.<br/>Calling this API only affects ngo table by updating a row and set isDeleted tag true.<br/>We do not fully delete any rows.<br/>
         * @summary delete ngo
         * @param {string} authorization Access Token
         * @param {number} ngoId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NgoDeleteNgoIdngoIdPatch(authorization: string, ngoId: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2NgoDeleteNgoIdngoIdPatch.');
            }
            // verify required parameter 'ngoId' is not null or undefined
            if (ngoId === null || ngoId === undefined) {
                throw new RequiredError('ngoId', 'Required parameter ngoId was null or undefined when calling apiV2NgoDeleteNgoIdngoIdPatch.');
            }
            const localVarPath = `/api/v2/ngo/delete/ngoId={ngo_id}`
                .replace(`{${"ngo_id"}}`, encodeURIComponent(String(ngoId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information of an NGO with given id as a json object.<br/>Calling this API only affects ngo table by selecting a single row from it.<br/>
         * @summary get ngo by id
         * @param {string} authorization Access Token
         * @param {number} ngoId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NgoNgoIdngoIdGet(authorization: string, ngoId: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2NgoNgoIdngoIdGet.');
            }
            // verify required parameter 'ngoId' is not null or undefined
            if (ngoId === null || ngoId === undefined) {
                throw new RequiredError('ngoId', 'Required parameter ngoId was null or undefined when calling apiV2NgoNgoIdngoIdGet.');
            }
            const localVarPath = `/api/v2/ngo/ngoId={ngo_id}`
                .replace(`{${"ngo_id"}}`, encodeURIComponent(String(ngoId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * All the fields are optional.<br/>You can fill every field you want to change, and it will update the desired NGO.<br/>Calling this API only affects ngo table by updating a row.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>For logoUrl you have to upload a file.<br/>
         * @summary update ngo
         * @param {string} authorization Access Token
         * @param {number} ngoId
         * @param {number} [cityId]
         * @param {string} [name]
         * @param {string} [website]
         * @param {string} [postalAddress]
         * @param {string} [emailAddress]
         * @param {string} [phoneNumber]
         * @param {any} [logoUrl]
         * @param {number} [balance]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NgoUpdateNgoIdngoIdPatch(authorization: string, ngoId: number, cityId?: number, name?: string, website?: string, postalAddress?: string, emailAddress?: string, phoneNumber?: string, logoUrl?: any, balance?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2NgoUpdateNgoIdngoIdPatch.');
            }
            // verify required parameter 'ngoId' is not null or undefined
            if (ngoId === null || ngoId === undefined) {
                throw new RequiredError('ngoId', 'Required parameter ngoId was null or undefined when calling apiV2NgoUpdateNgoIdngoIdPatch.');
            }
            const localVarPath = `/api/v2/ngo/update/ngoId={ngo_id}`
                .replace(`{${"ngo_id"}}`, encodeURIComponent(String(ngoId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (cityId !== undefined) {
                localVarFormParams.set('cityId', cityId as any);
            }

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            if (website !== undefined) {
                localVarFormParams.set('website', website as any);
            }

            if (postalAddress !== undefined) {
                localVarFormParams.set('postalAddress', postalAddress as any);
            }

            if (emailAddress !== undefined) {
                localVarFormParams.set('emailAddress', emailAddress as any);
            }

            if (phoneNumber !== undefined) {
                localVarFormParams.set('phoneNumber', phoneNumber as any);
            }

            if (logoUrl !== undefined) {
                localVarFormParams.set('logoUrl', logoUrl as any);
            }

            if (balance !== undefined) {
                localVarFormParams.set('balance', balance as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NGOAPIApi - functional programming interface
 * @export
 */
export const NGOAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Activates a deactive NGO.<br/>Calling this API only affects ngo table by updating a row.<br/>
         * @summary activate ngo
         * @param {string} authorization Access Token
         * @param {number} ngoId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NgoActivateNgoIdngoIdPatch(authorization: string, ngoId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NGOAPIApiFetchParamCreator(configuration).apiV2NgoActivateNgoIdngoIdPatch(authorization, ngoId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Adds an NGO.<br/>This API creates a row in ngo table containing a new NGO information.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>Adding website is optional.<br/>For logoUrl ypu have to upload a file.<br/>Adding multiple phone numbers is allowed.<br/>They must be comma separated and without any spaces like the example bellow:<br/>[number],[number],...<br/>
         * @summary add ngo
         * @param {string} authorization Access Token
         * @param {number} cityId
         * @param {string} name
         * @param {string} postalAddress
         * @param {string} emailAddress
         * @param {string} phoneNumber
         * @param {any} logoUrl
         * @param {string} [website]
         * @param {number} [balance]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NgoAddPost(authorization: string, cityId: number, name: string, postalAddress: string, emailAddress: string, phoneNumber: string, logoUrl: any, website?: string, balance?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NGOAPIApiFetchParamCreator(configuration).apiV2NgoAddPost(authorization, cityId, name, postalAddress, emailAddress, phoneNumber, logoUrl, website, balance, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns information of all NGOs in a json.<br/>Json key is NGO id and json value is NGO object.<br/>Calling this API only affects ngo table by selecting rows from it.<br/>
         * @summary get all ngos
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NgoAllGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NgoModel> {
            const localVarFetchArgs = NGOAPIApiFetchParamCreator(configuration).apiV2NgoAllGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deactivates an active NGO.<br/>Calling this API only affects ngo table by updating a row.<br/>
         * @summary deactivate ngo
         * @param {number} ngoId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NgoDeactivateNgoIdngoIdPatch(ngoId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NGOAPIApiFetchParamCreator(configuration).apiV2NgoDeactivateNgoIdngoIdPatch(ngoId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a specific NGO.<br/>Calling this API only affects ngo table by updating a row and set isDeleted tag true.<br/>We do not fully delete any rows.<br/>
         * @summary delete ngo
         * @param {string} authorization Access Token
         * @param {number} ngoId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NgoDeleteNgoIdngoIdPatch(authorization: string, ngoId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NGOAPIApiFetchParamCreator(configuration).apiV2NgoDeleteNgoIdngoIdPatch(authorization, ngoId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns information of an NGO with given id as a json object.<br/>Calling this API only affects ngo table by selecting a single row from it.<br/>
         * @summary get ngo by id
         * @param {string} authorization Access Token
         * @param {number} ngoId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NgoNgoIdngoIdGet(authorization: string, ngoId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NgoModel> {
            const localVarFetchArgs = NGOAPIApiFetchParamCreator(configuration).apiV2NgoNgoIdngoIdGet(authorization, ngoId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * All the fields are optional.<br/>You can fill every field you want to change, and it will update the desired NGO.<br/>Calling this API only affects ngo table by updating a row.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>For logoUrl you have to upload a file.<br/>
         * @summary update ngo
         * @param {string} authorization Access Token
         * @param {number} ngoId
         * @param {number} [cityId]
         * @param {string} [name]
         * @param {string} [website]
         * @param {string} [postalAddress]
         * @param {string} [emailAddress]
         * @param {string} [phoneNumber]
         * @param {any} [logoUrl]
         * @param {number} [balance]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NgoUpdateNgoIdngoIdPatch(authorization: string, ngoId: number, cityId?: number, name?: string, website?: string, postalAddress?: string, emailAddress?: string, phoneNumber?: string, logoUrl?: any, balance?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NgoModel> {
            const localVarFetchArgs = NGOAPIApiFetchParamCreator(configuration).apiV2NgoUpdateNgoIdngoIdPatch(authorization, ngoId, cityId, name, website, postalAddress, emailAddress, phoneNumber, logoUrl, balance, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NGOAPIApi - factory interface
 * @export
 */
export const NGOAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Activates a deactive NGO.<br/>Calling this API only affects ngo table by updating a row.<br/>
         * @summary activate ngo
         * @param {string} authorization Access Token
         * @param {number} ngoId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NgoActivateNgoIdngoIdPatch(authorization: string, ngoId: number, options?: any) {
            return NGOAPIApiFp(configuration).apiV2NgoActivateNgoIdngoIdPatch(authorization, ngoId, options)(fetch, basePath);
        },
        /**
         * Adds an NGO.<br/>This API creates a row in ngo table containing a new NGO information.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>Adding website is optional.<br/>For logoUrl ypu have to upload a file.<br/>Adding multiple phone numbers is allowed.<br/>They must be comma separated and without any spaces like the example bellow:<br/>[number],[number],...<br/>
         * @summary add ngo
         * @param {string} authorization Access Token
         * @param {number} cityId
         * @param {string} name
         * @param {string} postalAddress
         * @param {string} emailAddress
         * @param {string} phoneNumber
         * @param {any} logoUrl
         * @param {string} [website]
         * @param {number} [balance]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NgoAddPost(authorization: string, cityId: number, name: string, postalAddress: string, emailAddress: string, phoneNumber: string, logoUrl: any, website?: string, balance?: number, options?: any) {
            return NGOAPIApiFp(configuration).apiV2NgoAddPost(authorization, cityId, name, postalAddress, emailAddress, phoneNumber, logoUrl, website, balance, options)(fetch, basePath);
        },
        /**
         * Returns information of all NGOs in a json.<br/>Json key is NGO id and json value is NGO object.<br/>Calling this API only affects ngo table by selecting rows from it.<br/>
         * @summary get all ngos
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NgoAllGet(authorization: string, options?: any) {
            return NGOAPIApiFp(configuration).apiV2NgoAllGet(authorization, options)(fetch, basePath);
        },
        /**
         * Deactivates an active NGO.<br/>Calling this API only affects ngo table by updating a row.<br/>
         * @summary deactivate ngo
         * @param {number} ngoId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NgoDeactivateNgoIdngoIdPatch(ngoId: number, options?: any) {
            return NGOAPIApiFp(configuration).apiV2NgoDeactivateNgoIdngoIdPatch(ngoId, options)(fetch, basePath);
        },
        /**
         * Deletes a specific NGO.<br/>Calling this API only affects ngo table by updating a row and set isDeleted tag true.<br/>We do not fully delete any rows.<br/>
         * @summary delete ngo
         * @param {string} authorization Access Token
         * @param {number} ngoId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NgoDeleteNgoIdngoIdPatch(authorization: string, ngoId: number, options?: any) {
            return NGOAPIApiFp(configuration).apiV2NgoDeleteNgoIdngoIdPatch(authorization, ngoId, options)(fetch, basePath);
        },
        /**
         * Returns information of an NGO with given id as a json object.<br/>Calling this API only affects ngo table by selecting a single row from it.<br/>
         * @summary get ngo by id
         * @param {string} authorization Access Token
         * @param {number} ngoId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NgoNgoIdngoIdGet(authorization: string, ngoId: number, options?: any) {
            return NGOAPIApiFp(configuration).apiV2NgoNgoIdngoIdGet(authorization, ngoId, options)(fetch, basePath);
        },
        /**
         * All the fields are optional.<br/>You can fill every field you want to change, and it will update the desired NGO.<br/>Calling this API only affects ngo table by updating a row.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>For logoUrl you have to upload a file.<br/>
         * @summary update ngo
         * @param {string} authorization Access Token
         * @param {number} ngoId
         * @param {number} [cityId]
         * @param {string} [name]
         * @param {string} [website]
         * @param {string} [postalAddress]
         * @param {string} [emailAddress]
         * @param {string} [phoneNumber]
         * @param {any} [logoUrl]
         * @param {number} [balance]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NgoUpdateNgoIdngoIdPatch(authorization: string, ngoId: number, cityId?: number, name?: string, website?: string, postalAddress?: string, emailAddress?: string, phoneNumber?: string, logoUrl?: any, balance?: number, options?: any) {
            return NGOAPIApiFp(configuration).apiV2NgoUpdateNgoIdngoIdPatch(authorization, ngoId, cityId, name, website, postalAddress, emailAddress, phoneNumber, logoUrl, balance, options)(fetch, basePath);
        },
    };
};

/**
 * NGOAPIApi - object-oriented interface
 * @export
 * @class NGOAPIApi
 * @extends {BaseAPI}
 */
export class NGOAPIApi extends BaseAPI {
    /**
     * Activates a deactive NGO.<br/>Calling this API only affects ngo table by updating a row.<br/>
     * @summary activate ngo
     * @param {string} authorization Access Token
     * @param {number} ngoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NGOAPIApi
     */
    public apiV2NgoActivateNgoIdngoIdPatch(authorization: string, ngoId: number, options?: any) {
        return NGOAPIApiFp(this.configuration).apiV2NgoActivateNgoIdngoIdPatch(authorization, ngoId, options)(this.fetch, this.basePath);
    }

    /**
     * Adds an NGO.<br/>This API creates a row in ngo table containing a new NGO information.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>Adding website is optional.<br/>For logoUrl ypu have to upload a file.<br/>Adding multiple phone numbers is allowed.<br/>They must be comma separated and without any spaces like the example bellow:<br/>[number],[number],...<br/>
     * @summary add ngo
     * @param {string} authorization Access Token
     * @param {number} cityId
     * @param {string} name
     * @param {string} postalAddress
     * @param {string} emailAddress
     * @param {string} phoneNumber
     * @param {any} logoUrl
     * @param {string} [website]
     * @param {number} [balance]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NGOAPIApi
     */
    public apiV2NgoAddPost(authorization: string, cityId: number, name: string, postalAddress: string, emailAddress: string, phoneNumber: string, logoUrl: any, website?: string, balance?: number, options?: any) {
        return NGOAPIApiFp(this.configuration).apiV2NgoAddPost(authorization, cityId, name, postalAddress, emailAddress, phoneNumber, logoUrl, website, balance, options)(this.fetch, this.basePath);
    }

    /**
     * Returns information of all NGOs in a json.<br/>Json key is NGO id and json value is NGO object.<br/>Calling this API only affects ngo table by selecting rows from it.<br/>
     * @summary get all ngos
     * @param {string} authorization Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NGOAPIApi
     */
    public apiV2NgoAllGet(authorization: string, options?: any) {
        return NGOAPIApiFp(this.configuration).apiV2NgoAllGet(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Deactivates an active NGO.<br/>Calling this API only affects ngo table by updating a row.<br/>
     * @summary deactivate ngo
     * @param {number} ngoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NGOAPIApi
     */
    public apiV2NgoDeactivateNgoIdngoIdPatch(ngoId: number, options?: any) {
        return NGOAPIApiFp(this.configuration).apiV2NgoDeactivateNgoIdngoIdPatch(ngoId, options)(this.fetch, this.basePath);
    }

    /**
     * Deletes a specific NGO.<br/>Calling this API only affects ngo table by updating a row and set isDeleted tag true.<br/>We do not fully delete any rows.<br/>
     * @summary delete ngo
     * @param {string} authorization Access Token
     * @param {number} ngoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NGOAPIApi
     */
    public apiV2NgoDeleteNgoIdngoIdPatch(authorization: string, ngoId: number, options?: any) {
        return NGOAPIApiFp(this.configuration).apiV2NgoDeleteNgoIdngoIdPatch(authorization, ngoId, options)(this.fetch, this.basePath);
    }

    /**
     * Returns information of an NGO with given id as a json object.<br/>Calling this API only affects ngo table by selecting a single row from it.<br/>
     * @summary get ngo by id
     * @param {string} authorization Access Token
     * @param {number} ngoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NGOAPIApi
     */
    public apiV2NgoNgoIdngoIdGet(authorization: string, ngoId: number, options?: any) {
        return NGOAPIApiFp(this.configuration).apiV2NgoNgoIdngoIdGet(authorization, ngoId, options)(this.fetch, this.basePath);
    }

    /**
     * All the fields are optional.<br/>You can fill every field you want to change, and it will update the desired NGO.<br/>Calling this API only affects ngo table by updating a row.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>For logoUrl you have to upload a file.<br/>
     * @summary update ngo
     * @param {string} authorization Access Token
     * @param {number} ngoId
     * @param {number} [cityId]
     * @param {string} [name]
     * @param {string} [website]
     * @param {string} [postalAddress]
     * @param {string} [emailAddress]
     * @param {string} [phoneNumber]
     * @param {any} [logoUrl]
     * @param {number} [balance]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NGOAPIApi
     */
    public apiV2NgoUpdateNgoIdngoIdPatch(authorization: string, ngoId: number, cityId?: number, name?: string, website?: string, postalAddress?: string, emailAddress?: string, phoneNumber?: string, logoUrl?: any, balance?: number, options?: any) {
        return NGOAPIApiFp(this.configuration).apiV2NgoUpdateNgoIdngoIdPatch(authorization, ngoId, cityId, name, website, postalAddress, emailAddress, phoneNumber, logoUrl, balance, options)(this.fetch, this.basePath);
    }

}

/**
 * NakamaAPIApi - fetch parameter creator
 * @export
 */
export const NakamaAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <br/>
         * @summary Submit eth transaction for a need (Nakama)
         * @param {string} txHash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NakamaTxHashPost(txHash: string, options: any = {}): FetchArgs {
            // verify required parameter 'txHash' is not null or undefined
            if (txHash === null || txHash === undefined) {
                throw new RequiredError('txHash', 'Required parameter txHash was null or undefined when calling apiV2NakamaTxHashPost.');
            }
            const localVarPath = `/api/v2/nakama/{tx_hash}`
                .replace(`{${"tx_hash"}}`, encodeURIComponent(String(txHash)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NakamaAPIApi - functional programming interface
 * @export
 */
export const NakamaAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         * <br/>
         * @summary Submit eth transaction for a need (Nakama)
         * @param {string} txHash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NakamaTxHashPost(txHash: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NakamaAPIApiFetchParamCreator(configuration).apiV2NakamaTxHashPost(txHash, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NakamaAPIApi - factory interface
 * @export
 */
export const NakamaAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * <br/>
         * @summary Submit eth transaction for a need (Nakama)
         * @param {string} txHash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NakamaTxHashPost(txHash: string, options?: any) {
            return NakamaAPIApiFp(configuration).apiV2NakamaTxHashPost(txHash, options)(fetch, basePath);
        },
    };
};

/**
 * NakamaAPIApi - object-oriented interface
 * @export
 * @class NakamaAPIApi
 * @extends {BaseAPI}
 */
export class NakamaAPIApi extends BaseAPI {
    /**
     * <br/>
     * @summary Submit eth transaction for a need (Nakama)
     * @param {string} txHash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NakamaAPIApi
     */
    public apiV2NakamaTxHashPost(txHash: string, options?: any) {
        return NakamaAPIApiFp(this.configuration).apiV2NakamaTxHashPost(txHash, options)(this.fetch, this.basePath);
    }

}

/**
 * NeedAPIApi - fetch parameter creator
 * @export
 */
export const NeedAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Confirms a need, so you can add a payment for it and add it to a confirmed child but you cannot update its price (cost) anymore.<br/>Calling this API affects need, child and social_worker tables.<br/>
         * @summary confirm a need
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedConfirmNeedIdneedIdPatch(authorization: string, needId: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2NeedConfirmNeedIdneedIdPatch.');
            }
            // verify required parameter 'needId' is not null or undefined
            if (needId === null || needId === undefined) {
                throw new RequiredError('needId', 'Required parameter needId was null or undefined when calling apiV2NeedConfirmNeedIdneedIdPatch.');
            }
            const localVarPath = `/api/v2/need/confirm/needId={need_id}`
                .replace(`{${"need_id"}}`, encodeURIComponent(String(needId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a need by setting its isDeleted tag true.<br/>It also delete all impacts and occurrences of this need in whole database.<br/>It is only possible to delete the needs without any payments.<br/>Deleting is managed by isDeleted tag everywhere, so we do not fully delete anything.<br/>Calling this API affects need, need_family and child_need tables.<br/>
         * @summary delete a need
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedDeleteNeedIdneedIdPatch(authorization: string, needId: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2NeedDeleteNeedIdneedIdPatch.');
            }
            // verify required parameter 'needId' is not null or undefined
            if (needId === null || needId === undefined) {
                throw new RequiredError('needId', 'Required parameter needId was null or undefined when calling apiV2NeedDeleteNeedIdneedIdPatch.');
            }
            const localVarPath = `/api/v2/need/delete/needId={need_id}`
                .replace(`{${"need_id"}}`, encodeURIComponent(String(needId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information of a need with given id as a json object.<br/>Calling this API affects need, child_need and need_family and user tables.<br/>Confirm parameter determines how do you want the result:<br/>[0]not onfirmed, [1]confirmed, [2]both<br/>
         * @summary get need by id
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedNeedIdneedIdGet(authorization: string, needId: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2NeedNeedIdneedIdGet.');
            }
            // verify required parameter 'needId' is not null or undefined
            if (needId === null || needId === undefined) {
                throw new RequiredError('needId', 'Required parameter needId was null or undefined when calling apiV2NeedNeedIdneedIdGet.');
            }
            const localVarPath = `/api/v2/need/needId={need_id}`
                .replace(`{${"need_id"}}`, encodeURIComponent(String(needId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a need.<br/>It is possible to have multiple receipts, but each time you can upload one receipt, but their addresses will be saved as a comma separated string in db.<br/>You have to upload a file for receipts and imageUrl.<br/>Calling this API affects need table only.<br/>Adding affiliateLinkUrl and receipts are optional.<br/>type codes: [0]donate, [1]affiliate<br/>
         * @summary add need
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {string} nameTranslations {\&quot;en\&quot;: \&quot;Bob\&quot;, \&quot;fa\&quot;: \&quot;بابک\&quot;}
         * @param {string} descriptionTranslations {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
         * @param {number} category
         * @param {boolean} isUrgent
         * @param {number} cost
         * @param {number} type
         * @param {number} [swId]
         * @param {any} [imageUrl]
         * @param {string} [link]
         * @param {string} [affiliateLinkUrl]
         * @param {any} [receipts]
         * @param {number} [doingDuration]
         * @param {string} [details]
         * @param {string} [informations]
         * @param {string} [deliveryDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedPost(authorization: string, childId: number, nameTranslations: string, descriptionTranslations: string, category: number, isUrgent: boolean, cost: number, type: number, swId?: number, imageUrl?: any, link?: string, affiliateLinkUrl?: string, receipts?: any, doingDuration?: number, details?: string, informations?: string, deliveryDate?: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2NeedPost.');
            }
            // verify required parameter 'childId' is not null or undefined
            if (childId === null || childId === undefined) {
                throw new RequiredError('childId', 'Required parameter childId was null or undefined when calling apiV2NeedPost.');
            }
            // verify required parameter 'nameTranslations' is not null or undefined
            if (nameTranslations === null || nameTranslations === undefined) {
                throw new RequiredError('nameTranslations', 'Required parameter nameTranslations was null or undefined when calling apiV2NeedPost.');
            }
            // verify required parameter 'descriptionTranslations' is not null or undefined
            if (descriptionTranslations === null || descriptionTranslations === undefined) {
                throw new RequiredError('descriptionTranslations', 'Required parameter descriptionTranslations was null or undefined when calling apiV2NeedPost.');
            }
            // verify required parameter 'category' is not null or undefined
            if (category === null || category === undefined) {
                throw new RequiredError('category', 'Required parameter category was null or undefined when calling apiV2NeedPost.');
            }
            // verify required parameter 'isUrgent' is not null or undefined
            if (isUrgent === null || isUrgent === undefined) {
                throw new RequiredError('isUrgent', 'Required parameter isUrgent was null or undefined when calling apiV2NeedPost.');
            }
            // verify required parameter 'cost' is not null or undefined
            if (cost === null || cost === undefined) {
                throw new RequiredError('cost', 'Required parameter cost was null or undefined when calling apiV2NeedPost.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type', 'Required parameter type was null or undefined when calling apiV2NeedPost.');
            }
            const localVarPath = `/api/v2/need/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (childId !== undefined) {
                localVarFormParams.set('child_id', childId as any);
            }

            if (swId !== undefined) {
                localVarFormParams.set('sw_id', swId as any);
            }

            if (imageUrl !== undefined) {
                localVarFormParams.set('imageUrl', imageUrl as any);
            }

            if (nameTranslations !== undefined) {
                localVarFormParams.set('name_translations', nameTranslations as any);
            }

            if (descriptionTranslations !== undefined) {
                localVarFormParams.set('description_translations', descriptionTranslations as any);
            }

            if (category !== undefined) {
                localVarFormParams.set('category', category as any);
            }

            if (isUrgent !== undefined) {
                localVarFormParams.set('isUrgent', isUrgent as any);
            }

            if (cost !== undefined) {
                localVarFormParams.set('cost', cost as any);
            }

            if (type !== undefined) {
                localVarFormParams.set('type', type as any);
            }

            if (link !== undefined) {
                localVarFormParams.set('link', link as any);
            }

            if (affiliateLinkUrl !== undefined) {
                localVarFormParams.set('affiliateLinkUrl', affiliateLinkUrl as any);
            }

            if (receipts !== undefined) {
                localVarFormParams.set('receipts', receipts as any);
            }

            if (doingDuration !== undefined) {
                localVarFormParams.set('doing_duration', doingDuration as any);
            }

            if (details !== undefined) {
                localVarFormParams.set('details', details as any);
            }

            if (informations !== undefined) {
                localVarFormParams.set('informations', informations as any);
            }

            if (deliveryDate !== undefined) {
                localVarFormParams.set('delivery_date', deliveryDate as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * All fields are optional.<br/>You cannot change cost for confirmed needs but it is ok with not confirmed needs.<br/>It is possible to have multiple receipts, but each time you can upload one receipt, but their addresses will be saved as a comma separated string in db.<br/>You have to upload a file for receipts and imageUrl.<br/>Calling this API affects need table only.<br/>
         * @summary update need
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {any} [imageUrl]
         * @param {string} [nameTranslations] {\&quot;en\&quot;: \&quot;Bob\&quot;, \&quot;fa\&quot;: \&quot;بابک\&quot;}
         * @param {string} [descriptionTranslations] {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
         * @param {number} [category]
         * @param {boolean} [isUrgent]
         * @param {number} [cost]
         * @param {number} [purchaseCost] Can be set only in p3 (product status 3)
         * @param {number} [type]
         * @param {string} [link]
         * @param {string} [affiliateLinkUrl]
         * @param {any} [receipts]
         * @param {number} [status]
         * @param {number} [doingDuration]
         * @param {string} [details]
         * @param {string} [expectedDeliveryDate]
         * @param {string} [ngoDeliveryDate]
         * @param {string} [dkc] Digikala purchase code (only in s3)
         * @param {string} [informations]
         * @param {string} [bankTrackId] Only for services, S2 -&gt; S3
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedUpdateNeedIdneedIdPatch(authorization: string, needId: number, imageUrl?: any, nameTranslations?: string, descriptionTranslations?: string, category?: number, isUrgent?: boolean, cost?: number, purchaseCost?: number, type?: number, link?: string, affiliateLinkUrl?: string, receipts?: any, status?: number, doingDuration?: number, details?: string, expectedDeliveryDate?: string, ngoDeliveryDate?: string, dkc?: string, informations?: string, bankTrackId?: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2NeedUpdateNeedIdneedIdPatch.');
            }
            // verify required parameter 'needId' is not null or undefined
            if (needId === null || needId === undefined) {
                throw new RequiredError('needId', 'Required parameter needId was null or undefined when calling apiV2NeedUpdateNeedIdneedIdPatch.');
            }
            const localVarPath = `/api/v2/need/update/needId={need_id}`
                .replace(`{${"need_id"}}`, encodeURIComponent(String(needId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (imageUrl !== undefined) {
                localVarFormParams.set('imageUrl', imageUrl as any);
            }

            if (nameTranslations !== undefined) {
                localVarFormParams.set('name_translations', nameTranslations as any);
            }

            if (descriptionTranslations !== undefined) {
                localVarFormParams.set('description_translations', descriptionTranslations as any);
            }

            if (category !== undefined) {
                localVarFormParams.set('category', category as any);
            }

            if (isUrgent !== undefined) {
                localVarFormParams.set('isUrgent', isUrgent as any);
            }

            if (cost !== undefined) {
                localVarFormParams.set('cost', cost as any);
            }

            if (purchaseCost !== undefined) {
                localVarFormParams.set('purchase_cost', purchaseCost as any);
            }

            if (type !== undefined) {
                localVarFormParams.set('type', type as any);
            }

            if (link !== undefined) {
                localVarFormParams.set('link', link as any);
            }

            if (affiliateLinkUrl !== undefined) {
                localVarFormParams.set('affiliateLinkUrl', affiliateLinkUrl as any);
            }

            if (receipts !== undefined) {
                localVarFormParams.set('receipts', receipts as any);
            }

            if (status !== undefined) {
                localVarFormParams.set('status', status as any);
            }

            if (doingDuration !== undefined) {
                localVarFormParams.set('doing_duration', doingDuration as any);
            }

            if (details !== undefined) {
                localVarFormParams.set('details', details as any);
            }

            if (expectedDeliveryDate !== undefined) {
                localVarFormParams.set('expected_delivery_date', expectedDeliveryDate as any);
            }

            if (ngoDeliveryDate !== undefined) {
                localVarFormParams.set('ngo_delivery_date', ngoDeliveryDate as any);
            }

            if (dkc !== undefined) {
                localVarFormParams.set('dkc', dkc as any);
            }

            if (informations !== undefined) {
                localVarFormParams.set('informations', informations as any);
            }

            if (bankTrackId !== undefined) {
                localVarFormParams.set('bank_track_id', bankTrackId as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information of all needs as a json object.<br/>Calling this API affects need, child_need and need_family and user tables.<br/>[0]not onfirmed, [1]confirmed, [2]both<br/><br/>Done parameter determines how do you want the result:<br/>[0]not done, [1]done, [2]all<br/>
         * @summary get all needs
         * @param {string} authorization Access Token
         * @param {number} [X_SKIP]
         * @param {number} [X_TAKE] Max 500
         * @param {boolean} [isConfirmed]
         * @param {boolean} [isDone]
         * @param {boolean} [isReported]
         * @param {string} [status]
         * @param {number} [type]
         * @param {number} [ngoId]
         * @param {boolean} [isChildConfirmed]
         * @param {boolean} [unpayable]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedsGet(authorization: string, X_SKIP?: number, X_TAKE?: number, isConfirmed?: boolean, isDone?: boolean, isReported?: boolean, status?: string, type?: number, ngoId?: number, isChildConfirmed?: boolean, unpayable?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2NeedsGet.');
            }
            const localVarPath = `/api/v2/needs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (isConfirmed !== undefined) {
                localVarQueryParameter['isConfirmed'] = isConfirmed;
            }

            if (isDone !== undefined) {
                localVarQueryParameter['isDone'] = isDone;
            }

            if (isReported !== undefined) {
                localVarQueryParameter['isReported'] = isReported;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (ngoId !== undefined) {
                localVarQueryParameter['ngoId'] = ngoId;
            }

            if (isChildConfirmed !== undefined) {
                localVarQueryParameter['isChildConfirmed'] = isChildConfirmed;
            }

            if (unpayable !== undefined) {
                localVarQueryParameter['unpayable'] = unpayable;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (X_SKIP !== undefined && X_SKIP !== null) {
                localVarHeaderParameter['X_SKIP'] = String(X_SKIP);
            }

            if (X_TAKE !== undefined && X_TAKE !== null) {
                localVarHeaderParameter['X_TAKE'] = String(X_TAKE);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br/>
         * @summary List receipts for a need
         * @param {any} id
         * @param {string} [authorization] Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedsIdReceiptsGet(id: any, authorization?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2NeedsIdReceiptsGet.');
            }
            const localVarPath = `/api/v2/needs/{id}/receipts`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a new receipt for a need
         * @param {string} authorization Access Token
         * @param {any} id
         * @param {any} attachment
         * @param {string} title max 128 char
         * @param {string} [code] unique, max 128 char
         * @param {string} [description] max 1024 char
         * @param {boolean} [isPublic] default&#x3D;false, only SUPER_ADMIN, SAY_SUPERVISOR, ADMIN can set to true
         * @param {number} [needStatus]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedsIdReceiptsPost(authorization: string, id: any, attachment: any, title: string, code?: string, description?: string, isPublic?: boolean, needStatus?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2NeedsIdReceiptsPost.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2NeedsIdReceiptsPost.');
            }
            // verify required parameter 'attachment' is not null or undefined
            if (attachment === null || attachment === undefined) {
                throw new RequiredError('attachment', 'Required parameter attachment was null or undefined when calling apiV2NeedsIdReceiptsPost.');
            }
            // verify required parameter 'title' is not null or undefined
            if (title === null || title === undefined) {
                throw new RequiredError('title', 'Required parameter title was null or undefined when calling apiV2NeedsIdReceiptsPost.');
            }
            const localVarPath = `/api/v2/needs/{id}/receipts`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (code !== undefined) {
                localVarFormParams.set('code', code as any);
            }

            if (attachment !== undefined) {
                localVarFormParams.set('attachment', attachment as any);
            }

            if (description !== undefined) {
                localVarFormParams.set('description', description as any);
            }

            if (title !== undefined) {
                localVarFormParams.set('title', title as any);
            }

            if (isPublic !== undefined) {
                localVarFormParams.set('isPublic', isPublic as any);
            }

            if (needStatus !== undefined) {
                localVarFormParams.set('needStatus', needStatus as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br/>
         * @summary Delete a receipt from a need, not the receipt itself!
         * @param {string} authorization Access Token
         * @param {any} id
         * @param {any} receiptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedsIdReceiptsReceiptIdDelete(authorization: string, id: any, receiptId: any, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2NeedsIdReceiptsReceiptIdDelete.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2NeedsIdReceiptsReceiptIdDelete.');
            }
            // verify required parameter 'receiptId' is not null or undefined
            if (receiptId === null || receiptId === undefined) {
                throw new RequiredError('receiptId', 'Required parameter receiptId was null or undefined when calling apiV2NeedsIdReceiptsReceiptIdDelete.');
            }
            const localVarPath = `/api/v2/needs/{id}/receipts/{receiptId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"receiptId"}}`, encodeURIComponent(String(receiptId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NeedAPIApi - functional programming interface
 * @export
 */
export const NeedAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Confirms a need, so you can add a payment for it and add it to a confirmed child but you cannot update its price (cost) anymore.<br/>Calling this API affects need, child and social_worker tables.<br/>
         * @summary confirm a need
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedConfirmNeedIdneedIdPatch(authorization: string, needId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NeedModel> {
            const localVarFetchArgs = NeedAPIApiFetchParamCreator(configuration).apiV2NeedConfirmNeedIdneedIdPatch(authorization, needId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a need by setting its isDeleted tag true.<br/>It also delete all impacts and occurrences of this need in whole database.<br/>It is only possible to delete the needs without any payments.<br/>Deleting is managed by isDeleted tag everywhere, so we do not fully delete anything.<br/>Calling this API affects need, need_family and child_need tables.<br/>
         * @summary delete a need
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedDeleteNeedIdneedIdPatch(authorization: string, needId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NeedAPIApiFetchParamCreator(configuration).apiV2NeedDeleteNeedIdneedIdPatch(authorization, needId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns information of a need with given id as a json object.<br/>Calling this API affects need, child_need and need_family and user tables.<br/>Confirm parameter determines how do you want the result:<br/>[0]not onfirmed, [1]confirmed, [2]both<br/>
         * @summary get need by id
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedNeedIdneedIdGet(authorization: string, needId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NeedModel> {
            const localVarFetchArgs = NeedAPIApiFetchParamCreator(configuration).apiV2NeedNeedIdneedIdGet(authorization, needId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Adds a need.<br/>It is possible to have multiple receipts, but each time you can upload one receipt, but their addresses will be saved as a comma separated string in db.<br/>You have to upload a file for receipts and imageUrl.<br/>Calling this API affects need table only.<br/>Adding affiliateLinkUrl and receipts are optional.<br/>type codes: [0]donate, [1]affiliate<br/>
         * @summary add need
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {string} nameTranslations {\&quot;en\&quot;: \&quot;Bob\&quot;, \&quot;fa\&quot;: \&quot;بابک\&quot;}
         * @param {string} descriptionTranslations {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
         * @param {number} category
         * @param {boolean} isUrgent
         * @param {number} cost
         * @param {number} type
         * @param {number} [swId]
         * @param {any} [imageUrl]
         * @param {string} [link]
         * @param {string} [affiliateLinkUrl]
         * @param {any} [receipts]
         * @param {number} [doingDuration]
         * @param {string} [details]
         * @param {string} [informations]
         * @param {string} [deliveryDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedPost(authorization: string, childId: number, nameTranslations: string, descriptionTranslations: string, category: number, isUrgent: boolean, cost: number, type: number, swId?: number, imageUrl?: any, link?: string, affiliateLinkUrl?: string, receipts?: any, doingDuration?: number, details?: string, informations?: string, deliveryDate?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NeedAPIApiFetchParamCreator(configuration).apiV2NeedPost(authorization, childId, nameTranslations, descriptionTranslations, category, isUrgent, cost, type, swId, imageUrl, link, affiliateLinkUrl, receipts, doingDuration, details, informations, deliveryDate, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * All fields are optional.<br/>You cannot change cost for confirmed needs but it is ok with not confirmed needs.<br/>It is possible to have multiple receipts, but each time you can upload one receipt, but their addresses will be saved as a comma separated string in db.<br/>You have to upload a file for receipts and imageUrl.<br/>Calling this API affects need table only.<br/>
         * @summary update need
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {any} [imageUrl]
         * @param {string} [nameTranslations] {\&quot;en\&quot;: \&quot;Bob\&quot;, \&quot;fa\&quot;: \&quot;بابک\&quot;}
         * @param {string} [descriptionTranslations] {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
         * @param {number} [category]
         * @param {boolean} [isUrgent]
         * @param {number} [cost]
         * @param {number} [purchaseCost] Can be set only in p3 (product status 3)
         * @param {number} [type]
         * @param {string} [link]
         * @param {string} [affiliateLinkUrl]
         * @param {any} [receipts]
         * @param {number} [status]
         * @param {number} [doingDuration]
         * @param {string} [details]
         * @param {string} [expectedDeliveryDate]
         * @param {string} [ngoDeliveryDate]
         * @param {string} [dkc] Digikala purchase code (only in s3)
         * @param {string} [informations]
         * @param {string} [bankTrackId] Only for services, S2 -&gt; S3
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedUpdateNeedIdneedIdPatch(authorization: string, needId: number, imageUrl?: any, nameTranslations?: string, descriptionTranslations?: string, category?: number, isUrgent?: boolean, cost?: number, purchaseCost?: number, type?: number, link?: string, affiliateLinkUrl?: string, receipts?: any, status?: number, doingDuration?: number, details?: string, expectedDeliveryDate?: string, ngoDeliveryDate?: string, dkc?: string, informations?: string, bankTrackId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NeedAPIApiFetchParamCreator(configuration).apiV2NeedUpdateNeedIdneedIdPatch(authorization, needId, imageUrl, nameTranslations, descriptionTranslations, category, isUrgent, cost, purchaseCost, type, link, affiliateLinkUrl, receipts, status, doingDuration, details, expectedDeliveryDate, ngoDeliveryDate, dkc, informations, bankTrackId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns information of all needs as a json object.<br/>Calling this API affects need, child_need and need_family and user tables.<br/>[0]not onfirmed, [1]confirmed, [2]both<br/><br/>Done parameter determines how do you want the result:<br/>[0]not done, [1]done, [2]all<br/>
         * @summary get all needs
         * @param {string} authorization Access Token
         * @param {number} [X_SKIP]
         * @param {number} [X_TAKE] Max 500
         * @param {boolean} [isConfirmed]
         * @param {boolean} [isDone]
         * @param {boolean} [isReported]
         * @param {string} [status]
         * @param {number} [type]
         * @param {number} [ngoId]
         * @param {boolean} [isChildConfirmed]
         * @param {boolean} [unpayable]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedsGet(authorization: string, X_SKIP?: number, X_TAKE?: number, isConfirmed?: boolean, isDone?: boolean, isReported?: boolean, status?: string, type?: number, ngoId?: number, isChildConfirmed?: boolean, unpayable?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = NeedAPIApiFetchParamCreator(configuration).apiV2NeedsGet(authorization, X_SKIP, X_TAKE, isConfirmed, isDone, isReported, status, type, ngoId, isChildConfirmed, unpayable, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * <br/>
         * @summary List receipts for a need
         * @param {any} id
         * @param {string} [authorization] Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedsIdReceiptsGet(id: any, authorization?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NeedAPIApiFetchParamCreator(configuration).apiV2NeedsIdReceiptsGet(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Create a new receipt for a need
         * @param {string} authorization Access Token
         * @param {any} id
         * @param {any} attachment
         * @param {string} title max 128 char
         * @param {string} [code] unique, max 128 char
         * @param {string} [description] max 1024 char
         * @param {boolean} [isPublic] default&#x3D;false, only SUPER_ADMIN, SAY_SUPERVISOR, ADMIN can set to true
         * @param {number} [needStatus]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedsIdReceiptsPost(authorization: string, id: any, attachment: any, title: string, code?: string, description?: string, isPublic?: boolean, needStatus?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NeedAPIApiFetchParamCreator(configuration).apiV2NeedsIdReceiptsPost(authorization, id, attachment, title, code, description, isPublic, needStatus, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * <br/>
         * @summary Delete a receipt from a need, not the receipt itself!
         * @param {string} authorization Access Token
         * @param {any} id
         * @param {any} receiptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedsIdReceiptsReceiptIdDelete(authorization: string, id: any, receiptId: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NeedAPIApiFetchParamCreator(configuration).apiV2NeedsIdReceiptsReceiptIdDelete(authorization, id, receiptId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NeedAPIApi - factory interface
 * @export
 */
export const NeedAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Confirms a need, so you can add a payment for it and add it to a confirmed child but you cannot update its price (cost) anymore.<br/>Calling this API affects need, child and social_worker tables.<br/>
         * @summary confirm a need
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedConfirmNeedIdneedIdPatch(authorization: string, needId: number, options?: any) {
            return NeedAPIApiFp(configuration).apiV2NeedConfirmNeedIdneedIdPatch(authorization, needId, options)(fetch, basePath);
        },
        /**
         * Deletes a need by setting its isDeleted tag true.<br/>It also delete all impacts and occurrences of this need in whole database.<br/>It is only possible to delete the needs without any payments.<br/>Deleting is managed by isDeleted tag everywhere, so we do not fully delete anything.<br/>Calling this API affects need, need_family and child_need tables.<br/>
         * @summary delete a need
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedDeleteNeedIdneedIdPatch(authorization: string, needId: number, options?: any) {
            return NeedAPIApiFp(configuration).apiV2NeedDeleteNeedIdneedIdPatch(authorization, needId, options)(fetch, basePath);
        },
        /**
         * Returns information of a need with given id as a json object.<br/>Calling this API affects need, child_need and need_family and user tables.<br/>Confirm parameter determines how do you want the result:<br/>[0]not onfirmed, [1]confirmed, [2]both<br/>
         * @summary get need by id
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedNeedIdneedIdGet(authorization: string, needId: number, options?: any) {
            return NeedAPIApiFp(configuration).apiV2NeedNeedIdneedIdGet(authorization, needId, options)(fetch, basePath);
        },
        /**
         * Adds a need.<br/>It is possible to have multiple receipts, but each time you can upload one receipt, but their addresses will be saved as a comma separated string in db.<br/>You have to upload a file for receipts and imageUrl.<br/>Calling this API affects need table only.<br/>Adding affiliateLinkUrl and receipts are optional.<br/>type codes: [0]donate, [1]affiliate<br/>
         * @summary add need
         * @param {string} authorization Access Token
         * @param {number} childId
         * @param {string} nameTranslations {\&quot;en\&quot;: \&quot;Bob\&quot;, \&quot;fa\&quot;: \&quot;بابک\&quot;}
         * @param {string} descriptionTranslations {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
         * @param {number} category
         * @param {boolean} isUrgent
         * @param {number} cost
         * @param {number} type
         * @param {number} [swId]
         * @param {any} [imageUrl]
         * @param {string} [link]
         * @param {string} [affiliateLinkUrl]
         * @param {any} [receipts]
         * @param {number} [doingDuration]
         * @param {string} [details]
         * @param {string} [informations]
         * @param {string} [deliveryDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedPost(authorization: string, childId: number, nameTranslations: string, descriptionTranslations: string, category: number, isUrgent: boolean, cost: number, type: number, swId?: number, imageUrl?: any, link?: string, affiliateLinkUrl?: string, receipts?: any, doingDuration?: number, details?: string, informations?: string, deliveryDate?: string, options?: any) {
            return NeedAPIApiFp(configuration).apiV2NeedPost(authorization, childId, nameTranslations, descriptionTranslations, category, isUrgent, cost, type, swId, imageUrl, link, affiliateLinkUrl, receipts, doingDuration, details, informations, deliveryDate, options)(fetch, basePath);
        },
        /**
         * All fields are optional.<br/>You cannot change cost for confirmed needs but it is ok with not confirmed needs.<br/>It is possible to have multiple receipts, but each time you can upload one receipt, but their addresses will be saved as a comma separated string in db.<br/>You have to upload a file for receipts and imageUrl.<br/>Calling this API affects need table only.<br/>
         * @summary update need
         * @param {string} authorization Access Token
         * @param {number} needId
         * @param {any} [imageUrl]
         * @param {string} [nameTranslations] {\&quot;en\&quot;: \&quot;Bob\&quot;, \&quot;fa\&quot;: \&quot;بابک\&quot;}
         * @param {string} [descriptionTranslations] {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
         * @param {number} [category]
         * @param {boolean} [isUrgent]
         * @param {number} [cost]
         * @param {number} [purchaseCost] Can be set only in p3 (product status 3)
         * @param {number} [type]
         * @param {string} [link]
         * @param {string} [affiliateLinkUrl]
         * @param {any} [receipts]
         * @param {number} [status]
         * @param {number} [doingDuration]
         * @param {string} [details]
         * @param {string} [expectedDeliveryDate]
         * @param {string} [ngoDeliveryDate]
         * @param {string} [dkc] Digikala purchase code (only in s3)
         * @param {string} [informations]
         * @param {string} [bankTrackId] Only for services, S2 -&gt; S3
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedUpdateNeedIdneedIdPatch(authorization: string, needId: number, imageUrl?: any, nameTranslations?: string, descriptionTranslations?: string, category?: number, isUrgent?: boolean, cost?: number, purchaseCost?: number, type?: number, link?: string, affiliateLinkUrl?: string, receipts?: any, status?: number, doingDuration?: number, details?: string, expectedDeliveryDate?: string, ngoDeliveryDate?: string, dkc?: string, informations?: string, bankTrackId?: string, options?: any) {
            return NeedAPIApiFp(configuration).apiV2NeedUpdateNeedIdneedIdPatch(authorization, needId, imageUrl, nameTranslations, descriptionTranslations, category, isUrgent, cost, purchaseCost, type, link, affiliateLinkUrl, receipts, status, doingDuration, details, expectedDeliveryDate, ngoDeliveryDate, dkc, informations, bankTrackId, options)(fetch, basePath);
        },
        /**
         * Returns information of all needs as a json object.<br/>Calling this API affects need, child_need and need_family and user tables.<br/>[0]not onfirmed, [1]confirmed, [2]both<br/><br/>Done parameter determines how do you want the result:<br/>[0]not done, [1]done, [2]all<br/>
         * @summary get all needs
         * @param {string} authorization Access Token
         * @param {number} [X_SKIP]
         * @param {number} [X_TAKE] Max 500
         * @param {boolean} [isConfirmed]
         * @param {boolean} [isDone]
         * @param {boolean} [isReported]
         * @param {string} [status]
         * @param {number} [type]
         * @param {number} [ngoId]
         * @param {boolean} [isChildConfirmed]
         * @param {boolean} [unpayable]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedsGet(authorization: string, X_SKIP?: number, X_TAKE?: number, isConfirmed?: boolean, isDone?: boolean, isReported?: boolean, status?: string, type?: number, ngoId?: number, isChildConfirmed?: boolean, unpayable?: boolean, options?: any) {
            return NeedAPIApiFp(configuration).apiV2NeedsGet(authorization, X_SKIP, X_TAKE, isConfirmed, isDone, isReported, status, type, ngoId, isChildConfirmed, unpayable, options)(fetch, basePath);
        },
        /**
         * <br/>
         * @summary List receipts for a need
         * @param {any} id
         * @param {string} [authorization] Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedsIdReceiptsGet(id: any, authorization?: string, options?: any) {
            return NeedAPIApiFp(configuration).apiV2NeedsIdReceiptsGet(id, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Create a new receipt for a need
         * @param {string} authorization Access Token
         * @param {any} id
         * @param {any} attachment
         * @param {string} title max 128 char
         * @param {string} [code] unique, max 128 char
         * @param {string} [description] max 1024 char
         * @param {boolean} [isPublic] default&#x3D;false, only SUPER_ADMIN, SAY_SUPERVISOR, ADMIN can set to true
         * @param {number} [needStatus]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedsIdReceiptsPost(authorization: string, id: any, attachment: any, title: string, code?: string, description?: string, isPublic?: boolean, needStatus?: number, options?: any) {
            return NeedAPIApiFp(configuration).apiV2NeedsIdReceiptsPost(authorization, id, attachment, title, code, description, isPublic, needStatus, options)(fetch, basePath);
        },
        /**
         * <br/>
         * @summary Delete a receipt from a need, not the receipt itself!
         * @param {string} authorization Access Token
         * @param {any} id
         * @param {any} receiptId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedsIdReceiptsReceiptIdDelete(authorization: string, id: any, receiptId: any, options?: any) {
            return NeedAPIApiFp(configuration).apiV2NeedsIdReceiptsReceiptIdDelete(authorization, id, receiptId, options)(fetch, basePath);
        },
    };
};

/**
 * NeedAPIApi - object-oriented interface
 * @export
 * @class NeedAPIApi
 * @extends {BaseAPI}
 */
export class NeedAPIApi extends BaseAPI {
    /**
     * Confirms a need, so you can add a payment for it and add it to a confirmed child but you cannot update its price (cost) anymore.<br/>Calling this API affects need, child and social_worker tables.<br/>
     * @summary confirm a need
     * @param {string} authorization Access Token
     * @param {number} needId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NeedAPIApi
     */
    public apiV2NeedConfirmNeedIdneedIdPatch(authorization: string, needId: number, options?: any) {
        return NeedAPIApiFp(this.configuration).apiV2NeedConfirmNeedIdneedIdPatch(authorization, needId, options)(this.fetch, this.basePath);
    }

    /**
     * Deletes a need by setting its isDeleted tag true.<br/>It also delete all impacts and occurrences of this need in whole database.<br/>It is only possible to delete the needs without any payments.<br/>Deleting is managed by isDeleted tag everywhere, so we do not fully delete anything.<br/>Calling this API affects need, need_family and child_need tables.<br/>
     * @summary delete a need
     * @param {string} authorization Access Token
     * @param {number} needId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NeedAPIApi
     */
    public apiV2NeedDeleteNeedIdneedIdPatch(authorization: string, needId: number, options?: any) {
        return NeedAPIApiFp(this.configuration).apiV2NeedDeleteNeedIdneedIdPatch(authorization, needId, options)(this.fetch, this.basePath);
    }

    /**
     * Returns information of a need with given id as a json object.<br/>Calling this API affects need, child_need and need_family and user tables.<br/>Confirm parameter determines how do you want the result:<br/>[0]not onfirmed, [1]confirmed, [2]both<br/>
     * @summary get need by id
     * @param {string} authorization Access Token
     * @param {number} needId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NeedAPIApi
     */
    public apiV2NeedNeedIdneedIdGet(authorization: string, needId: number, options?: any) {
        return NeedAPIApiFp(this.configuration).apiV2NeedNeedIdneedIdGet(authorization, needId, options)(this.fetch, this.basePath);
    }

    /**
     * Adds a need.<br/>It is possible to have multiple receipts, but each time you can upload one receipt, but their addresses will be saved as a comma separated string in db.<br/>You have to upload a file for receipts and imageUrl.<br/>Calling this API affects need table only.<br/>Adding affiliateLinkUrl and receipts are optional.<br/>type codes: [0]donate, [1]affiliate<br/>
     * @summary add need
     * @param {string} authorization Access Token
     * @param {number} childId
     * @param {string} nameTranslations {\&quot;en\&quot;: \&quot;Bob\&quot;, \&quot;fa\&quot;: \&quot;بابک\&quot;}
     * @param {string} descriptionTranslations {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
     * @param {number} category
     * @param {boolean} isUrgent
     * @param {number} cost
     * @param {number} type
     * @param {number} [swId]
     * @param {any} [imageUrl]
     * @param {string} [link]
     * @param {string} [affiliateLinkUrl]
     * @param {any} [receipts]
     * @param {number} [doingDuration]
     * @param {string} [details]
     * @param {string} [informations]
     * @param {string} [deliveryDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NeedAPIApi
     */
    public apiV2NeedPost(authorization: string, childId: number, nameTranslations: string, descriptionTranslations: string, category: number, isUrgent: boolean, cost: number, type: number, swId?: number, imageUrl?: any, link?: string, affiliateLinkUrl?: string, receipts?: any, doingDuration?: number, details?: string, informations?: string, deliveryDate?: string, options?: any) {
        return NeedAPIApiFp(this.configuration).apiV2NeedPost(authorization, childId, nameTranslations, descriptionTranslations, category, isUrgent, cost, type, swId, imageUrl, link, affiliateLinkUrl, receipts, doingDuration, details, informations, deliveryDate, options)(this.fetch, this.basePath);
    }

    /**
     * All fields are optional.<br/>You cannot change cost for confirmed needs but it is ok with not confirmed needs.<br/>It is possible to have multiple receipts, but each time you can upload one receipt, but their addresses will be saved as a comma separated string in db.<br/>You have to upload a file for receipts and imageUrl.<br/>Calling this API affects need table only.<br/>
     * @summary update need
     * @param {string} authorization Access Token
     * @param {number} needId
     * @param {any} [imageUrl]
     * @param {string} [nameTranslations] {\&quot;en\&quot;: \&quot;Bob\&quot;, \&quot;fa\&quot;: \&quot;بابک\&quot;}
     * @param {string} [descriptionTranslations] {\&quot;en\&quot;: \&quot;Lorem ipsome\&quot;, \&quot;fa\&quot;: \&quot;لورم ایپسون\&quot;}
     * @param {number} [category]
     * @param {boolean} [isUrgent]
     * @param {number} [cost]
     * @param {number} [purchaseCost] Can be set only in p3 (product status 3)
     * @param {number} [type]
     * @param {string} [link]
     * @param {string} [affiliateLinkUrl]
     * @param {any} [receipts]
     * @param {number} [status]
     * @param {number} [doingDuration]
     * @param {string} [details]
     * @param {string} [expectedDeliveryDate]
     * @param {string} [ngoDeliveryDate]
     * @param {string} [dkc] Digikala purchase code (only in s3)
     * @param {string} [informations]
     * @param {string} [bankTrackId] Only for services, S2 -&gt; S3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NeedAPIApi
     */
    public apiV2NeedUpdateNeedIdneedIdPatch(authorization: string, needId: number, imageUrl?: any, nameTranslations?: string, descriptionTranslations?: string, category?: number, isUrgent?: boolean, cost?: number, purchaseCost?: number, type?: number, link?: string, affiliateLinkUrl?: string, receipts?: any, status?: number, doingDuration?: number, details?: string, expectedDeliveryDate?: string, ngoDeliveryDate?: string, dkc?: string, informations?: string, bankTrackId?: string, options?: any) {
        return NeedAPIApiFp(this.configuration).apiV2NeedUpdateNeedIdneedIdPatch(authorization, needId, imageUrl, nameTranslations, descriptionTranslations, category, isUrgent, cost, purchaseCost, type, link, affiliateLinkUrl, receipts, status, doingDuration, details, expectedDeliveryDate, ngoDeliveryDate, dkc, informations, bankTrackId, options)(this.fetch, this.basePath);
    }

    /**
     * Returns information of all needs as a json object.<br/>Calling this API affects need, child_need and need_family and user tables.<br/>[0]not onfirmed, [1]confirmed, [2]both<br/><br/>Done parameter determines how do you want the result:<br/>[0]not done, [1]done, [2]all<br/>
     * @summary get all needs
     * @param {string} authorization Access Token
     * @param {number} [X_SKIP]
     * @param {number} [X_TAKE] Max 500
     * @param {boolean} [isConfirmed]
     * @param {boolean} [isDone]
     * @param {boolean} [isReported]
     * @param {string} [status]
     * @param {number} [type]
     * @param {number} [ngoId]
     * @param {boolean} [isChildConfirmed]
     * @param {boolean} [unpayable]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NeedAPIApi
     */
    public apiV2NeedsGet(authorization: string, X_SKIP?: number, X_TAKE?: number, isConfirmed?: boolean, isDone?: boolean, isReported?: boolean, status?: string, type?: number, ngoId?: number, isChildConfirmed?: boolean, unpayable?: boolean, options?: any) {
        return NeedAPIApiFp(this.configuration).apiV2NeedsGet(authorization, X_SKIP, X_TAKE, isConfirmed, isDone, isReported, status, type, ngoId, isChildConfirmed, unpayable, options)(this.fetch, this.basePath);
    }

    /**
     * <br/>
     * @summary List receipts for a need
     * @param {any} id
     * @param {string} [authorization] Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NeedAPIApi
     */
    public apiV2NeedsIdReceiptsGet(id: any, authorization?: string, options?: any) {
        return NeedAPIApiFp(this.configuration).apiV2NeedsIdReceiptsGet(id, authorization, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Create a new receipt for a need
     * @param {string} authorization Access Token
     * @param {any} id
     * @param {any} attachment
     * @param {string} title max 128 char
     * @param {string} [code] unique, max 128 char
     * @param {string} [description] max 1024 char
     * @param {boolean} [isPublic] default&#x3D;false, only SUPER_ADMIN, SAY_SUPERVISOR, ADMIN can set to true
     * @param {number} [needStatus]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NeedAPIApi
     */
    public apiV2NeedsIdReceiptsPost(authorization: string, id: any, attachment: any, title: string, code?: string, description?: string, isPublic?: boolean, needStatus?: number, options?: any) {
        return NeedAPIApiFp(this.configuration).apiV2NeedsIdReceiptsPost(authorization, id, attachment, title, code, description, isPublic, needStatus, options)(this.fetch, this.basePath);
    }

    /**
     * <br/>
     * @summary Delete a receipt from a need, not the receipt itself!
     * @param {string} authorization Access Token
     * @param {any} id
     * @param {any} receiptId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NeedAPIApi
     */
    public apiV2NeedsIdReceiptsReceiptIdDelete(authorization: string, id: any, receiptId: any, options?: any) {
        return NeedAPIApiFp(this.configuration).apiV2NeedsIdReceiptsReceiptIdDelete(authorization, id, receiptId, options)(this.fetch, this.basePath);
    }

}

/**
 * NeedStatusUpdatesAPIApi - fetch parameter creator
 * @export
 */
export const NeedStatusUpdatesAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Orderin, Filtering, Pagination<br/>
         * @summary List all Need Status Updates
         * @param {string} authorization Access Token, Only Super Admin and SAY Supervisior
         * @param {number} [xTake] Number of results in one page
         * @param {number} [xSkip] Skip n result
         * @param {string} [orderBy] OrderBy column/columns, use - to revrse the order, like this -created,needId
         * @param {number} [needId] Filter by needId
         * @param {number} [swId] Filter by swId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedStatusUpdatesGet(authorization: string, xTake?: number, xSkip?: number, orderBy?: string, needId?: number, swId?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2NeedStatusUpdatesGet.');
            }
            const localVarPath = `/api/v2/need-status-updates`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (needId !== undefined) {
                localVarQueryParameter['needId'] = needId;
            }

            if (swId !== undefined) {
                localVarQueryParameter['swId'] = swId;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xTake !== undefined && xTake !== null) {
                localVarHeaderParameter['X_TAKE'] = String(xTake);
            }

            if (xSkip !== undefined && xSkip !== null) {
                localVarHeaderParameter['X_SKIP'] = String(xSkip);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NeedStatusUpdatesAPIApi - functional programming interface
 * @export
 */
export const NeedStatusUpdatesAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Orderin, Filtering, Pagination<br/>
         * @summary List all Need Status Updates
         * @param {string} authorization Access Token, Only Super Admin and SAY Supervisior
         * @param {number} [xTake] Number of results in one page
         * @param {number} [xSkip] Skip n result
         * @param {string} [orderBy] OrderBy column/columns, use - to revrse the order, like this -created,needId
         * @param {number} [needId] Filter by needId
         * @param {number} [swId] Filter by swId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedStatusUpdatesGet(authorization: string, xTake?: number, xSkip?: number, orderBy?: string, needId?: number, swId?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<NeedStatusUpdateModel>> {
            const localVarFetchArgs = NeedStatusUpdatesAPIApiFetchParamCreator(configuration).apiV2NeedStatusUpdatesGet(authorization, xTake, xSkip, orderBy, needId, swId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NeedStatusUpdatesAPIApi - factory interface
 * @export
 */
export const NeedStatusUpdatesAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Orderin, Filtering, Pagination<br/>
         * @summary List all Need Status Updates
         * @param {string} authorization Access Token, Only Super Admin and SAY Supervisior
         * @param {number} [xTake] Number of results in one page
         * @param {number} [xSkip] Skip n result
         * @param {string} [orderBy] OrderBy column/columns, use - to revrse the order, like this -created,needId
         * @param {number} [needId] Filter by needId
         * @param {number} [swId] Filter by swId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2NeedStatusUpdatesGet(authorization: string, xTake?: number, xSkip?: number, orderBy?: string, needId?: number, swId?: number, options?: any) {
            return NeedStatusUpdatesAPIApiFp(configuration).apiV2NeedStatusUpdatesGet(authorization, xTake, xSkip, orderBy, needId, swId, options)(fetch, basePath);
        },
    };
};

/**
 * NeedStatusUpdatesAPIApi - object-oriented interface
 * @export
 * @class NeedStatusUpdatesAPIApi
 * @extends {BaseAPI}
 */
export class NeedStatusUpdatesAPIApi extends BaseAPI {
    /**
     * Orderin, Filtering, Pagination<br/>
     * @summary List all Need Status Updates
     * @param {string} authorization Access Token, Only Super Admin and SAY Supervisior
     * @param {number} [xTake] Number of results in one page
     * @param {number} [xSkip] Skip n result
     * @param {string} [orderBy] OrderBy column/columns, use - to revrse the order, like this -created,needId
     * @param {number} [needId] Filter by needId
     * @param {number} [swId] Filter by swId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NeedStatusUpdatesAPIApi
     */
    public apiV2NeedStatusUpdatesGet(authorization: string, xTake?: number, xSkip?: number, orderBy?: string, needId?: number, swId?: number, options?: any) {
        return NeedStatusUpdatesAPIApiFp(this.configuration).apiV2NeedStatusUpdatesGet(authorization, xTake, xSkip, orderBy, needId, swId, options)(this.fetch, this.basePath);
    }

}

/**
 * PanelAuthAPIApi - fetch parameter creator
 * @export
 */
export const PanelAuthAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Panel Login API
         * @param {any} username
         * @param {any} password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PanelAuthLoginPost(username: any, password: any, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username', 'Required parameter username was null or undefined when calling apiV2PanelAuthLoginPost.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password', 'Required parameter password was null or undefined when calling apiV2PanelAuthLoginPost.');
            }
            const localVarPath = `/api/v2/panel/auth/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (username !== undefined) {
                localVarFormParams.set('username', username as any);
            }

            if (password !== undefined) {
                localVarFormParams.set('password', password as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Panel Logout (Access Token) API
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PanelAuthLogoutTokenPost(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2PanelAuthLogoutTokenPost.');
            }
            const localVarPath = `/api/v2/panel/auth/logout/token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PanelAuthAPIApi - functional programming interface
 * @export
 */
export const PanelAuthAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Panel Login API
         * @param {any} username
         * @param {any} password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PanelAuthLoginPost(username: any, password: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PanelAuthAPIApiFetchParamCreator(configuration).apiV2PanelAuthLoginPost(username, password, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(async (response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Panel Logout (Access Token) API
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PanelAuthLogoutTokenPost(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RevokedToken> {
            const localVarFetchArgs = PanelAuthAPIApiFetchParamCreator(configuration).apiV2PanelAuthLogoutTokenPost(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PanelAuthAPIApi - factory interface
 * @export
 */
export const PanelAuthAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @summary Panel Login API
         * @param {any} username
         * @param {any} password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PanelAuthLoginPost(username: any, password: any, options?: any) {
            return PanelAuthAPIApiFp(configuration).apiV2PanelAuthLoginPost(username, password, options)(fetch, basePath);
        },
        /**
         *
         * @summary Panel Logout (Access Token) API
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PanelAuthLogoutTokenPost(authorization: string, options?: any) {
            return PanelAuthAPIApiFp(configuration).apiV2PanelAuthLogoutTokenPost(authorization, options)(fetch, basePath);
        },
    };
};

/**
 * PanelAuthAPIApi - object-oriented interface
 * @export
 * @class PanelAuthAPIApi
 * @extends {BaseAPI}
 */
export class PanelAuthAPIApi extends BaseAPI {
    /**
     *
     * @summary Panel Login API
     * @param {any} username
     * @param {any} password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PanelAuthAPIApi
     */
    public apiV2PanelAuthLoginPost(username: any, password: any, options?: any) {
        return PanelAuthAPIApiFp(this.configuration).apiV2PanelAuthLoginPost(username, password, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Panel Logout (Access Token) API
     * @param {string} authorization Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PanelAuthAPIApi
     */
    public apiV2PanelAuthLogoutTokenPost(authorization: string, options?: any) {
        return PanelAuthAPIApiFp(this.configuration).apiV2PanelAuthLogoutTokenPost(authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * PaymentAPIApi - fetch parameter creator
 * @export
 */
export const PaymentAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <br/>
         * @summary get all payments
         * @param {string} authorization Access Token
         * @param {any} [needId]
         * @param {any} [take]
         * @param {any} [skip]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PaymentAllGet(authorization: string, needId?: any, take?: any, skip?: any, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2PaymentAllGet.');
            }
            const localVarPath = `/api/v2/payment/all`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (needId !== undefined) {
                localVarQueryParameter['need_id'] = needId;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary get a payment
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PaymentIdGet(authorization: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2PaymentIdGet.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2PaymentIdGet.');
            }
            const localVarPath = `/api/v2/payment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Create a paymnet for a need
         * @param {string} authorization Access Token
         * @param {Register} register
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PaymentPost(authorization: string, register: Register, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2PaymentPost.');
            }
            // verify required parameter 'register' is not null or undefined
            if (register === null || register === undefined) {
                throw new RequiredError('register', 'Required parameter register was null or undefined when calling apiV2PaymentPost.');
            }
            const localVarPath = `/api/v2/payment`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Register" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(register || {}) : (register || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentAPIApi - functional programming interface
 * @export
 */
export const PaymentAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         * <br/>
         * @summary get all payments
         * @param {string} authorization Access Token
         * @param {any} [needId]
         * @param {any} [take]
         * @param {any} [skip]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PaymentAllGet(authorization: string, needId?: any, take?: any, skip?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = PaymentAPIApiFetchParamCreator(configuration).apiV2PaymentAllGet(authorization, needId, take, skip, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary get a payment
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PaymentIdGet(authorization: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ChildModel> {
            const localVarFetchArgs = PaymentAPIApiFetchParamCreator(configuration).apiV2PaymentIdGet(authorization, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Create a paymnet for a need
         * @param {string} authorization Access Token
         * @param {Register} register
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PaymentPost(authorization: string, register: Register, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PaymentAPIApiFetchParamCreator(configuration).apiV2PaymentPost(authorization, register, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PaymentAPIApi - factory interface
 * @export
 */
export const PaymentAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * <br/>
         * @summary get all payments
         * @param {string} authorization Access Token
         * @param {any} [needId]
         * @param {any} [take]
         * @param {any} [skip]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PaymentAllGet(authorization: string, needId?: any, take?: any, skip?: any, options?: any) {
            return PaymentAPIApiFp(configuration).apiV2PaymentAllGet(authorization, needId, take, skip, options)(fetch, basePath);
        },
        /**
         *
         * @summary get a payment
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PaymentIdGet(authorization: string, id: number, options?: any) {
            return PaymentAPIApiFp(configuration).apiV2PaymentIdGet(authorization, id, options)(fetch, basePath);
        },
        /**
         *
         * @summary Create a paymnet for a need
         * @param {string} authorization Access Token
         * @param {Register} register
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PaymentPost(authorization: string, register: Register, options?: any) {
            return PaymentAPIApiFp(configuration).apiV2PaymentPost(authorization, register, options)(fetch, basePath);
        },
    };
};

/**
 * PaymentAPIApi - object-oriented interface
 * @export
 * @class PaymentAPIApi
 * @extends {BaseAPI}
 */
export class PaymentAPIApi extends BaseAPI {
    /**
     * <br/>
     * @summary get all payments
     * @param {string} authorization Access Token
     * @param {any} [needId]
     * @param {any} [take]
     * @param {any} [skip]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentAPIApi
     */
    public apiV2PaymentAllGet(authorization: string, needId?: any, take?: any, skip?: any, options?: any) {
        return PaymentAPIApiFp(this.configuration).apiV2PaymentAllGet(authorization, needId, take, skip, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary get a payment
     * @param {string} authorization Access Token
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentAPIApi
     */
    public apiV2PaymentIdGet(authorization: string, id: number, options?: any) {
        return PaymentAPIApiFp(this.configuration).apiV2PaymentIdGet(authorization, id, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Create a paymnet for a need
     * @param {string} authorization Access Token
     * @param {Register} register
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentAPIApi
     */
    public apiV2PaymentPost(authorization: string, register: Register, options?: any) {
        return PaymentAPIApiFp(this.configuration).apiV2PaymentPost(authorization, register, options)(this.fetch, this.basePath);
    }

}

/**
 * PreneedAPIApi - fetch parameter creator
 * @export
 */
export const PreneedAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary List of Preneeds
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreneedsGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2PreneedsGet.');
            }
            const localVarPath = `/api/v2/preneeds/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PreneedAPIApi - functional programming interface
 * @export
 */
export const PreneedAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary List of Preneeds
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreneedsGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PreneedSummary> {
            const localVarFetchArgs = PreneedAPIApiFetchParamCreator(configuration).apiV2PreneedsGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PreneedAPIApi - factory interface
 * @export
 */
export const PreneedAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @summary List of Preneeds
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PreneedsGet(authorization: string, options?: any) {
            return PreneedAPIApiFp(configuration).apiV2PreneedsGet(authorization, options)(fetch, basePath);
        },
    };
};

/**
 * PreneedAPIApi - object-oriented interface
 * @export
 * @class PreneedAPIApi
 * @extends {BaseAPI}
 */
export class PreneedAPIApi extends BaseAPI {
    /**
     *
     * @summary List of Preneeds
     * @param {string} authorization Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreneedAPIApi
     */
    public apiV2PreneedsGet(authorization: string, options?: any) {
        return PreneedAPIApiFp(this.configuration).apiV2PreneedsGet(authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * PrivilegeAPIApi - fetch parameter creator
 * @export
 */
export const PrivilegeAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a privilege.<br/>This API creates a row in social_worker_type table containing a new privilege information.<br/>privilege must be among these numbers:<br/>[0]super admin, [1]social worker, [2]coordinator, [3]NGO supervisor, [4]SAY supervisor, [5]admin<br/>
         * @summary add privilege
         * @param {string} authorization Access Token
         * @param {number} privilege
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PrivilegeAddPost(authorization: string, privilege: number, name: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2PrivilegeAddPost.');
            }
            // verify required parameter 'privilege' is not null or undefined
            if (privilege === null || privilege === undefined) {
                throw new RequiredError('privilege', 'Required parameter privilege was null or undefined when calling apiV2PrivilegeAddPost.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name', 'Required parameter name was null or undefined when calling apiV2PrivilegeAddPost.');
            }
            const localVarPath = `/api/v2/privilege/add`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (privilege !== undefined) {
                localVarFormParams.set('privilege', privilege as any);
            }

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information of all privileges in a json.<br/>Json key is privilege id and json value is privilege object.<br/>Calling this API only affects social_worker_type table by selecting rows from it.<br/>
         * @summary get all privileges
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PrivilegeAllGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2PrivilegeAllGet.');
            }
            const localVarPath = `/api/v2/privilege/all`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information of all privileges with given id as a json object.<br/>Calling this API only affects social_worker_type table by selecting rows from it.<br/>
         * @summary get privilege by name
         * @param {string} authorization Access Token
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PrivilegeNamenameGet(authorization: string, name: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2PrivilegeNamenameGet.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name', 'Required parameter name was null or undefined when calling apiV2PrivilegeNamenameGet.');
            }
            const localVarPath = `/api/v2/privilege/name={name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information of a privilege with given id as a json object.<br/>Calling this API only affects social_worker_type table by selecting a single row from it.<br/>
         * @summary get privilege by id
         * @param {string} authorization Access Token
         * @param {number} privilegeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PrivilegePrivilegeIdprivilegeIdGet(authorization: string, privilegeId: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2PrivilegePrivilegeIdprivilegeIdGet.');
            }
            // verify required parameter 'privilegeId' is not null or undefined
            if (privilegeId === null || privilegeId === undefined) {
                throw new RequiredError('privilegeId', 'Required parameter privilegeId was null or undefined when calling apiV2PrivilegePrivilegeIdprivilegeIdGet.');
            }
            const localVarPath = `/api/v2/privilege/privilegeId={privilege_id}`
                .replace(`{${"privilege_id"}}`, encodeURIComponent(String(privilegeId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information of all privileges with given privilege as a json object.<br/>Calling this API only affects social_worker_type table by selecting rows from it.<br/>
         * @summary get privilege by privilege
         * @param {string} authorization Access Token
         * @param {number} privilegeType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PrivilegePrivilegeprivilegeTypeGet(authorization: string, privilegeType: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2PrivilegePrivilegeprivilegeTypeGet.');
            }
            // verify required parameter 'privilegeType' is not null or undefined
            if (privilegeType === null || privilegeType === undefined) {
                throw new RequiredError('privilegeType', 'Required parameter privilegeType was null or undefined when calling apiV2PrivilegePrivilegeprivilegeTypeGet.');
            }
            const localVarPath = `/api/v2/privilege/privilege={privilege_type}`
                .replace(`{${"privilege_type"}}`, encodeURIComponent(String(privilegeType)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * All the fields are optional.<br/>You can fill every field you want to change, and it will update the desired privilege.<br/>Calling this API only affects social_worker_type table by updating a row.<br/>Be aware that privilege code must be among the list in second row of this table.<br/>
         * @summary update privilege
         * @param {string} authorization Access Token
         * @param {number} privilegeId
         * @param {number} privilege
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PrivilegeUpdatePrivilegeIdprivilegeIdPatch(authorization: string, privilegeId: number, privilege: number, name: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2PrivilegeUpdatePrivilegeIdprivilegeIdPatch.');
            }
            // verify required parameter 'privilegeId' is not null or undefined
            if (privilegeId === null || privilegeId === undefined) {
                throw new RequiredError('privilegeId', 'Required parameter privilegeId was null or undefined when calling apiV2PrivilegeUpdatePrivilegeIdprivilegeIdPatch.');
            }
            // verify required parameter 'privilege' is not null or undefined
            if (privilege === null || privilege === undefined) {
                throw new RequiredError('privilege', 'Required parameter privilege was null or undefined when calling apiV2PrivilegeUpdatePrivilegeIdprivilegeIdPatch.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name', 'Required parameter name was null or undefined when calling apiV2PrivilegeUpdatePrivilegeIdprivilegeIdPatch.');
            }
            const localVarPath = `/api/v2/privilege/update/privilegeId={privilege_id}`
                .replace(`{${"privilege_id"}}`, encodeURIComponent(String(privilegeId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (privilege !== undefined) {
                localVarFormParams.set('privilege', privilege as any);
            }

            if (name !== undefined) {
                localVarFormParams.set('name', name as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PrivilegeAPIApi - functional programming interface
 * @export
 */
export const PrivilegeAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Adds a privilege.<br/>This API creates a row in social_worker_type table containing a new privilege information.<br/>privilege must be among these numbers:<br/>[0]super admin, [1]social worker, [2]coordinator, [3]NGO supervisor, [4]SAY supervisor, [5]admin<br/>
         * @summary add privilege
         * @param {string} authorization Access Token
         * @param {number} privilege
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PrivilegeAddPost(authorization: string, privilege: number, name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PrivilegeAPIApiFetchParamCreator(configuration).apiV2PrivilegeAddPost(authorization, privilege, name, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns information of all privileges in a json.<br/>Json key is privilege id and json value is privilege object.<br/>Calling this API only affects social_worker_type table by selecting rows from it.<br/>
         * @summary get all privileges
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PrivilegeAllGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PrivilegeModel> {
            const localVarFetchArgs = PrivilegeAPIApiFetchParamCreator(configuration).apiV2PrivilegeAllGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns information of all privileges with given id as a json object.<br/>Calling this API only affects social_worker_type table by selecting rows from it.<br/>
         * @summary get privilege by name
         * @param {string} authorization Access Token
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PrivilegeNamenameGet(authorization: string, name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PrivilegeModel> {
            const localVarFetchArgs = PrivilegeAPIApiFetchParamCreator(configuration).apiV2PrivilegeNamenameGet(authorization, name, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns information of a privilege with given id as a json object.<br/>Calling this API only affects social_worker_type table by selecting a single row from it.<br/>
         * @summary get privilege by id
         * @param {string} authorization Access Token
         * @param {number} privilegeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PrivilegePrivilegeIdprivilegeIdGet(authorization: string, privilegeId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PrivilegeModel> {
            const localVarFetchArgs = PrivilegeAPIApiFetchParamCreator(configuration).apiV2PrivilegePrivilegeIdprivilegeIdGet(authorization, privilegeId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns information of all privileges with given privilege as a json object.<br/>Calling this API only affects social_worker_type table by selecting rows from it.<br/>
         * @summary get privilege by privilege
         * @param {string} authorization Access Token
         * @param {number} privilegeType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PrivilegePrivilegeprivilegeTypeGet(authorization: string, privilegeType: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PrivilegeModel> {
            const localVarFetchArgs = PrivilegeAPIApiFetchParamCreator(configuration).apiV2PrivilegePrivilegeprivilegeTypeGet(authorization, privilegeType, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * All the fields are optional.<br/>You can fill every field you want to change, and it will update the desired privilege.<br/>Calling this API only affects social_worker_type table by updating a row.<br/>Be aware that privilege code must be among the list in second row of this table.<br/>
         * @summary update privilege
         * @param {string} authorization Access Token
         * @param {number} privilegeId
         * @param {number} privilege
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PrivilegeUpdatePrivilegeIdprivilegeIdPatch(authorization: string, privilegeId: number, privilege: number, name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PrivilegeAPIApiFetchParamCreator(configuration).apiV2PrivilegeUpdatePrivilegeIdprivilegeIdPatch(authorization, privilegeId, privilege, name, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PrivilegeAPIApi - factory interface
 * @export
 */
export const PrivilegeAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Adds a privilege.<br/>This API creates a row in social_worker_type table containing a new privilege information.<br/>privilege must be among these numbers:<br/>[0]super admin, [1]social worker, [2]coordinator, [3]NGO supervisor, [4]SAY supervisor, [5]admin<br/>
         * @summary add privilege
         * @param {string} authorization Access Token
         * @param {number} privilege
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PrivilegeAddPost(authorization: string, privilege: number, name: string, options?: any) {
            return PrivilegeAPIApiFp(configuration).apiV2PrivilegeAddPost(authorization, privilege, name, options)(fetch, basePath);
        },
        /**
         * Returns information of all privileges in a json.<br/>Json key is privilege id and json value is privilege object.<br/>Calling this API only affects social_worker_type table by selecting rows from it.<br/>
         * @summary get all privileges
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PrivilegeAllGet(authorization: string, options?: any) {
            return PrivilegeAPIApiFp(configuration).apiV2PrivilegeAllGet(authorization, options)(fetch, basePath);
        },
        /**
         * Returns information of all privileges with given id as a json object.<br/>Calling this API only affects social_worker_type table by selecting rows from it.<br/>
         * @summary get privilege by name
         * @param {string} authorization Access Token
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PrivilegeNamenameGet(authorization: string, name: string, options?: any) {
            return PrivilegeAPIApiFp(configuration).apiV2PrivilegeNamenameGet(authorization, name, options)(fetch, basePath);
        },
        /**
         * Returns information of a privilege with given id as a json object.<br/>Calling this API only affects social_worker_type table by selecting a single row from it.<br/>
         * @summary get privilege by id
         * @param {string} authorization Access Token
         * @param {number} privilegeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PrivilegePrivilegeIdprivilegeIdGet(authorization: string, privilegeId: number, options?: any) {
            return PrivilegeAPIApiFp(configuration).apiV2PrivilegePrivilegeIdprivilegeIdGet(authorization, privilegeId, options)(fetch, basePath);
        },
        /**
         * Returns information of all privileges with given privilege as a json object.<br/>Calling this API only affects social_worker_type table by selecting rows from it.<br/>
         * @summary get privilege by privilege
         * @param {string} authorization Access Token
         * @param {number} privilegeType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PrivilegePrivilegeprivilegeTypeGet(authorization: string, privilegeType: number, options?: any) {
            return PrivilegeAPIApiFp(configuration).apiV2PrivilegePrivilegeprivilegeTypeGet(authorization, privilegeType, options)(fetch, basePath);
        },
        /**
         * All the fields are optional.<br/>You can fill every field you want to change, and it will update the desired privilege.<br/>Calling this API only affects social_worker_type table by updating a row.<br/>Be aware that privilege code must be among the list in second row of this table.<br/>
         * @summary update privilege
         * @param {string} authorization Access Token
         * @param {number} privilegeId
         * @param {number} privilege
         * @param {string} name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PrivilegeUpdatePrivilegeIdprivilegeIdPatch(authorization: string, privilegeId: number, privilege: number, name: string, options?: any) {
            return PrivilegeAPIApiFp(configuration).apiV2PrivilegeUpdatePrivilegeIdprivilegeIdPatch(authorization, privilegeId, privilege, name, options)(fetch, basePath);
        },
    };
};

/**
 * PrivilegeAPIApi - object-oriented interface
 * @export
 * @class PrivilegeAPIApi
 * @extends {BaseAPI}
 */
export class PrivilegeAPIApi extends BaseAPI {
    /**
     * Adds a privilege.<br/>This API creates a row in social_worker_type table containing a new privilege information.<br/>privilege must be among these numbers:<br/>[0]super admin, [1]social worker, [2]coordinator, [3]NGO supervisor, [4]SAY supervisor, [5]admin<br/>
     * @summary add privilege
     * @param {string} authorization Access Token
     * @param {number} privilege
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivilegeAPIApi
     */
    public apiV2PrivilegeAddPost(authorization: string, privilege: number, name: string, options?: any) {
        return PrivilegeAPIApiFp(this.configuration).apiV2PrivilegeAddPost(authorization, privilege, name, options)(this.fetch, this.basePath);
    }

    /**
     * Returns information of all privileges in a json.<br/>Json key is privilege id and json value is privilege object.<br/>Calling this API only affects social_worker_type table by selecting rows from it.<br/>
     * @summary get all privileges
     * @param {string} authorization Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivilegeAPIApi
     */
    public apiV2PrivilegeAllGet(authorization: string, options?: any) {
        return PrivilegeAPIApiFp(this.configuration).apiV2PrivilegeAllGet(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Returns information of all privileges with given id as a json object.<br/>Calling this API only affects social_worker_type table by selecting rows from it.<br/>
     * @summary get privilege by name
     * @param {string} authorization Access Token
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivilegeAPIApi
     */
    public apiV2PrivilegeNamenameGet(authorization: string, name: string, options?: any) {
        return PrivilegeAPIApiFp(this.configuration).apiV2PrivilegeNamenameGet(authorization, name, options)(this.fetch, this.basePath);
    }

    /**
     * Returns information of a privilege with given id as a json object.<br/>Calling this API only affects social_worker_type table by selecting a single row from it.<br/>
     * @summary get privilege by id
     * @param {string} authorization Access Token
     * @param {number} privilegeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivilegeAPIApi
     */
    public apiV2PrivilegePrivilegeIdprivilegeIdGet(authorization: string, privilegeId: number, options?: any) {
        return PrivilegeAPIApiFp(this.configuration).apiV2PrivilegePrivilegeIdprivilegeIdGet(authorization, privilegeId, options)(this.fetch, this.basePath);
    }

    /**
     * Returns information of all privileges with given privilege as a json object.<br/>Calling this API only affects social_worker_type table by selecting rows from it.<br/>
     * @summary get privilege by privilege
     * @param {string} authorization Access Token
     * @param {number} privilegeType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivilegeAPIApi
     */
    public apiV2PrivilegePrivilegeprivilegeTypeGet(authorization: string, privilegeType: number, options?: any) {
        return PrivilegeAPIApiFp(this.configuration).apiV2PrivilegePrivilegeprivilegeTypeGet(authorization, privilegeType, options)(this.fetch, this.basePath);
    }

    /**
     * All the fields are optional.<br/>You can fill every field you want to change, and it will update the desired privilege.<br/>Calling this API only affects social_worker_type table by updating a row.<br/>Be aware that privilege code must be among the list in second row of this table.<br/>
     * @summary update privilege
     * @param {string} authorization Access Token
     * @param {number} privilegeId
     * @param {number} privilege
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivilegeAPIApi
     */
    public apiV2PrivilegeUpdatePrivilegeIdprivilegeIdPatch(authorization: string, privilegeId: number, privilege: number, name: string, options?: any) {
        return PrivilegeAPIApiFp(this.configuration).apiV2PrivilegeUpdatePrivilegeIdprivilegeIdPatch(authorization, privilegeId, privilege, name, options)(this.fetch, this.basePath);
    }

}

/**
 * PublicAPIApi - fetch parameter creator
 * @export
 */
export const PublicAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Children with family members
         * @param {string} [lang] fa,en
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PublicChildrenGet(lang?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v2/public/children`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lang !== undefined) {
                localVarQueryParameter['_lang'] = lang;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Public Need
         * @param {string} id
         * @param {string} [lang] fa,en
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PublicNeedsIdGet(id: string, lang?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2PublicNeedsIdGet.');
            }
            const localVarPath = `/api/v2/public/needs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lang !== undefined) {
                localVarQueryParameter['_lang'] = lang;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Random Need
         * @param {string} [lang] fa,en
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PublicRandomNeedGet(lang?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v2/public/random/need`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lang !== undefined) {
                localVarQueryParameter['_lang'] = lang;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicAPIApi - functional programming interface
 * @export
 */
export const PublicAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Children with family members
         * @param {string} [lang] fa,en
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PublicChildrenGet(lang?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ChildrenWithFamilyMembers> {
            const localVarFetchArgs = PublicAPIApiFetchParamCreator(configuration).apiV2PublicChildrenGet(lang, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Get Public Need
         * @param {string} id
         * @param {string} [lang] fa,en
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PublicNeedsIdGet(id: string, lang?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PublicNeed> {
            const localVarFetchArgs = PublicAPIApiFetchParamCreator(configuration).apiV2PublicNeedsIdGet(id, lang, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Random Need
         * @param {string} [lang] fa,en
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PublicRandomNeedGet(lang?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<PublicNeed> {
            const localVarFetchArgs = PublicAPIApiFetchParamCreator(configuration).apiV2PublicRandomNeedGet(lang, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PublicAPIApi - factory interface
 * @export
 */
export const PublicAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @summary Children with family members
         * @param {string} [lang] fa,en
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PublicChildrenGet(lang?: string, options?: any) {
            return PublicAPIApiFp(configuration).apiV2PublicChildrenGet(lang, options)(fetch, basePath);
        },
        /**
         *
         * @summary Get Public Need
         * @param {string} id
         * @param {string} [lang] fa,en
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PublicNeedsIdGet(id: string, lang?: string, options?: any) {
            return PublicAPIApiFp(configuration).apiV2PublicNeedsIdGet(id, lang, options)(fetch, basePath);
        },
        /**
         *
         * @summary Random Need
         * @param {string} [lang] fa,en
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2PublicRandomNeedGet(lang?: string, options?: any) {
            return PublicAPIApiFp(configuration).apiV2PublicRandomNeedGet(lang, options)(fetch, basePath);
        },
    };
};

/**
 * PublicAPIApi - object-oriented interface
 * @export
 * @class PublicAPIApi
 * @extends {BaseAPI}
 */
export class PublicAPIApi extends BaseAPI {
    /**
     *
     * @summary Children with family members
     * @param {string} [lang] fa,en
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIApi
     */
    public apiV2PublicChildrenGet(lang?: string, options?: any) {
        return PublicAPIApiFp(this.configuration).apiV2PublicChildrenGet(lang, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Get Public Need
     * @param {string} id
     * @param {string} [lang] fa,en
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIApi
     */
    public apiV2PublicNeedsIdGet(id: string, lang?: string, options?: any) {
        return PublicAPIApiFp(this.configuration).apiV2PublicNeedsIdGet(id, lang, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Random Need
     * @param {string} [lang] fa,en
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIApi
     */
    public apiV2PublicRandomNeedGet(lang?: string, options?: any) {
        return PublicAPIApiFp(this.configuration).apiV2PublicRandomNeedGet(lang, options)(this.fetch, this.basePath);
    }

}

/**
 * ReceiptAPIApi - fetch parameter creator
 * @export
 */
export const ReceiptAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <br/>
         * @summary List receipts, sorted by updated, created
         * @param {string} [authorization] Access Token
         * @param {any} [search] search query
         * @param {any} [take] max 100, default &#x3D; 10
         * @param {any} [skip]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ReceiptsGet(authorization?: string, search?: any, take?: any, skip?: any, options: any = {}): FetchArgs {
            const localVarPath = `/api/v2/receipts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br/>
         * @summary Delete a receipt, from all needs that it is attached
         * @param {string} authorization Access Token
         * @param {any} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ReceiptsIdDelete(authorization: string, id: any, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2ReceiptsIdDelete.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2ReceiptsIdDelete.');
            }
            const localVarPath = `/api/v2/receipts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br/>
         * @summary Get a receipt
         * @param {any} id
         * @param {string} [authorization] Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ReceiptsIdGet(id: any, authorization?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2ReceiptsIdGet.');
            }
            const localVarPath = `/api/v2/receipts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update a receipt
         * @param {string} authorization Access Token
         * @param {any} id
         * @param {any} [attachment]
         * @param {string} [description] max 1024 char
         * @param {string} [title] max 128 char
         * @param {number} [needStatus]
         * @param {boolean} [isPublic] default&#x3D;false, only SUPER_ADMIN, SAY_SUPERVISOR, ADMIN can set to true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ReceiptsIdPatch(authorization: string, id: any, attachment?: any, description?: string, title?: string, needStatus?: number, isPublic?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2ReceiptsIdPatch.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2ReceiptsIdPatch.');
            }
            const localVarPath = `/api/v2/receipts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (attachment !== undefined) {
                localVarFormParams.set('attachment', attachment as any);
            }

            if (description !== undefined) {
                localVarFormParams.set('description', description as any);
            }

            if (title !== undefined) {
                localVarFormParams.set('title', title as any);
            }

            if (needStatus !== undefined) {
                localVarFormParams.set('needStatus', needStatus as any);
            }

            if (isPublic !== undefined) {
                localVarFormParams.set('isPublic', isPublic as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReceiptAPIApi - functional programming interface
 * @export
 */
export const ReceiptAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         * <br/>
         * @summary List receipts, sorted by updated, created
         * @param {string} [authorization] Access Token
         * @param {any} [search] search query
         * @param {any} [take] max 100, default &#x3D; 10
         * @param {any} [skip]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ReceiptsGet(authorization?: string, search?: any, take?: any, skip?: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ReceiptAPIApiFetchParamCreator(configuration).apiV2ReceiptsGet(authorization, search, take, skip, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * <br/>
         * @summary Delete a receipt, from all needs that it is attached
         * @param {string} authorization Access Token
         * @param {any} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ReceiptsIdDelete(authorization: string, id: any, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ReceiptAPIApiFetchParamCreator(configuration).apiV2ReceiptsIdDelete(authorization, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * <br/>
         * @summary Get a receipt
         * @param {any} id
         * @param {string} [authorization] Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ReceiptsIdGet(id: any, authorization?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ReceiptAPIApiFetchParamCreator(configuration).apiV2ReceiptsIdGet(id, authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Update a receipt
         * @param {string} authorization Access Token
         * @param {any} id
         * @param {any} [attachment]
         * @param {string} [description] max 1024 char
         * @param {string} [title] max 128 char
         * @param {number} [needStatus]
         * @param {boolean} [isPublic] default&#x3D;false, only SUPER_ADMIN, SAY_SUPERVISOR, ADMIN can set to true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ReceiptsIdPatch(authorization: string, id: any, attachment?: any, description?: string, title?: string, needStatus?: number, isPublic?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ReceiptAPIApiFetchParamCreator(configuration).apiV2ReceiptsIdPatch(authorization, id, attachment, description, title, needStatus, isPublic, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ReceiptAPIApi - factory interface
 * @export
 */
export const ReceiptAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * <br/>
         * @summary List receipts, sorted by updated, created
         * @param {string} [authorization] Access Token
         * @param {any} [search] search query
         * @param {any} [take] max 100, default &#x3D; 10
         * @param {any} [skip]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ReceiptsGet(authorization?: string, search?: any, take?: any, skip?: any, options?: any) {
            return ReceiptAPIApiFp(configuration).apiV2ReceiptsGet(authorization, search, take, skip, options)(fetch, basePath);
        },
        /**
         * <br/>
         * @summary Delete a receipt, from all needs that it is attached
         * @param {string} authorization Access Token
         * @param {any} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ReceiptsIdDelete(authorization: string, id: any, options?: any) {
            return ReceiptAPIApiFp(configuration).apiV2ReceiptsIdDelete(authorization, id, options)(fetch, basePath);
        },
        /**
         * <br/>
         * @summary Get a receipt
         * @param {any} id
         * @param {string} [authorization] Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ReceiptsIdGet(id: any, authorization?: string, options?: any) {
            return ReceiptAPIApiFp(configuration).apiV2ReceiptsIdGet(id, authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Update a receipt
         * @param {string} authorization Access Token
         * @param {any} id
         * @param {any} [attachment]
         * @param {string} [description] max 1024 char
         * @param {string} [title] max 128 char
         * @param {number} [needStatus]
         * @param {boolean} [isPublic] default&#x3D;false, only SUPER_ADMIN, SAY_SUPERVISOR, ADMIN can set to true
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ReceiptsIdPatch(authorization: string, id: any, attachment?: any, description?: string, title?: string, needStatus?: number, isPublic?: boolean, options?: any) {
            return ReceiptAPIApiFp(configuration).apiV2ReceiptsIdPatch(authorization, id, attachment, description, title, needStatus, isPublic, options)(fetch, basePath);
        },
    };
};

/**
 * ReceiptAPIApi - object-oriented interface
 * @export
 * @class ReceiptAPIApi
 * @extends {BaseAPI}
 */
export class ReceiptAPIApi extends BaseAPI {
    /**
     * <br/>
     * @summary List receipts, sorted by updated, created
     * @param {string} [authorization] Access Token
     * @param {any} [search] search query
     * @param {any} [take] max 100, default &#x3D; 10
     * @param {any} [skip]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptAPIApi
     */
    public apiV2ReceiptsGet(authorization?: string, search?: any, take?: any, skip?: any, options?: any) {
        return ReceiptAPIApiFp(this.configuration).apiV2ReceiptsGet(authorization, search, take, skip, options)(this.fetch, this.basePath);
    }

    /**
     * <br/>
     * @summary Delete a receipt, from all needs that it is attached
     * @param {string} authorization Access Token
     * @param {any} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptAPIApi
     */
    public apiV2ReceiptsIdDelete(authorization: string, id: any, options?: any) {
        return ReceiptAPIApiFp(this.configuration).apiV2ReceiptsIdDelete(authorization, id, options)(this.fetch, this.basePath);
    }

    /**
     * <br/>
     * @summary Get a receipt
     * @param {any} id
     * @param {string} [authorization] Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptAPIApi
     */
    public apiV2ReceiptsIdGet(id: any, authorization?: string, options?: any) {
        return ReceiptAPIApiFp(this.configuration).apiV2ReceiptsIdGet(id, authorization, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Update a receipt
     * @param {string} authorization Access Token
     * @param {any} id
     * @param {any} [attachment]
     * @param {string} [description] max 1024 char
     * @param {string} [title] max 128 char
     * @param {number} [needStatus]
     * @param {boolean} [isPublic] default&#x3D;false, only SUPER_ADMIN, SAY_SUPERVISOR, ADMIN can set to true
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptAPIApi
     */
    public apiV2ReceiptsIdPatch(authorization: string, id: any, attachment?: any, description?: string, title?: string, needStatus?: number, isPublic?: boolean, options?: any) {
        return ReceiptAPIApiFp(this.configuration).apiV2ReceiptsIdPatch(authorization, id, attachment, description, title, needStatus, isPublic, options)(this.fetch, this.basePath);
    }

}

/**
 * SearchAPIApi - fetch parameter creator
 * @export
 */
export const SearchAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Random Search V2
         * @param {string} [authorization] Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchRandomPost(authorization?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v2/search/random`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary say brain search
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchSaybrainGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2SearchSaybrainGet.');
            }
            const localVarPath = `/api/v2/search/saybrain`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Random Search V3
         * @param {string} [authorization] Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SearchRandomPost(authorization?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/v3/search/random`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchAPIApi - functional programming interface
 * @export
 */
export const SearchAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Random Search V2
         * @param {string} [authorization] Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchRandomPost(authorization?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SearchModel> {
            const localVarFetchArgs = SearchAPIApiFetchParamCreator(configuration).apiV2SearchRandomPost(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary say brain search
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchSaybrainGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ChildModel> {
            const localVarFetchArgs = SearchAPIApiFetchParamCreator(configuration).apiV2SearchSaybrainGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Random Search V3
         * @param {string} [authorization] Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SearchRandomPost(authorization?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SearchV3> {
            const localVarFetchArgs = SearchAPIApiFetchParamCreator(configuration).apiV3SearchRandomPost(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SearchAPIApi - factory interface
 * @export
 */
export const SearchAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @summary Random Search V2
         * @param {string} [authorization] Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchRandomPost(authorization?: string, options?: any) {
            return SearchAPIApiFp(configuration).apiV2SearchRandomPost(authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary say brain search
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SearchSaybrainGet(authorization: string, options?: any) {
            return SearchAPIApiFp(configuration).apiV2SearchSaybrainGet(authorization, options)(fetch, basePath);
        },
        /**
         *
         * @summary Random Search V3
         * @param {string} [authorization] Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SearchRandomPost(authorization?: string, options?: any) {
            return SearchAPIApiFp(configuration).apiV3SearchRandomPost(authorization, options)(fetch, basePath);
        },
    };
};

/**
 * SearchAPIApi - object-oriented interface
 * @export
 * @class SearchAPIApi
 * @extends {BaseAPI}
 */
export class SearchAPIApi extends BaseAPI {
    /**
     *
     * @summary Random Search V2
     * @param {string} [authorization] Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchAPIApi
     */
    public apiV2SearchRandomPost(authorization?: string, options?: any) {
        return SearchAPIApiFp(this.configuration).apiV2SearchRandomPost(authorization, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary say brain search
     * @param {string} authorization Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchAPIApi
     */
    public apiV2SearchSaybrainGet(authorization: string, options?: any) {
        return SearchAPIApiFp(this.configuration).apiV2SearchSaybrainGet(authorization, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Random Search V3
     * @param {string} [authorization] Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchAPIApi
     */
    public apiV3SearchRandomPost(authorization?: string, options?: any) {
        return SearchAPIApiFp(this.configuration).apiV3SearchRandomPost(authorization, options)(this.fetch, this.basePath);
    }

}

/**
 * SocialWorkerAPIApi - fetch parameter creator
 * @export
 */
export const SocialWorkerAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns information of all social workers in a json.<br/>Json key is social worker id and json value is social worker object.<br/>Calling this API only affects social_worker table by selecting rows from it.<br/>
         * @summary get all social workers
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersGet(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2SocialworkersGet.');
            }
            const localVarPath = `/api/v2/socialworkers/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information of all social workers in a json.<br/>Json key is social worker id and json value is social worker object.<br/>Calling this API only affects social_worker table by selecting rows from it.<br/>
         * @summary get all social workers
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersGet_1(authorization: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2SocialworkersGet_1.');
            }
            const localVarPath = `/api/v2/socialworkers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Activates a deactive social worker.<br/>Calling this API only affects social_worker table by updating a row.<br/>
         * @summary activate social worker
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersIdActivatePost(authorization: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2SocialworkersIdActivatePost.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2SocialworkersIdActivatePost.');
            }
            const localVarPath = `/api/v2/socialworkers/{id}/activate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <br/>
         * @summary Migrate all children of sw to another
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {number} destinationSocialWorkerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersIdChildrenMigratePost(authorization: string, id: number, destinationSocialWorkerId: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2SocialworkersIdChildrenMigratePost.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2SocialworkersIdChildrenMigratePost.');
            }
            // verify required parameter 'destinationSocialWorkerId' is not null or undefined
            if (destinationSocialWorkerId === null || destinationSocialWorkerId === undefined) {
                throw new RequiredError('destinationSocialWorkerId', 'Required parameter destinationSocialWorkerId was null or undefined when calling apiV2SocialworkersIdChildrenMigratePost.');
            }
            const localVarPath = `/api/v2/socialworkers/{id}/children/migrate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (destinationSocialWorkerId !== undefined) {
                localVarFormParams.set('destinationSocialWorkerId', destinationSocialWorkerId as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List created needs of a social worker
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {number} [X_SKIP]
         * @param {number} [X_TAKE] Max 500
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersIdCreatedNeedsGet(authorization: string, id: number, X_SKIP?: number, X_TAKE?: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2SocialworkersIdCreatedNeedsGet.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2SocialworkersIdCreatedNeedsGet.');
            }
            const localVarPath = `/api/v2/socialworkers/{id}/createdNeeds`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (X_SKIP !== undefined && X_SKIP !== null) {
                localVarHeaderParameter['X_SKIP'] = String(X_SKIP);
            }

            if (X_TAKE !== undefined && X_TAKE !== null) {
                localVarHeaderParameter['X_TAKE'] = String(X_TAKE);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deactivates an active social worker.<br/>Calling this API only affects social_worker table by updating a row.<br/>
         * @summary deactivate social worker
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersIdDeactivatePost(authorization: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2SocialworkersIdDeactivatePost.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2SocialworkersIdDeactivatePost.');
            }
            const localVarPath = `/api/v2/socialworkers/{id}/deactivate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a specific social worker.<br/>Calling this API only affects social_worker table by updating a row and set isDeleted tag true.<br/>We do not fully delete any rows.<br/>
         * @summary delete social worker
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersIdDelete(authorization: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2SocialworkersIdDelete.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2SocialworkersIdDelete.');
            }
            const localVarPath = `/api/v2/socialworkers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information of an social worker with given id as a json object.<br/>Calling this API only affects social_worker table by selecting a single row from it.<br/>
         * @summary get social worker by id
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersIdGet(authorization: string, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2SocialworkersIdGet.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2SocialworkersIdGet.');
            }
            const localVarPath = `/api/v2/socialworkers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * All the fields are optional.<br/>You can fill every field you want to change, and it will update the desired social worker.<br/>Calling this API only affects social_worker table by updating a row.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>For idCardUrl, passportUrl and avatarUrl you have to upload a file.<br/>Social workers can change their NGO by editing ngo_id field.<br/>
         * @summary update social worker
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {boolean} isCoordinator
         * @param {number} [ngoId]
         * @param {number} [cityId]
         * @param {number} [typeId]
         * @param {string} [username]
         * @param {string} [password]
         * @param {string} [firstName]
         * @param {string} [lastName]
         * @param {string} [birthCertificateNumber]
         * @param {string} [idNumber]
         * @param {any} [idCardUrl]
         * @param {string} [passportNumber]
         * @param {any} [passportUrl]
         * @param {boolean} [gender]
         * @param {string} [birthDate]
         * @param {string} [phoneNumber]
         * @param {string} [emergencyPhoneNumber]
         * @param {string} [email]
         * @param {string} [telegramId]
         * @param {string} [postalAddress]
         * @param {any} [avatarUrl]
         * @param {string} [bankAccountNumber]
         * @param {string} [bankAccountShebaNumber]
         * @param {string} [bankAccountCardNumber]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersIdPatch(authorization: string, id: number, isCoordinator: boolean, ngoId?: number, cityId?: number, typeId?: number, username?: string, password?: string, firstName?: string, lastName?: string, birthCertificateNumber?: string, idNumber?: string, idCardUrl?: any, passportNumber?: string, passportUrl?: any, gender?: boolean, birthDate?: string, phoneNumber?: string, emergencyPhoneNumber?: string, email?: string, telegramId?: string, postalAddress?: string, avatarUrl?: any, bankAccountNumber?: string, bankAccountShebaNumber?: string, bankAccountCardNumber?: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2SocialworkersIdPatch.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2SocialworkersIdPatch.');
            }
            // verify required parameter 'isCoordinator' is not null or undefined
            if (isCoordinator === null || isCoordinator === undefined) {
                throw new RequiredError('isCoordinator', 'Required parameter isCoordinator was null or undefined when calling apiV2SocialworkersIdPatch.');
            }
            const localVarPath = `/api/v2/socialworkers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (ngoId !== undefined) {
                localVarFormParams.set('ngoId', ngoId as any);
            }

            if (cityId !== undefined) {
                localVarFormParams.set('cityId', cityId as any);
            }

            if (typeId !== undefined) {
                localVarFormParams.set('typeId', typeId as any);
            }

            if (isCoordinator !== undefined) {
                localVarFormParams.set('isCoordinator', isCoordinator as any);
            }

            if (username !== undefined) {
                localVarFormParams.set('username', username as any);
            }

            if (password !== undefined) {
                localVarFormParams.set('password', password as any);
            }

            if (firstName !== undefined) {
                localVarFormParams.set('firstName', firstName as any);
            }

            if (lastName !== undefined) {
                localVarFormParams.set('lastName', lastName as any);
            }

            if (birthCertificateNumber !== undefined) {
                localVarFormParams.set('birthCertificateNumber', birthCertificateNumber as any);
            }

            if (idNumber !== undefined) {
                localVarFormParams.set('idNumber', idNumber as any);
            }

            if (idCardUrl !== undefined) {
                localVarFormParams.set('idCardUrl', idCardUrl as any);
            }

            if (passportNumber !== undefined) {
                localVarFormParams.set('passportNumber', passportNumber as any);
            }

            if (passportUrl !== undefined) {
                localVarFormParams.set('passportUrl', passportUrl as any);
            }

            if (gender !== undefined) {
                localVarFormParams.set('gender', gender as any);
            }

            if (birthDate !== undefined) {
                localVarFormParams.set('birthDate', birthDate as any);
            }

            if (phoneNumber !== undefined) {
                localVarFormParams.set('phoneNumber', phoneNumber as any);
            }

            if (emergencyPhoneNumber !== undefined) {
                localVarFormParams.set('emergencyPhoneNumber', emergencyPhoneNumber as any);
            }

            if (email !== undefined) {
                localVarFormParams.set('email', email as any);
            }

            if (telegramId !== undefined) {
                localVarFormParams.set('telegramId', telegramId as any);
            }

            if (postalAddress !== undefined) {
                localVarFormParams.set('postalAddress', postalAddress as any);
            }

            if (avatarUrl !== undefined) {
                localVarFormParams.set('avatarUrl', avatarUrl as any);
            }

            if (bankAccountNumber !== undefined) {
                localVarFormParams.set('bankAccountNumber', bankAccountNumber as any);
            }

            if (bankAccountShebaNumber !== undefined) {
                localVarFormParams.set('bankAccountShebaNumber', bankAccountShebaNumber as any);
            }

            if (bankAccountCardNumber !== undefined) {
                localVarFormParams.set('bankAccountCardNumber', bankAccountCardNumber as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a social worker.<br/>This API creates a row in social_worker table containing a new social worker information.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>Adding birthCertificateNumber, idCardUrl, passportNumber, passportUrl, birthDate, postalAddress, bankAccountNumber, bankAccountShebaNumber and bankAccountCardNumber is optional.<br/>For idCardUrl, passportUrl and avatarUrl you have to upload a file.<br/>
         * @summary add social worker
         * @param {string} authorization Access Token
         * @param {number} ngoId
         * @param {number} typeId
         * @param {boolean} isCoordinator
         * @param {string} lastName
         * @param {string} idNumber
         * @param {boolean} gender
         * @param {string} phoneNumber
         * @param {string} emergencyPhoneNumber
         * @param {string} email
         * @param {string} telegramId
         * @param {any} avatarUrl
         * @param {number} [cityId]
         * @param {string} [firstName]
         * @param {string} [birthCertificateNumber]
         * @param {any} [idCardUrl]
         * @param {string} [passportNumber]
         * @param {any} [passportUrl]
         * @param {string} [birthDate]
         * @param {string} [postalAddress]
         * @param {string} [bankAccountNumber]
         * @param {string} [bankAccountShebaNumber]
         * @param {string} [bankAccountCardNumber]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersPost(authorization: string, ngoId: number, typeId: number, isCoordinator: boolean, lastName: string, idNumber: string, gender: boolean, phoneNumber: string, emergencyPhoneNumber: string, email: string, telegramId: string, avatarUrl: any, cityId?: number, firstName?: string, birthCertificateNumber?: string, idCardUrl?: any, passportNumber?: string, passportUrl?: any, birthDate?: string, postalAddress?: string, bankAccountNumber?: string, bankAccountShebaNumber?: string, bankAccountCardNumber?: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2SocialworkersPost.');
            }
            // verify required parameter 'ngoId' is not null or undefined
            if (ngoId === null || ngoId === undefined) {
                throw new RequiredError('ngoId', 'Required parameter ngoId was null or undefined when calling apiV2SocialworkersPost.');
            }
            // verify required parameter 'typeId' is not null or undefined
            if (typeId === null || typeId === undefined) {
                throw new RequiredError('typeId', 'Required parameter typeId was null or undefined when calling apiV2SocialworkersPost.');
            }
            // verify required parameter 'isCoordinator' is not null or undefined
            if (isCoordinator === null || isCoordinator === undefined) {
                throw new RequiredError('isCoordinator', 'Required parameter isCoordinator was null or undefined when calling apiV2SocialworkersPost.');
            }
            // verify required parameter 'lastName' is not null or undefined
            if (lastName === null || lastName === undefined) {
                throw new RequiredError('lastName', 'Required parameter lastName was null or undefined when calling apiV2SocialworkersPost.');
            }
            // verify required parameter 'idNumber' is not null or undefined
            if (idNumber === null || idNumber === undefined) {
                throw new RequiredError('idNumber', 'Required parameter idNumber was null or undefined when calling apiV2SocialworkersPost.');
            }
            // verify required parameter 'gender' is not null or undefined
            if (gender === null || gender === undefined) {
                throw new RequiredError('gender', 'Required parameter gender was null or undefined when calling apiV2SocialworkersPost.');
            }
            // verify required parameter 'phoneNumber' is not null or undefined
            if (phoneNumber === null || phoneNumber === undefined) {
                throw new RequiredError('phoneNumber', 'Required parameter phoneNumber was null or undefined when calling apiV2SocialworkersPost.');
            }
            // verify required parameter 'emergencyPhoneNumber' is not null or undefined
            if (emergencyPhoneNumber === null || emergencyPhoneNumber === undefined) {
                throw new RequiredError('emergencyPhoneNumber', 'Required parameter emergencyPhoneNumber was null or undefined when calling apiV2SocialworkersPost.');
            }
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email', 'Required parameter email was null or undefined when calling apiV2SocialworkersPost.');
            }
            // verify required parameter 'telegramId' is not null or undefined
            if (telegramId === null || telegramId === undefined) {
                throw new RequiredError('telegramId', 'Required parameter telegramId was null or undefined when calling apiV2SocialworkersPost.');
            }
            // verify required parameter 'avatarUrl' is not null or undefined
            if (avatarUrl === null || avatarUrl === undefined) {
                throw new RequiredError('avatarUrl', 'Required parameter avatarUrl was null or undefined when calling apiV2SocialworkersPost.');
            }
            const localVarPath = `/api/v2/socialworkers/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (ngoId !== undefined) {
                localVarFormParams.set('ngoId', ngoId as any);
            }

            if (cityId !== undefined) {
                localVarFormParams.set('cityId', cityId as any);
            }

            if (typeId !== undefined) {
                localVarFormParams.set('typeId', typeId as any);
            }

            if (isCoordinator !== undefined) {
                localVarFormParams.set('isCoordinator', isCoordinator as any);
            }

            if (firstName !== undefined) {
                localVarFormParams.set('firstName', firstName as any);
            }

            if (lastName !== undefined) {
                localVarFormParams.set('lastName', lastName as any);
            }

            if (birthCertificateNumber !== undefined) {
                localVarFormParams.set('birthCertificateNumber', birthCertificateNumber as any);
            }

            if (idNumber !== undefined) {
                localVarFormParams.set('idNumber', idNumber as any);
            }

            if (idCardUrl !== undefined) {
                localVarFormParams.set('idCardUrl', idCardUrl as any);
            }

            if (passportNumber !== undefined) {
                localVarFormParams.set('passportNumber', passportNumber as any);
            }

            if (passportUrl !== undefined) {
                localVarFormParams.set('passportUrl', passportUrl as any);
            }

            if (gender !== undefined) {
                localVarFormParams.set('gender', gender as any);
            }

            if (birthDate !== undefined) {
                localVarFormParams.set('birthDate', birthDate as any);
            }

            if (phoneNumber !== undefined) {
                localVarFormParams.set('phoneNumber', phoneNumber as any);
            }

            if (emergencyPhoneNumber !== undefined) {
                localVarFormParams.set('emergencyPhoneNumber', emergencyPhoneNumber as any);
            }

            if (email !== undefined) {
                localVarFormParams.set('email', email as any);
            }

            if (telegramId !== undefined) {
                localVarFormParams.set('telegramId', telegramId as any);
            }

            if (postalAddress !== undefined) {
                localVarFormParams.set('postalAddress', postalAddress as any);
            }

            if (avatarUrl !== undefined) {
                localVarFormParams.set('avatarUrl', avatarUrl as any);
            }

            if (bankAccountNumber !== undefined) {
                localVarFormParams.set('bankAccountNumber', bankAccountNumber as any);
            }

            if (bankAccountShebaNumber !== undefined) {
                localVarFormParams.set('bankAccountShebaNumber', bankAccountShebaNumber as any);
            }

            if (bankAccountCardNumber !== undefined) {
                localVarFormParams.set('bankAccountCardNumber', bankAccountCardNumber as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a social worker.<br/>This API creates a row in social_worker table containing a new social worker information.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>Adding birthCertificateNumber, idCardUrl, passportNumber, passportUrl, birthDate, postalAddress, bankAccountNumber, bankAccountShebaNumber and bankAccountCardNumber is optional.<br/>For idCardUrl, passportUrl and avatarUrl you have to upload a file.<br/>
         * @summary add social worker
         * @param {string} authorization Access Token
         * @param {number} ngoId
         * @param {number} typeId
         * @param {boolean} isCoordinator
         * @param {string} lastName
         * @param {string} idNumber
         * @param {boolean} gender
         * @param {string} phoneNumber
         * @param {string} emergencyPhoneNumber
         * @param {string} email
         * @param {string} telegramId
         * @param {any} avatarUrl
         * @param {number} [cityId]
         * @param {string} [firstName]
         * @param {string} [birthCertificateNumber]
         * @param {any} [idCardUrl]
         * @param {string} [passportNumber]
         * @param {any} [passportUrl]
         * @param {string} [birthDate]
         * @param {string} [postalAddress]
         * @param {string} [bankAccountNumber]
         * @param {string} [bankAccountShebaNumber]
         * @param {string} [bankAccountCardNumber]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersPost_2(authorization: string, ngoId: number, typeId: number, isCoordinator: boolean, lastName: string, idNumber: string, gender: boolean, phoneNumber: string, emergencyPhoneNumber: string, email: string, telegramId: string, avatarUrl: any, cityId?: number, firstName?: string, birthCertificateNumber?: string, idCardUrl?: any, passportNumber?: string, passportUrl?: any, birthDate?: string, postalAddress?: string, bankAccountNumber?: string, bankAccountShebaNumber?: string, bankAccountCardNumber?: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2SocialworkersPost_2.');
            }
            // verify required parameter 'ngoId' is not null or undefined
            if (ngoId === null || ngoId === undefined) {
                throw new RequiredError('ngoId', 'Required parameter ngoId was null or undefined when calling apiV2SocialworkersPost_2.');
            }
            // verify required parameter 'typeId' is not null or undefined
            if (typeId === null || typeId === undefined) {
                throw new RequiredError('typeId', 'Required parameter typeId was null or undefined when calling apiV2SocialworkersPost_2.');
            }
            // verify required parameter 'isCoordinator' is not null or undefined
            if (isCoordinator === null || isCoordinator === undefined) {
                throw new RequiredError('isCoordinator', 'Required parameter isCoordinator was null or undefined when calling apiV2SocialworkersPost_2.');
            }
            // verify required parameter 'lastName' is not null or undefined
            if (lastName === null || lastName === undefined) {
                throw new RequiredError('lastName', 'Required parameter lastName was null or undefined when calling apiV2SocialworkersPost_2.');
            }
            // verify required parameter 'idNumber' is not null or undefined
            if (idNumber === null || idNumber === undefined) {
                throw new RequiredError('idNumber', 'Required parameter idNumber was null or undefined when calling apiV2SocialworkersPost_2.');
            }
            // verify required parameter 'gender' is not null or undefined
            if (gender === null || gender === undefined) {
                throw new RequiredError('gender', 'Required parameter gender was null or undefined when calling apiV2SocialworkersPost_2.');
            }
            // verify required parameter 'phoneNumber' is not null or undefined
            if (phoneNumber === null || phoneNumber === undefined) {
                throw new RequiredError('phoneNumber', 'Required parameter phoneNumber was null or undefined when calling apiV2SocialworkersPost_2.');
            }
            // verify required parameter 'emergencyPhoneNumber' is not null or undefined
            if (emergencyPhoneNumber === null || emergencyPhoneNumber === undefined) {
                throw new RequiredError('emergencyPhoneNumber', 'Required parameter emergencyPhoneNumber was null or undefined when calling apiV2SocialworkersPost_2.');
            }
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email', 'Required parameter email was null or undefined when calling apiV2SocialworkersPost_2.');
            }
            // verify required parameter 'telegramId' is not null or undefined
            if (telegramId === null || telegramId === undefined) {
                throw new RequiredError('telegramId', 'Required parameter telegramId was null or undefined when calling apiV2SocialworkersPost_2.');
            }
            // verify required parameter 'avatarUrl' is not null or undefined
            if (avatarUrl === null || avatarUrl === undefined) {
                throw new RequiredError('avatarUrl', 'Required parameter avatarUrl was null or undefined when calling apiV2SocialworkersPost_2.');
            }
            const localVarPath = `/api/v2/socialworkers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (ngoId !== undefined) {
                localVarFormParams.set('ngoId', ngoId as any);
            }

            if (cityId !== undefined) {
                localVarFormParams.set('cityId', cityId as any);
            }

            if (typeId !== undefined) {
                localVarFormParams.set('typeId', typeId as any);
            }

            if (isCoordinator !== undefined) {
                localVarFormParams.set('isCoordinator', isCoordinator as any);
            }

            if (firstName !== undefined) {
                localVarFormParams.set('firstName', firstName as any);
            }

            if (lastName !== undefined) {
                localVarFormParams.set('lastName', lastName as any);
            }

            if (birthCertificateNumber !== undefined) {
                localVarFormParams.set('birthCertificateNumber', birthCertificateNumber as any);
            }

            if (idNumber !== undefined) {
                localVarFormParams.set('idNumber', idNumber as any);
            }

            if (idCardUrl !== undefined) {
                localVarFormParams.set('idCardUrl', idCardUrl as any);
            }

            if (passportNumber !== undefined) {
                localVarFormParams.set('passportNumber', passportNumber as any);
            }

            if (passportUrl !== undefined) {
                localVarFormParams.set('passportUrl', passportUrl as any);
            }

            if (gender !== undefined) {
                localVarFormParams.set('gender', gender as any);
            }

            if (birthDate !== undefined) {
                localVarFormParams.set('birthDate', birthDate as any);
            }

            if (phoneNumber !== undefined) {
                localVarFormParams.set('phoneNumber', phoneNumber as any);
            }

            if (emergencyPhoneNumber !== undefined) {
                localVarFormParams.set('emergencyPhoneNumber', emergencyPhoneNumber as any);
            }

            if (email !== undefined) {
                localVarFormParams.set('email', email as any);
            }

            if (telegramId !== undefined) {
                localVarFormParams.set('telegramId', telegramId as any);
            }

            if (postalAddress !== undefined) {
                localVarFormParams.set('postalAddress', postalAddress as any);
            }

            if (avatarUrl !== undefined) {
                localVarFormParams.set('avatarUrl', avatarUrl as any);
            }

            if (bankAccountNumber !== undefined) {
                localVarFormParams.set('bankAccountNumber', bankAccountNumber as any);
            }

            if (bankAccountShebaNumber !== undefined) {
                localVarFormParams.set('bankAccountShebaNumber', bankAccountShebaNumber as any);
            }

            if (bankAccountCardNumber !== undefined) {
                localVarFormParams.set('bankAccountCardNumber', bankAccountCardNumber as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SocialWorkerAPIApi - functional programming interface
 * @export
 */
export const SocialWorkerAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Returns information of all social workers in a json.<br/>Json key is social worker id and json value is social worker object.<br/>Calling this API only affects social_worker table by selecting rows from it.<br/>
         * @summary get all social workers
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersGet(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SocialWorkerModel>> {
            const localVarFetchArgs = SocialWorkerAPIApiFetchParamCreator(configuration).apiV2SocialworkersGet(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns information of all social workers in a json.<br/>Json key is social worker id and json value is social worker object.<br/>Calling this API only affects social_worker table by selecting rows from it.<br/>
         * @summary get all social workers
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersGet_1(authorization: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<SocialWorkerModel>> {
            const localVarFetchArgs = SocialWorkerAPIApiFetchParamCreator(configuration).apiV2SocialworkersGet_1(authorization, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Activates a deactive social worker.<br/>Calling this API only affects social_worker table by updating a row.<br/>
         * @summary activate social worker
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersIdActivatePost(authorization: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SocialWorkerAPIApiFetchParamCreator(configuration).apiV2SocialworkersIdActivatePost(authorization, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * <br/>
         * @summary Migrate all children of sw to another
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {number} destinationSocialWorkerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersIdChildrenMigratePost(authorization: string, id: number, destinationSocialWorkerId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SocialWorkerAPIApiFetchParamCreator(configuration).apiV2SocialworkersIdChildrenMigratePost(authorization, id, destinationSocialWorkerId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary List created needs of a social worker
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {number} [X_SKIP]
         * @param {number} [X_TAKE] Max 500
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersIdCreatedNeedsGet(authorization: string, id: number, X_SKIP?: number, X_TAKE?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<NeedModel>> {
            const localVarFetchArgs = SocialWorkerAPIApiFetchParamCreator(configuration).apiV2SocialworkersIdCreatedNeedsGet(authorization, id, X_SKIP, X_TAKE, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deactivates an active social worker.<br/>Calling this API only affects social_worker table by updating a row.<br/>
         * @summary deactivate social worker
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersIdDeactivatePost(authorization: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SocialWorkerAPIApiFetchParamCreator(configuration).apiV2SocialworkersIdDeactivatePost(authorization, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a specific social worker.<br/>Calling this API only affects social_worker table by updating a row and set isDeleted tag true.<br/>We do not fully delete any rows.<br/>
         * @summary delete social worker
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersIdDelete(authorization: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SocialWorkerAPIApiFetchParamCreator(configuration).apiV2SocialworkersIdDelete(authorization, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns information of an social worker with given id as a json object.<br/>Calling this API only affects social_worker table by selecting a single row from it.<br/>
         * @summary get social worker by id
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersIdGet(authorization: string, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SocialWorkerModel> {
            const localVarFetchArgs = SocialWorkerAPIApiFetchParamCreator(configuration).apiV2SocialworkersIdGet(authorization, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * All the fields are optional.<br/>You can fill every field you want to change, and it will update the desired social worker.<br/>Calling this API only affects social_worker table by updating a row.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>For idCardUrl, passportUrl and avatarUrl you have to upload a file.<br/>Social workers can change their NGO by editing ngo_id field.<br/>
         * @summary update social worker
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {boolean} isCoordinator
         * @param {number} [ngoId]
         * @param {number} [cityId]
         * @param {number} [typeId]
         * @param {string} [username]
         * @param {string} [password]
         * @param {string} [firstName]
         * @param {string} [lastName]
         * @param {string} [birthCertificateNumber]
         * @param {string} [idNumber]
         * @param {any} [idCardUrl]
         * @param {string} [passportNumber]
         * @param {any} [passportUrl]
         * @param {boolean} [gender]
         * @param {string} [birthDate]
         * @param {string} [phoneNumber]
         * @param {string} [emergencyPhoneNumber]
         * @param {string} [email]
         * @param {string} [telegramId]
         * @param {string} [postalAddress]
         * @param {any} [avatarUrl]
         * @param {string} [bankAccountNumber]
         * @param {string} [bankAccountShebaNumber]
         * @param {string} [bankAccountCardNumber]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersIdPatch(authorization: string, id: number, isCoordinator: boolean, ngoId?: number, cityId?: number, typeId?: number, username?: string, password?: string, firstName?: string, lastName?: string, birthCertificateNumber?: string, idNumber?: string, idCardUrl?: any, passportNumber?: string, passportUrl?: any, gender?: boolean, birthDate?: string, phoneNumber?: string, emergencyPhoneNumber?: string, email?: string, telegramId?: string, postalAddress?: string, avatarUrl?: any, bankAccountNumber?: string, bankAccountShebaNumber?: string, bankAccountCardNumber?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SocialWorkerModel> {
            const localVarFetchArgs = SocialWorkerAPIApiFetchParamCreator(configuration).apiV2SocialworkersIdPatch(authorization, id, isCoordinator, ngoId, cityId, typeId, username, password, firstName, lastName, birthCertificateNumber, idNumber, idCardUrl, passportNumber, passportUrl, gender, birthDate, phoneNumber, emergencyPhoneNumber, email, telegramId, postalAddress, avatarUrl, bankAccountNumber, bankAccountShebaNumber, bankAccountCardNumber, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Adds a social worker.<br/>This API creates a row in social_worker table containing a new social worker information.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>Adding birthCertificateNumber, idCardUrl, passportNumber, passportUrl, birthDate, postalAddress, bankAccountNumber, bankAccountShebaNumber and bankAccountCardNumber is optional.<br/>For idCardUrl, passportUrl and avatarUrl you have to upload a file.<br/>
         * @summary add social worker
         * @param {string} authorization Access Token
         * @param {number} ngoId
         * @param {number} typeId
         * @param {boolean} isCoordinator
         * @param {string} lastName
         * @param {string} idNumber
         * @param {boolean} gender
         * @param {string} phoneNumber
         * @param {string} emergencyPhoneNumber
         * @param {string} email
         * @param {string} telegramId
         * @param {any} avatarUrl
         * @param {number} [cityId]
         * @param {string} [firstName]
         * @param {string} [birthCertificateNumber]
         * @param {any} [idCardUrl]
         * @param {string} [passportNumber]
         * @param {any} [passportUrl]
         * @param {string} [birthDate]
         * @param {string} [postalAddress]
         * @param {string} [bankAccountNumber]
         * @param {string} [bankAccountShebaNumber]
         * @param {string} [bankAccountCardNumber]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersPost(authorization: string, ngoId: number, typeId: number, isCoordinator: boolean, lastName: string, idNumber: string, gender: boolean, phoneNumber: string, emergencyPhoneNumber: string, email: string, telegramId: string, avatarUrl: any, cityId?: number, firstName?: string, birthCertificateNumber?: string, idCardUrl?: any, passportNumber?: string, passportUrl?: any, birthDate?: string, postalAddress?: string, bankAccountNumber?: string, bankAccountShebaNumber?: string, bankAccountCardNumber?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SocialWorkerModel> {
            const localVarFetchArgs = SocialWorkerAPIApiFetchParamCreator(configuration).apiV2SocialworkersPost(authorization, ngoId, typeId, isCoordinator, lastName, idNumber, gender, phoneNumber, emergencyPhoneNumber, email, telegramId, avatarUrl, cityId, firstName, birthCertificateNumber, idCardUrl, passportNumber, passportUrl, birthDate, postalAddress, bankAccountNumber, bankAccountShebaNumber, bankAccountCardNumber, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Adds a social worker.<br/>This API creates a row in social_worker table containing a new social worker information.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>Adding birthCertificateNumber, idCardUrl, passportNumber, passportUrl, birthDate, postalAddress, bankAccountNumber, bankAccountShebaNumber and bankAccountCardNumber is optional.<br/>For idCardUrl, passportUrl and avatarUrl you have to upload a file.<br/>
         * @summary add social worker
         * @param {string} authorization Access Token
         * @param {number} ngoId
         * @param {number} typeId
         * @param {boolean} isCoordinator
         * @param {string} lastName
         * @param {string} idNumber
         * @param {boolean} gender
         * @param {string} phoneNumber
         * @param {string} emergencyPhoneNumber
         * @param {string} email
         * @param {string} telegramId
         * @param {any} avatarUrl
         * @param {number} [cityId]
         * @param {string} [firstName]
         * @param {string} [birthCertificateNumber]
         * @param {any} [idCardUrl]
         * @param {string} [passportNumber]
         * @param {any} [passportUrl]
         * @param {string} [birthDate]
         * @param {string} [postalAddress]
         * @param {string} [bankAccountNumber]
         * @param {string} [bankAccountShebaNumber]
         * @param {string} [bankAccountCardNumber]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersPost_2(authorization: string, ngoId: number, typeId: number, isCoordinator: boolean, lastName: string, idNumber: string, gender: boolean, phoneNumber: string, emergencyPhoneNumber: string, email: string, telegramId: string, avatarUrl: any, cityId?: number, firstName?: string, birthCertificateNumber?: string, idCardUrl?: any, passportNumber?: string, passportUrl?: any, birthDate?: string, postalAddress?: string, bankAccountNumber?: string, bankAccountShebaNumber?: string, bankAccountCardNumber?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SocialWorkerModel> {
            const localVarFetchArgs = SocialWorkerAPIApiFetchParamCreator(configuration).apiV2SocialworkersPost_2(authorization, ngoId, typeId, isCoordinator, lastName, idNumber, gender, phoneNumber, emergencyPhoneNumber, email, telegramId, avatarUrl, cityId, firstName, birthCertificateNumber, idCardUrl, passportNumber, passportUrl, birthDate, postalAddress, bankAccountNumber, bankAccountShebaNumber, bankAccountCardNumber, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SocialWorkerAPIApi - factory interface
 * @export
 */
export const SocialWorkerAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Returns information of all social workers in a json.<br/>Json key is social worker id and json value is social worker object.<br/>Calling this API only affects social_worker table by selecting rows from it.<br/>
         * @summary get all social workers
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersGet(authorization: string, options?: any) {
            return SocialWorkerAPIApiFp(configuration).apiV2SocialworkersGet(authorization, options)(fetch, basePath);
        },
        /**
         * Returns information of all social workers in a json.<br/>Json key is social worker id and json value is social worker object.<br/>Calling this API only affects social_worker table by selecting rows from it.<br/>
         * @summary get all social workers
         * @param {string} authorization Access Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersGet_1(authorization: string, options?: any) {
            return SocialWorkerAPIApiFp(configuration).apiV2SocialworkersGet_1(authorization, options)(fetch, basePath);
        },
        /**
         * Activates a deactive social worker.<br/>Calling this API only affects social_worker table by updating a row.<br/>
         * @summary activate social worker
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersIdActivatePost(authorization: string, id: number, options?: any) {
            return SocialWorkerAPIApiFp(configuration).apiV2SocialworkersIdActivatePost(authorization, id, options)(fetch, basePath);
        },
        /**
         * <br/>
         * @summary Migrate all children of sw to another
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {number} destinationSocialWorkerId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersIdChildrenMigratePost(authorization: string, id: number, destinationSocialWorkerId: number, options?: any) {
            return SocialWorkerAPIApiFp(configuration).apiV2SocialworkersIdChildrenMigratePost(authorization, id, destinationSocialWorkerId, options)(fetch, basePath);
        },
        /**
         *
         * @summary List created needs of a social worker
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {number} [X_SKIP]
         * @param {number} [X_TAKE] Max 500
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersIdCreatedNeedsGet(authorization: string, id: number, X_SKIP?: number, X_TAKE?: number, options?: any) {
            return SocialWorkerAPIApiFp(configuration).apiV2SocialworkersIdCreatedNeedsGet(authorization, id, X_SKIP, X_TAKE, options)(fetch, basePath);
        },
        /**
         * Deactivates an active social worker.<br/>Calling this API only affects social_worker table by updating a row.<br/>
         * @summary deactivate social worker
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersIdDeactivatePost(authorization: string, id: number, options?: any) {
            return SocialWorkerAPIApiFp(configuration).apiV2SocialworkersIdDeactivatePost(authorization, id, options)(fetch, basePath);
        },
        /**
         * Deletes a specific social worker.<br/>Calling this API only affects social_worker table by updating a row and set isDeleted tag true.<br/>We do not fully delete any rows.<br/>
         * @summary delete social worker
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersIdDelete(authorization: string, id: number, options?: any) {
            return SocialWorkerAPIApiFp(configuration).apiV2SocialworkersIdDelete(authorization, id, options)(fetch, basePath);
        },
        /**
         * Returns information of an social worker with given id as a json object.<br/>Calling this API only affects social_worker table by selecting a single row from it.<br/>
         * @summary get social worker by id
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersIdGet(authorization: string, id: number, options?: any) {
            return SocialWorkerAPIApiFp(configuration).apiV2SocialworkersIdGet(authorization, id, options)(fetch, basePath);
        },
        /**
         * All the fields are optional.<br/>You can fill every field you want to change, and it will update the desired social worker.<br/>Calling this API only affects social_worker table by updating a row.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>For idCardUrl, passportUrl and avatarUrl you have to upload a file.<br/>Social workers can change their NGO by editing ngo_id field.<br/>
         * @summary update social worker
         * @param {string} authorization Access Token
         * @param {number} id
         * @param {boolean} isCoordinator
         * @param {number} [ngoId]
         * @param {number} [cityId]
         * @param {number} [typeId]
         * @param {string} [username]
         * @param {string} [password]
         * @param {string} [firstName]
         * @param {string} [lastName]
         * @param {string} [birthCertificateNumber]
         * @param {string} [idNumber]
         * @param {any} [idCardUrl]
         * @param {string} [passportNumber]
         * @param {any} [passportUrl]
         * @param {boolean} [gender]
         * @param {string} [birthDate]
         * @param {string} [phoneNumber]
         * @param {string} [emergencyPhoneNumber]
         * @param {string} [email]
         * @param {string} [telegramId]
         * @param {string} [postalAddress]
         * @param {any} [avatarUrl]
         * @param {string} [bankAccountNumber]
         * @param {string} [bankAccountShebaNumber]
         * @param {string} [bankAccountCardNumber]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersIdPatch(authorization: string, id: number, isCoordinator: boolean, ngoId?: number, cityId?: number, typeId?: number, username?: string, password?: string, firstName?: string, lastName?: string, birthCertificateNumber?: string, idNumber?: string, idCardUrl?: any, passportNumber?: string, passportUrl?: any, gender?: boolean, birthDate?: string, phoneNumber?: string, emergencyPhoneNumber?: string, email?: string, telegramId?: string, postalAddress?: string, avatarUrl?: any, bankAccountNumber?: string, bankAccountShebaNumber?: string, bankAccountCardNumber?: string, options?: any) {
            return SocialWorkerAPIApiFp(configuration).apiV2SocialworkersIdPatch(authorization, id, isCoordinator, ngoId, cityId, typeId, username, password, firstName, lastName, birthCertificateNumber, idNumber, idCardUrl, passportNumber, passportUrl, gender, birthDate, phoneNumber, emergencyPhoneNumber, email, telegramId, postalAddress, avatarUrl, bankAccountNumber, bankAccountShebaNumber, bankAccountCardNumber, options)(fetch, basePath);
        },
        /**
         * Adds a social worker.<br/>This API creates a row in social_worker table containing a new social worker information.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>Adding birthCertificateNumber, idCardUrl, passportNumber, passportUrl, birthDate, postalAddress, bankAccountNumber, bankAccountShebaNumber and bankAccountCardNumber is optional.<br/>For idCardUrl, passportUrl and avatarUrl you have to upload a file.<br/>
         * @summary add social worker
         * @param {string} authorization Access Token
         * @param {number} ngoId
         * @param {number} typeId
         * @param {boolean} isCoordinator
         * @param {string} lastName
         * @param {string} idNumber
         * @param {boolean} gender
         * @param {string} phoneNumber
         * @param {string} emergencyPhoneNumber
         * @param {string} email
         * @param {string} telegramId
         * @param {any} avatarUrl
         * @param {number} [cityId]
         * @param {string} [firstName]
         * @param {string} [birthCertificateNumber]
         * @param {any} [idCardUrl]
         * @param {string} [passportNumber]
         * @param {any} [passportUrl]
         * @param {string} [birthDate]
         * @param {string} [postalAddress]
         * @param {string} [bankAccountNumber]
         * @param {string} [bankAccountShebaNumber]
         * @param {string} [bankAccountCardNumber]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersPost(authorization: string, ngoId: number, typeId: number, isCoordinator: boolean, lastName: string, idNumber: string, gender: boolean, phoneNumber: string, emergencyPhoneNumber: string, email: string, telegramId: string, avatarUrl: any, cityId?: number, firstName?: string, birthCertificateNumber?: string, idCardUrl?: any, passportNumber?: string, passportUrl?: any, birthDate?: string, postalAddress?: string, bankAccountNumber?: string, bankAccountShebaNumber?: string, bankAccountCardNumber?: string, options?: any) {
            return SocialWorkerAPIApiFp(configuration).apiV2SocialworkersPost(authorization, ngoId, typeId, isCoordinator, lastName, idNumber, gender, phoneNumber, emergencyPhoneNumber, email, telegramId, avatarUrl, cityId, firstName, birthCertificateNumber, idCardUrl, passportNumber, passportUrl, birthDate, postalAddress, bankAccountNumber, bankAccountShebaNumber, bankAccountCardNumber, options)(fetch, basePath);
        },
        /**
         * Adds a social worker.<br/>This API creates a row in social_worker table containing a new social worker information.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>Adding birthCertificateNumber, idCardUrl, passportNumber, passportUrl, birthDate, postalAddress, bankAccountNumber, bankAccountShebaNumber and bankAccountCardNumber is optional.<br/>For idCardUrl, passportUrl and avatarUrl you have to upload a file.<br/>
         * @summary add social worker
         * @param {string} authorization Access Token
         * @param {number} ngoId
         * @param {number} typeId
         * @param {boolean} isCoordinator
         * @param {string} lastName
         * @param {string} idNumber
         * @param {boolean} gender
         * @param {string} phoneNumber
         * @param {string} emergencyPhoneNumber
         * @param {string} email
         * @param {string} telegramId
         * @param {any} avatarUrl
         * @param {number} [cityId]
         * @param {string} [firstName]
         * @param {string} [birthCertificateNumber]
         * @param {any} [idCardUrl]
         * @param {string} [passportNumber]
         * @param {any} [passportUrl]
         * @param {string} [birthDate]
         * @param {string} [postalAddress]
         * @param {string} [bankAccountNumber]
         * @param {string} [bankAccountShebaNumber]
         * @param {string} [bankAccountCardNumber]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2SocialworkersPost_2(authorization: string, ngoId: number, typeId: number, isCoordinator: boolean, lastName: string, idNumber: string, gender: boolean, phoneNumber: string, emergencyPhoneNumber: string, email: string, telegramId: string, avatarUrl: any, cityId?: number, firstName?: string, birthCertificateNumber?: string, idCardUrl?: any, passportNumber?: string, passportUrl?: any, birthDate?: string, postalAddress?: string, bankAccountNumber?: string, bankAccountShebaNumber?: string, bankAccountCardNumber?: string, options?: any) {
            return SocialWorkerAPIApiFp(configuration).apiV2SocialworkersPost_2(authorization, ngoId, typeId, isCoordinator, lastName, idNumber, gender, phoneNumber, emergencyPhoneNumber, email, telegramId, avatarUrl, cityId, firstName, birthCertificateNumber, idCardUrl, passportNumber, passportUrl, birthDate, postalAddress, bankAccountNumber, bankAccountShebaNumber, bankAccountCardNumber, options)(fetch, basePath);
        },
    };
};

/**
 * SocialWorkerAPIApi - object-oriented interface
 * @export
 * @class SocialWorkerAPIApi
 * @extends {BaseAPI}
 */
export class SocialWorkerAPIApi extends BaseAPI {
    /**
     * Returns information of all social workers in a json.<br/>Json key is social worker id and json value is social worker object.<br/>Calling this API only affects social_worker table by selecting rows from it.<br/>
     * @summary get all social workers
     * @param {string} authorization Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialWorkerAPIApi
     */
    public apiV2SocialworkersGet(authorization: string, options?: any) {
        return SocialWorkerAPIApiFp(this.configuration).apiV2SocialworkersGet(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Returns information of all social workers in a json.<br/>Json key is social worker id and json value is social worker object.<br/>Calling this API only affects social_worker table by selecting rows from it.<br/>
     * @summary get all social workers
     * @param {string} authorization Access Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialWorkerAPIApi
     */
    public apiV2SocialworkersGet_1(authorization: string, options?: any) {
        return SocialWorkerAPIApiFp(this.configuration).apiV2SocialworkersGet_1(authorization, options)(this.fetch, this.basePath);
    }

    /**
     * Activates a deactive social worker.<br/>Calling this API only affects social_worker table by updating a row.<br/>
     * @summary activate social worker
     * @param {string} authorization Access Token
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialWorkerAPIApi
     */
    public apiV2SocialworkersIdActivatePost(authorization: string, id: number, options?: any) {
        return SocialWorkerAPIApiFp(this.configuration).apiV2SocialworkersIdActivatePost(authorization, id, options)(this.fetch, this.basePath);
    }

    /**
     * <br/>
     * @summary Migrate all children of sw to another
     * @param {string} authorization Access Token
     * @param {number} id
     * @param {number} destinationSocialWorkerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialWorkerAPIApi
     */
    public apiV2SocialworkersIdChildrenMigratePost(authorization: string, id: number, destinationSocialWorkerId: number, options?: any) {
        return SocialWorkerAPIApiFp(this.configuration).apiV2SocialworkersIdChildrenMigratePost(authorization, id, destinationSocialWorkerId, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary List created needs of a social worker
     * @param {string} authorization Access Token
     * @param {number} id
     * @param {number} [X_SKIP]
     * @param {number} [X_TAKE] Max 500
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialWorkerAPIApi
     */
    public apiV2SocialworkersIdCreatedNeedsGet(authorization: string, id: number, X_SKIP?: number, X_TAKE?: number, options?: any) {
        return SocialWorkerAPIApiFp(this.configuration).apiV2SocialworkersIdCreatedNeedsGet(authorization, id, X_SKIP, X_TAKE, options)(this.fetch, this.basePath);
    }

    /**
     * Deactivates an active social worker.<br/>Calling this API only affects social_worker table by updating a row.<br/>
     * @summary deactivate social worker
     * @param {string} authorization Access Token
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialWorkerAPIApi
     */
    public apiV2SocialworkersIdDeactivatePost(authorization: string, id: number, options?: any) {
        return SocialWorkerAPIApiFp(this.configuration).apiV2SocialworkersIdDeactivatePost(authorization, id, options)(this.fetch, this.basePath);
    }

    /**
     * Deletes a specific social worker.<br/>Calling this API only affects social_worker table by updating a row and set isDeleted tag true.<br/>We do not fully delete any rows.<br/>
     * @summary delete social worker
     * @param {string} authorization Access Token
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialWorkerAPIApi
     */
    public apiV2SocialworkersIdDelete(authorization: string, id: number, options?: any) {
        return SocialWorkerAPIApiFp(this.configuration).apiV2SocialworkersIdDelete(authorization, id, options)(this.fetch, this.basePath);
    }

    /**
     * Returns information of an social worker with given id as a json object.<br/>Calling this API only affects social_worker table by selecting a single row from it.<br/>
     * @summary get social worker by id
     * @param {string} authorization Access Token
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialWorkerAPIApi
     */
    public apiV2SocialworkersIdGet(authorization: string, id: number, options?: any) {
        return SocialWorkerAPIApiFp(this.configuration).apiV2SocialworkersIdGet(authorization, id, options)(this.fetch, this.basePath);
    }

    /**
     * All the fields are optional.<br/>You can fill every field you want to change, and it will update the desired social worker.<br/>Calling this API only affects social_worker table by updating a row.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>For idCardUrl, passportUrl and avatarUrl you have to upload a file.<br/>Social workers can change their NGO by editing ngo_id field.<br/>
     * @summary update social worker
     * @param {string} authorization Access Token
     * @param {number} id
     * @param {boolean} isCoordinator
     * @param {number} [ngoId]
     * @param {number} [cityId]
     * @param {number} [typeId]
     * @param {string} [username]
     * @param {string} [password]
     * @param {string} [firstName]
     * @param {string} [lastName]
     * @param {string} [birthCertificateNumber]
     * @param {string} [idNumber]
     * @param {any} [idCardUrl]
     * @param {string} [passportNumber]
     * @param {any} [passportUrl]
     * @param {boolean} [gender]
     * @param {string} [birthDate]
     * @param {string} [phoneNumber]
     * @param {string} [emergencyPhoneNumber]
     * @param {string} [email]
     * @param {string} [telegramId]
     * @param {string} [postalAddress]
     * @param {any} [avatarUrl]
     * @param {string} [bankAccountNumber]
     * @param {string} [bankAccountShebaNumber]
     * @param {string} [bankAccountCardNumber]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialWorkerAPIApi
     */
    public apiV2SocialworkersIdPatch(authorization: string, id: number, isCoordinator: boolean, ngoId?: number, cityId?: number, typeId?: number, username?: string, password?: string, firstName?: string, lastName?: string, birthCertificateNumber?: string, idNumber?: string, idCardUrl?: any, passportNumber?: string, passportUrl?: any, gender?: boolean, birthDate?: string, phoneNumber?: string, emergencyPhoneNumber?: string, email?: string, telegramId?: string, postalAddress?: string, avatarUrl?: any, bankAccountNumber?: string, bankAccountShebaNumber?: string, bankAccountCardNumber?: string, options?: any) {
        return SocialWorkerAPIApiFp(this.configuration).apiV2SocialworkersIdPatch(authorization, id, isCoordinator, ngoId, cityId, typeId, username, password, firstName, lastName, birthCertificateNumber, idNumber, idCardUrl, passportNumber, passportUrl, gender, birthDate, phoneNumber, emergencyPhoneNumber, email, telegramId, postalAddress, avatarUrl, bankAccountNumber, bankAccountShebaNumber, bankAccountCardNumber, options)(this.fetch, this.basePath);
    }

    /**
     * Adds a social worker.<br/>This API creates a row in social_worker table containing a new social worker information.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>Adding birthCertificateNumber, idCardUrl, passportNumber, passportUrl, birthDate, postalAddress, bankAccountNumber, bankAccountShebaNumber and bankAccountCardNumber is optional.<br/>For idCardUrl, passportUrl and avatarUrl you have to upload a file.<br/>
     * @summary add social worker
     * @param {string} authorization Access Token
     * @param {number} ngoId
     * @param {number} typeId
     * @param {boolean} isCoordinator
     * @param {string} lastName
     * @param {string} idNumber
     * @param {boolean} gender
     * @param {string} phoneNumber
     * @param {string} emergencyPhoneNumber
     * @param {string} email
     * @param {string} telegramId
     * @param {any} avatarUrl
     * @param {number} [cityId]
     * @param {string} [firstName]
     * @param {string} [birthCertificateNumber]
     * @param {any} [idCardUrl]
     * @param {string} [passportNumber]
     * @param {any} [passportUrl]
     * @param {string} [birthDate]
     * @param {string} [postalAddress]
     * @param {string} [bankAccountNumber]
     * @param {string} [bankAccountShebaNumber]
     * @param {string} [bankAccountCardNumber]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialWorkerAPIApi
     */
    public apiV2SocialworkersPost(authorization: string, ngoId: number, typeId: number, isCoordinator: boolean, lastName: string, idNumber: string, gender: boolean, phoneNumber: string, emergencyPhoneNumber: string, email: string, telegramId: string, avatarUrl: any, cityId?: number, firstName?: string, birthCertificateNumber?: string, idCardUrl?: any, passportNumber?: string, passportUrl?: any, birthDate?: string, postalAddress?: string, bankAccountNumber?: string, bankAccountShebaNumber?: string, bankAccountCardNumber?: string, options?: any) {
        return SocialWorkerAPIApiFp(this.configuration).apiV2SocialworkersPost(authorization, ngoId, typeId, isCoordinator, lastName, idNumber, gender, phoneNumber, emergencyPhoneNumber, email, telegramId, avatarUrl, cityId, firstName, birthCertificateNumber, idCardUrl, passportNumber, passportUrl, birthDate, postalAddress, bankAccountNumber, bankAccountShebaNumber, bankAccountCardNumber, options)(this.fetch, this.basePath);
    }

    /**
     * Adds a social worker.<br/>This API creates a row in social_worker table containing a new social worker information.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>Adding birthCertificateNumber, idCardUrl, passportNumber, passportUrl, birthDate, postalAddress, bankAccountNumber, bankAccountShebaNumber and bankAccountCardNumber is optional.<br/>For idCardUrl, passportUrl and avatarUrl you have to upload a file.<br/>
     * @summary add social worker
     * @param {string} authorization Access Token
     * @param {number} ngoId
     * @param {number} typeId
     * @param {boolean} isCoordinator
     * @param {string} lastName
     * @param {string} idNumber
     * @param {boolean} gender
     * @param {string} phoneNumber
     * @param {string} emergencyPhoneNumber
     * @param {string} email
     * @param {string} telegramId
     * @param {any} avatarUrl
     * @param {number} [cityId]
     * @param {string} [firstName]
     * @param {string} [birthCertificateNumber]
     * @param {any} [idCardUrl]
     * @param {string} [passportNumber]
     * @param {any} [passportUrl]
     * @param {string} [birthDate]
     * @param {string} [postalAddress]
     * @param {string} [bankAccountNumber]
     * @param {string} [bankAccountShebaNumber]
     * @param {string} [bankAccountCardNumber]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SocialWorkerAPIApi
     */
    public apiV2SocialworkersPost_2(authorization: string, ngoId: number, typeId: number, isCoordinator: boolean, lastName: string, idNumber: string, gender: boolean, phoneNumber: string, emergencyPhoneNumber: string, email: string, telegramId: string, avatarUrl: any, cityId?: number, firstName?: string, birthCertificateNumber?: string, idCardUrl?: any, passportNumber?: string, passportUrl?: any, birthDate?: string, postalAddress?: string, bankAccountNumber?: string, bankAccountShebaNumber?: string, bankAccountCardNumber?: string, options?: any) {
        return SocialWorkerAPIApiFp(this.configuration).apiV2SocialworkersPost_2(authorization, ngoId, typeId, isCoordinator, lastName, idNumber, gender, phoneNumber, emergencyPhoneNumber, email, telegramId, avatarUrl, cityId, firstName, birthCertificateNumber, idCardUrl, passportNumber, passportUrl, birthDate, postalAddress, bankAccountNumber, bankAccountShebaNumber, bankAccountCardNumber, options)(this.fetch, this.basePath);
    }

}

/**
 * UserAPIApi - fetch parameter creator
 * @export
 */
export const UserAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a user. Adding avatarUrl, emailAddress, gender, birthDate are optional.<br/>For avatarUrl you have to upload a file in png, jpg or jpeg.<br/>Be aware that city is integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>Calling this API only affects on user table.<br/>For gender, [true] is male and [false] is female.<br/>
         * @summary add a user
         * @param {string} authorization Access Token
         * @param {string} firstName
         * @param {string} lastName
         * @param {string} userName
         * @param {string} password
         * @param {any} [avatarUrl]
         * @param {string} [phoneNumber]
         * @param {string} [emailAddress]
         * @param {'female' | 'male' | 'other'} [gender]
         * @param {number} [cityId]
         * @param {string} [birthDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UserAddPost(authorization: string, firstName: string, lastName: string, userName: string, password: string, avatarUrl?: any, phoneNumber?: string, emailAddress?: string, gender?: 'female' | 'male' | 'other', cityId?: number, birthDate?: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2UserAddPost.');
            }
            // verify required parameter 'firstName' is not null or undefined
            if (firstName === null || firstName === undefined) {
                throw new RequiredError('firstName', 'Required parameter firstName was null or undefined when calling apiV2UserAddPost.');
            }
            // verify required parameter 'lastName' is not null or undefined
            if (lastName === null || lastName === undefined) {
                throw new RequiredError('lastName', 'Required parameter lastName was null or undefined when calling apiV2UserAddPost.');
            }
            // verify required parameter 'userName' is not null or undefined
            if (userName === null || userName === undefined) {
                throw new RequiredError('userName', 'Required parameter userName was null or undefined when calling apiV2UserAddPost.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password', 'Required parameter password was null or undefined when calling apiV2UserAddPost.');
            }
            const localVarPath = `/api/v2/user/add`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (firstName !== undefined) {
                localVarFormParams.set('firstName', firstName as any);
            }

            if (lastName !== undefined) {
                localVarFormParams.set('lastName', lastName as any);
            }

            if (avatarUrl !== undefined) {
                localVarFormParams.set('avatarUrl', avatarUrl as any);
            }

            if (phoneNumber !== undefined) {
                localVarFormParams.set('phoneNumber', phoneNumber as any);
            }

            if (emailAddress !== undefined) {
                localVarFormParams.set('emailAddress', emailAddress as any);
            }

            if (gender !== undefined) {
                localVarFormParams.set('gender', gender as any);
            }

            if (cityId !== undefined) {
                localVarFormParams.set('cityId', cityId as any);
            }

            if (birthDate !== undefined) {
                localVarFormParams.set('birthDate', birthDate as any);
            }

            if (userName !== undefined) {
                localVarFormParams.set('userName', userName as any);
            }

            if (password !== undefined) {
                localVarFormParams.set('password', password as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all children this user has.<br/>Calling this API affects family, user_family, user, child_need, need and need_family tables.<br/>
         * @summary get user children
         * @param {string} authorization Access Token
         * @param {string} userId me or user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UserChildrenUserIduserIdGet(authorization: string, userId: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2UserChildrenUserIduserIdGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling apiV2UserChildrenUserIduserIdGet.');
            }
            const localVarPath = `/api/v2/user/children/userId={user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a user.<br/>It also delete all impacts and occurrences of this user in whole database.<br/>Deleting is managed by isDeleted tag everywhere, so we do not fully delete anything.<br/>Calling this API affects user, need_family and user_family tables.<br/>
         * @summary delete a user
         * @param {string} authorization Access Token
         * @param {string} userId me or user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UserDeleteUserIduserIdPatch(authorization: string, userId: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2UserDeleteUserIduserIdPatch.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling apiV2UserDeleteUserIduserIdPatch.');
            }
            const localVarPath = `/api/v2/user/delete/userId={user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns user's role in a specific family.<br/>
         * @summary get user role
         * @param {string} authorization Access Token
         * @param {string} userId me or user_id
         * @param {number} childId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UserRoleUserIduserIdchildIdchildIdGet(authorization: string, userId: string, childId: number, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2UserRoleUserIduserIdchildIdchildIdGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling apiV2UserRoleUserIduserIdchildIdchildIdGet.');
            }
            // verify required parameter 'childId' is not null or undefined
            if (childId === null || childId === undefined) {
                throw new RequiredError('childId', 'Required parameter childId was null or undefined when calling apiV2UserRoleUserIduserIdchildIdchildIdGet.');
            }
            const localVarPath = `/api/v2/user/role/userId={user_id}&childId={child_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"child_id"}}`, encodeURIComponent(String(childId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Search in users
         * @param {string} authorization Access Token
         * @param {string} q
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UserSearchGet(authorization: string, q: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2UserSearchGet.');
            }
            // verify required parameter 'q' is not null or undefined
            if (q === null || q === undefined) {
                throw new RequiredError('q', 'Required parameter q was null or undefined when calling apiV2UserSearchGet.');
            }
            const localVarPath = `/api/v2/user/search`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a user information.<br/>All the fields are optional.<br/>For avatarUrl you have to upload a file in png, jpg or jpeg.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>Calling this API only affects on user table.<br/>For gender, [true] is male and [false] is female.<br/>
         * @summary update a user
         * @param {string} authorization Access Token
         * @param {string} userId me or user_id
         * @param {string} [firstName]
         * @param {string} [lastName]
         * @param {any} [avatarUrl]
         * @param {string} [phoneNumber]
         * @param {string} [emailAddress]
         * @param {string} [postalAddress]
         * @param {string} [postalCode]
         * @param {'female' | 'male' | 'other'} [gender]
         * @param {number} [cityId]
         * @param {string} [birthDate]
         * @param {string} [userName]
         * @param {string} [password]
         * @param {string} [locale] en or fa
         * @param {boolean} [receiveEmail]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UserUpdateUserIduserIdPatch(authorization: string, userId: string, firstName?: string, lastName?: string, avatarUrl?: any, phoneNumber?: string, emailAddress?: string, postalAddress?: string, postalCode?: string, gender?: 'female' | 'male' | 'other', cityId?: number, birthDate?: string, userName?: string, password?: string, locale?: string, receiveEmail?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2UserUpdateUserIduserIdPatch.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling apiV2UserUpdateUserIduserIdPatch.');
            }
            const localVarPath = `/api/v2/user/update/userId={user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (firstName !== undefined) {
                localVarFormParams.set('firstName', firstName as any);
            }

            if (lastName !== undefined) {
                localVarFormParams.set('lastName', lastName as any);
            }

            if (avatarUrl !== undefined) {
                localVarFormParams.set('avatarUrl', avatarUrl as any);
            }

            if (phoneNumber !== undefined) {
                localVarFormParams.set('phoneNumber', phoneNumber as any);
            }

            if (emailAddress !== undefined) {
                localVarFormParams.set('emailAddress', emailAddress as any);
            }

            if (postalAddress !== undefined) {
                localVarFormParams.set('postal_address', postalAddress as any);
            }

            if (postalCode !== undefined) {
                localVarFormParams.set('postal_code', postalCode as any);
            }

            if (gender !== undefined) {
                localVarFormParams.set('gender', gender as any);
            }

            if (cityId !== undefined) {
                localVarFormParams.set('cityId', cityId as any);
            }

            if (birthDate !== undefined) {
                localVarFormParams.set('birthDate', birthDate as any);
            }

            if (userName !== undefined) {
                localVarFormParams.set('userName', userName as any);
            }

            if (password !== undefined) {
                localVarFormParams.set('password', password as any);
            }

            if (locale !== undefined) {
                localVarFormParams.set('locale', locale as any);
            }

            if (receiveEmail !== undefined) {
                localVarFormParams.set('receiveEmail', receiveEmail as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information of a user with given id as a json object.<br/>Calling this API affects child, need, child_need and need_family and user tables.<br/>It contains user info, its children and those children's needs.<br/>
         * @summary get user by id
         * @param {string} authorization Access Token
         * @param {string} userId me or user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UserUserIduserIdGet(authorization: string, userId: string, options: any = {}): FetchArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization', 'Required parameter authorization was null or undefined when calling apiV2UserUserIduserIdGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId', 'Required parameter userId was null or undefined when calling apiV2UserUserIduserIdGet.');
            }
            const localVarPath = `/api/v2/user/userId={user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserAPIApi - functional programming interface
 * @export
 */
export const UserAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Adds a user. Adding avatarUrl, emailAddress, gender, birthDate are optional.<br/>For avatarUrl you have to upload a file in png, jpg or jpeg.<br/>Be aware that city is integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>Calling this API only affects on user table.<br/>For gender, [true] is male and [false] is female.<br/>
         * @summary add a user
         * @param {string} authorization Access Token
         * @param {string} firstName
         * @param {string} lastName
         * @param {string} userName
         * @param {string} password
         * @param {any} [avatarUrl]
         * @param {string} [phoneNumber]
         * @param {string} [emailAddress]
         * @param {'female' | 'male' | 'other'} [gender]
         * @param {number} [cityId]
         * @param {string} [birthDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UserAddPost(authorization: string, firstName: string, lastName: string, userName: string, password: string, avatarUrl?: any, phoneNumber?: string, emailAddress?: string, gender?: 'female' | 'male' | 'other', cityId?: number, birthDate?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserAPIApiFetchParamCreator(configuration).apiV2UserAddPost(authorization, firstName, lastName, userName, password, avatarUrl, phoneNumber, emailAddress, gender, cityId, birthDate, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns all children this user has.<br/>Calling this API affects family, user_family, user, child_need, need and need_family tables.<br/>
         * @summary get user children
         * @param {string} authorization Access Token
         * @param {string} userId me or user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UserChildrenUserIduserIdGet(authorization: string, userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ChildModel> {
            const localVarFetchArgs = UserAPIApiFetchParamCreator(configuration).apiV2UserChildrenUserIduserIdGet(authorization, userId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Deletes a user.<br/>It also delete all impacts and occurrences of this user in whole database.<br/>Deleting is managed by isDeleted tag everywhere, so we do not fully delete anything.<br/>Calling this API affects user, need_family and user_family tables.<br/>
         * @summary delete a user
         * @param {string} authorization Access Token
         * @param {string} userId me or user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UserDeleteUserIduserIdPatch(authorization: string, userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserAPIApiFetchParamCreator(configuration).apiV2UserDeleteUserIduserIdPatch(authorization, userId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns user's role in a specific family.<br/>
         * @summary get user role
         * @param {string} authorization Access Token
         * @param {string} userId me or user_id
         * @param {number} childId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UserRoleUserIduserIdchildIdchildIdGet(authorization: string, userId: string, childId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = UserAPIApiFetchParamCreator(configuration).apiV2UserRoleUserIduserIdchildIdchildIdGet(authorization, userId, childId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Search in users
         * @param {string} authorization Access Token
         * @param {string} q
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UserSearchGet(authorization: string, q: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserModel> {
            const localVarFetchArgs = UserAPIApiFetchParamCreator(configuration).apiV2UserSearchGet(authorization, q, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Updates a user information.<br/>All the fields are optional.<br/>For avatarUrl you have to upload a file in png, jpg or jpeg.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>Calling this API only affects on user table.<br/>For gender, [true] is male and [false] is female.<br/>
         * @summary update a user
         * @param {string} authorization Access Token
         * @param {string} userId me or user_id
         * @param {string} [firstName]
         * @param {string} [lastName]
         * @param {any} [avatarUrl]
         * @param {string} [phoneNumber]
         * @param {string} [emailAddress]
         * @param {string} [postalAddress]
         * @param {string} [postalCode]
         * @param {'female' | 'male' | 'other'} [gender]
         * @param {number} [cityId]
         * @param {string} [birthDate]
         * @param {string} [userName]
         * @param {string} [password]
         * @param {string} [locale] en or fa
         * @param {boolean} [receiveEmail]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UserUpdateUserIduserIdPatch(authorization: string, userId: string, firstName?: string, lastName?: string, avatarUrl?: any, phoneNumber?: string, emailAddress?: string, postalAddress?: string, postalCode?: string, gender?: 'female' | 'male' | 'other', cityId?: number, birthDate?: string, userName?: string, password?: string, locale?: string, receiveEmail?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserModel> {
            const localVarFetchArgs = UserAPIApiFetchParamCreator(configuration).apiV2UserUpdateUserIduserIdPatch(authorization, userId, firstName, lastName, avatarUrl, phoneNumber, emailAddress, postalAddress, postalCode, gender, cityId, birthDate, userName, password, locale, receiveEmail, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns information of a user with given id as a json object.<br/>Calling this API affects child, need, child_need and need_family and user tables.<br/>It contains user info, its children and those children's needs.<br/>
         * @summary get user by id
         * @param {string} authorization Access Token
         * @param {string} userId me or user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UserUserIduserIdGet(authorization: string, userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserModel> {
            const localVarFetchArgs = UserAPIApiFetchParamCreator(configuration).apiV2UserUserIduserIdGet(authorization, userId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UserAPIApi - factory interface
 * @export
 */
export const UserAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Adds a user. Adding avatarUrl, emailAddress, gender, birthDate are optional.<br/>For avatarUrl you have to upload a file in png, jpg or jpeg.<br/>Be aware that city is integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>Calling this API only affects on user table.<br/>For gender, [true] is male and [false] is female.<br/>
         * @summary add a user
         * @param {string} authorization Access Token
         * @param {string} firstName
         * @param {string} lastName
         * @param {string} userName
         * @param {string} password
         * @param {any} [avatarUrl]
         * @param {string} [phoneNumber]
         * @param {string} [emailAddress]
         * @param {'female' | 'male' | 'other'} [gender]
         * @param {number} [cityId]
         * @param {string} [birthDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UserAddPost(authorization: string, firstName: string, lastName: string, userName: string, password: string, avatarUrl?: any, phoneNumber?: string, emailAddress?: string, gender?: 'female' | 'male' | 'other', cityId?: number, birthDate?: string, options?: any) {
            return UserAPIApiFp(configuration).apiV2UserAddPost(authorization, firstName, lastName, userName, password, avatarUrl, phoneNumber, emailAddress, gender, cityId, birthDate, options)(fetch, basePath);
        },
        /**
         * Returns all children this user has.<br/>Calling this API affects family, user_family, user, child_need, need and need_family tables.<br/>
         * @summary get user children
         * @param {string} authorization Access Token
         * @param {string} userId me or user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UserChildrenUserIduserIdGet(authorization: string, userId: string, options?: any) {
            return UserAPIApiFp(configuration).apiV2UserChildrenUserIduserIdGet(authorization, userId, options)(fetch, basePath);
        },
        /**
         * Deletes a user.<br/>It also delete all impacts and occurrences of this user in whole database.<br/>Deleting is managed by isDeleted tag everywhere, so we do not fully delete anything.<br/>Calling this API affects user, need_family and user_family tables.<br/>
         * @summary delete a user
         * @param {string} authorization Access Token
         * @param {string} userId me or user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UserDeleteUserIduserIdPatch(authorization: string, userId: string, options?: any) {
            return UserAPIApiFp(configuration).apiV2UserDeleteUserIduserIdPatch(authorization, userId, options)(fetch, basePath);
        },
        /**
         * Returns user's role in a specific family.<br/>
         * @summary get user role
         * @param {string} authorization Access Token
         * @param {string} userId me or user_id
         * @param {number} childId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UserRoleUserIduserIdchildIdchildIdGet(authorization: string, userId: string, childId: number, options?: any) {
            return UserAPIApiFp(configuration).apiV2UserRoleUserIduserIdchildIdchildIdGet(authorization, userId, childId, options)(fetch, basePath);
        },
        /**
         *
         * @summary Search in users
         * @param {string} authorization Access Token
         * @param {string} q
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UserSearchGet(authorization: string, q: string, options?: any) {
            return UserAPIApiFp(configuration).apiV2UserSearchGet(authorization, q, options)(fetch, basePath);
        },
        /**
         * Updates a user information.<br/>All the fields are optional.<br/>For avatarUrl you have to upload a file in png, jpg or jpeg.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>Calling this API only affects on user table.<br/>For gender, [true] is male and [false] is female.<br/>
         * @summary update a user
         * @param {string} authorization Access Token
         * @param {string} userId me or user_id
         * @param {string} [firstName]
         * @param {string} [lastName]
         * @param {any} [avatarUrl]
         * @param {string} [phoneNumber]
         * @param {string} [emailAddress]
         * @param {string} [postalAddress]
         * @param {string} [postalCode]
         * @param {'female' | 'male' | 'other'} [gender]
         * @param {number} [cityId]
         * @param {string} [birthDate]
         * @param {string} [userName]
         * @param {string} [password]
         * @param {string} [locale] en or fa
         * @param {boolean} [receiveEmail]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UserUpdateUserIduserIdPatch(authorization: string, userId: string, firstName?: string, lastName?: string, avatarUrl?: any, phoneNumber?: string, emailAddress?: string, postalAddress?: string, postalCode?: string, gender?: 'female' | 'male' | 'other', cityId?: number, birthDate?: string, userName?: string, password?: string, locale?: string, receiveEmail?: boolean, options?: any) {
            return UserAPIApiFp(configuration).apiV2UserUpdateUserIduserIdPatch(authorization, userId, firstName, lastName, avatarUrl, phoneNumber, emailAddress, postalAddress, postalCode, gender, cityId, birthDate, userName, password, locale, receiveEmail, options)(fetch, basePath);
        },
        /**
         * Returns information of a user with given id as a json object.<br/>Calling this API affects child, need, child_need and need_family and user tables.<br/>It contains user info, its children and those children's needs.<br/>
         * @summary get user by id
         * @param {string} authorization Access Token
         * @param {string} userId me or user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UserUserIduserIdGet(authorization: string, userId: string, options?: any) {
            return UserAPIApiFp(configuration).apiV2UserUserIduserIdGet(authorization, userId, options)(fetch, basePath);
        },
    };
};

/**
 * UserAPIApi - object-oriented interface
 * @export
 * @class UserAPIApi
 * @extends {BaseAPI}
 */
export class UserAPIApi extends BaseAPI {
    /**
     * Adds a user. Adding avatarUrl, emailAddress, gender, birthDate are optional.<br/>For avatarUrl you have to upload a file in png, jpg or jpeg.<br/>Be aware that city is integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>Calling this API only affects on user table.<br/>For gender, [true] is male and [false] is female.<br/>
     * @summary add a user
     * @param {string} authorization Access Token
     * @param {string} firstName
     * @param {string} lastName
     * @param {string} userName
     * @param {string} password
     * @param {any} [avatarUrl]
     * @param {string} [phoneNumber]
     * @param {string} [emailAddress]
     * @param {'female' | 'male' | 'other'} [gender]
     * @param {number} [cityId]
     * @param {string} [birthDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPIApi
     */
    public apiV2UserAddPost(authorization: string, firstName: string, lastName: string, userName: string, password: string, avatarUrl?: any, phoneNumber?: string, emailAddress?: string, gender?: 'female' | 'male' | 'other', cityId?: number, birthDate?: string, options?: any) {
        return UserAPIApiFp(this.configuration).apiV2UserAddPost(authorization, firstName, lastName, userName, password, avatarUrl, phoneNumber, emailAddress, gender, cityId, birthDate, options)(this.fetch, this.basePath);
    }

    /**
     * Returns all children this user has.<br/>Calling this API affects family, user_family, user, child_need, need and need_family tables.<br/>
     * @summary get user children
     * @param {string} authorization Access Token
     * @param {string} userId me or user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPIApi
     */
    public apiV2UserChildrenUserIduserIdGet(authorization: string, userId: string, options?: any) {
        return UserAPIApiFp(this.configuration).apiV2UserChildrenUserIduserIdGet(authorization, userId, options)(this.fetch, this.basePath);
    }

    /**
     * Deletes a user.<br/>It also delete all impacts and occurrences of this user in whole database.<br/>Deleting is managed by isDeleted tag everywhere, so we do not fully delete anything.<br/>Calling this API affects user, need_family and user_family tables.<br/>
     * @summary delete a user
     * @param {string} authorization Access Token
     * @param {string} userId me or user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPIApi
     */
    public apiV2UserDeleteUserIduserIdPatch(authorization: string, userId: string, options?: any) {
        return UserAPIApiFp(this.configuration).apiV2UserDeleteUserIduserIdPatch(authorization, userId, options)(this.fetch, this.basePath);
    }

    /**
     * Returns user's role in a specific family.<br/>
     * @summary get user role
     * @param {string} authorization Access Token
     * @param {string} userId me or user_id
     * @param {number} childId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPIApi
     */
    public apiV2UserRoleUserIduserIdchildIdchildIdGet(authorization: string, userId: string, childId: number, options?: any) {
        return UserAPIApiFp(this.configuration).apiV2UserRoleUserIduserIdchildIdchildIdGet(authorization, userId, childId, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Search in users
     * @param {string} authorization Access Token
     * @param {string} q
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPIApi
     */
    public apiV2UserSearchGet(authorization: string, q: string, options?: any) {
        return UserAPIApiFp(this.configuration).apiV2UserSearchGet(authorization, q, options)(this.fetch, this.basePath);
    }

    /**
     * Updates a user information.<br/>All the fields are optional.<br/>For avatarUrl you have to upload a file in png, jpg or jpeg.<br/>Be aware that city and country are integer fields, so you cannot insert their names in those fields.<br/>You have to insert the international codes for countries and cities.<br/>Calling this API only affects on user table.<br/>For gender, [true] is male and [false] is female.<br/>
     * @summary update a user
     * @param {string} authorization Access Token
     * @param {string} userId me or user_id
     * @param {string} [firstName]
     * @param {string} [lastName]
     * @param {any} [avatarUrl]
     * @param {string} [phoneNumber]
     * @param {string} [emailAddress]
     * @param {string} [postalAddress]
     * @param {string} [postalCode]
     * @param {'female' | 'male' | 'other'} [gender]
     * @param {number} [cityId]
     * @param {string} [birthDate]
     * @param {string} [userName]
     * @param {string} [password]
     * @param {string} [locale] en or fa
     * @param {boolean} [receiveEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPIApi
     */
    public apiV2UserUpdateUserIduserIdPatch(authorization: string, userId: string, firstName?: string, lastName?: string, avatarUrl?: any, phoneNumber?: string, emailAddress?: string, postalAddress?: string, postalCode?: string, gender?: 'female' | 'male' | 'other', cityId?: number, birthDate?: string, userName?: string, password?: string, locale?: string, receiveEmail?: boolean, options?: any) {
        return UserAPIApiFp(this.configuration).apiV2UserUpdateUserIduserIdPatch(authorization, userId, firstName, lastName, avatarUrl, phoneNumber, emailAddress, postalAddress, postalCode, gender, cityId, birthDate, userName, password, locale, receiveEmail, options)(this.fetch, this.basePath);
    }

    /**
     * Returns information of a user with given id as a json object.<br/>Calling this API affects child, need, child_need and need_family and user tables.<br/>It contains user info, its children and those children's needs.<br/>
     * @summary get user by id
     * @param {string} authorization Access Token
     * @param {string} userId me or user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPIApi
     */
    public apiV2UserUserIduserIdGet(authorization: string, userId: string, options?: any) {
        return UserAPIApiFp(this.configuration).apiV2UserUserIduserIdGet(authorization, userId, options)(this.fetch, this.basePath);
    }

}

/**
 * VerificationAPIApi - fetch parameter creator
 * @export
 */
export const VerificationAPIApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Verify Email API
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthVerifyEmailPost(email: string, options: any = {}): FetchArgs {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email', 'Required parameter email was null or undefined when calling apiV2AuthVerifyEmailPost.');
            }
            const localVarPath = `/api/v2/auth/verify/email`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (email !== undefined) {
                localVarFormParams.set('email', email as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Verify API
         * @param {string} id
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthVerifyIdPatch(id: string, code: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiV2AuthVerifyIdPatch.');
            }
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code', 'Required parameter code was null or undefined when calling apiV2AuthVerifyIdPatch.');
            }
            const localVarPath = `/api/v2/auth/verify/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (code !== undefined) {
                localVarFormParams.set('code', code as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Verify Phone API
         * @param {string} phoneNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthVerifyPhonePost(phoneNumber: string, options: any = {}): FetchArgs {
            // verify required parameter 'phoneNumber' is not null or undefined
            if (phoneNumber === null || phoneNumber === undefined) {
                throw new RequiredError('phoneNumber', 'Required parameter phoneNumber was null or undefined when calling apiV2AuthVerifyPhonePost.');
            }
            const localVarPath = `/api/v2/auth/verify/phone`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            if (phoneNumber !== undefined) {
                localVarFormParams.set('phone_number', phoneNumber as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerificationAPIApi - functional programming interface
 * @export
 */
export const VerificationAPIApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Verify Email API
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthVerifyEmailPost(email: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = VerificationAPIApiFetchParamCreator(configuration).apiV2AuthVerifyEmailPost(email, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Verify API
         * @param {string} id
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthVerifyIdPatch(id: string, code: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = VerificationAPIApiFetchParamCreator(configuration).apiV2AuthVerifyIdPatch(id, code, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @summary Verify Phone API
         * @param {string} phoneNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthVerifyPhonePost(phoneNumber: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = VerificationAPIApiFetchParamCreator(configuration).apiV2AuthVerifyPhonePost(phoneNumber, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * VerificationAPIApi - factory interface
 * @export
 */
export const VerificationAPIApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         *
         * @summary Verify Email API
         * @param {string} email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthVerifyEmailPost(email: string, options?: any) {
            return VerificationAPIApiFp(configuration).apiV2AuthVerifyEmailPost(email, options)(fetch, basePath);
        },
        /**
         *
         * @summary Verify API
         * @param {string} id
         * @param {string} code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthVerifyIdPatch(id: string, code: string, options?: any) {
            return VerificationAPIApiFp(configuration).apiV2AuthVerifyIdPatch(id, code, options)(fetch, basePath);
        },
        /**
         *
         * @summary Verify Phone API
         * @param {string} phoneNumber
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthVerifyPhonePost(phoneNumber: string, options?: any) {
            return VerificationAPIApiFp(configuration).apiV2AuthVerifyPhonePost(phoneNumber, options)(fetch, basePath);
        },
    };
};

/**
 * VerificationAPIApi - object-oriented interface
 * @export
 * @class VerificationAPIApi
 * @extends {BaseAPI}
 */
export class VerificationAPIApi extends BaseAPI {
    /**
     *
     * @summary Verify Email API
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationAPIApi
     */
    public apiV2AuthVerifyEmailPost(email: string, options?: any) {
        return VerificationAPIApiFp(this.configuration).apiV2AuthVerifyEmailPost(email, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Verify API
     * @param {string} id
     * @param {string} code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationAPIApi
     */
    public apiV2AuthVerifyIdPatch(id: string, code: string, options?: any) {
        return VerificationAPIApiFp(this.configuration).apiV2AuthVerifyIdPatch(id, code, options)(this.fetch, this.basePath);
    }

    /**
     *
     * @summary Verify Phone API
     * @param {string} phoneNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationAPIApi
     */
    public apiV2AuthVerifyPhonePost(phoneNumber: string, options?: any) {
        return VerificationAPIApiFp(this.configuration).apiV2AuthVerifyPhonePost(phoneNumber, options)(this.fetch, this.basePath);
    }

}

